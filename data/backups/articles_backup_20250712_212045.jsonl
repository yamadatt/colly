{"url":"https://yamada-tech-memo.netlify.app/posts/test-article-1","title":"テスト記事1：Goプログラミング入門","content":"\u003ch1\u003eGoプログラミング入門\u003c/h1\u003e\u003cp\u003eGoは効率的なプログラミング言語です。\u003c/p\u003e","plain_text":"Goプログラミング入門\nGoは効率的なプログラミング言語です。","author":"山田太郎","scraped_at":"2025-07-12T20:08:30.840199913+09:00","word_count":15,"content_hash":"hash123abc"}
{"url":"https://yamada-tech-memo.netlify.app/posts/test-article-2","title":"テスト記事2：Webスクレイピングのベストプラクティス","content":"\u003ch1\u003eWebスクレイピング\u003c/h1\u003e\u003cp\u003e適切なマナーでスクレイピングを行いましょう。\u003c/p\u003e","plain_text":"Webスクレイピング\n適切なマナーでスクレイピングを行いましょう。","author":"田中花子","scraped_at":"2025-07-12T20:08:30.840199976+09:00","word_count":20,"content_hash":"hash456def"}
{"url":"https://yamada-tech-memo.netlify.app/posts/test-article-3","title":"テスト記事3：データベース設計の基礎","content":"\u003ch1\u003eデータベース設計\u003c/h1\u003e\u003cp\u003e正規化とパフォーマンスのバランスが重要です。\u003c/p\u003e","plain_text":"データベース設計\n正規化とパフォーマンスのバランスが重要です。","scraped_at":"2025-07-12T20:08:30.840200024+09:00","word_count":18,"content_hash":"hash789ghi"}
{"url":"https://yamada-tech-memo.netlify.app/posts/","title":"📚 posts","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        git cleanコマンドを使って未追跡ファイルを安全に削除する方法を詳しく解説\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/git-clean-untracked-files/git-clean.jpg\" alt=\"git clean\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to git cleanで未追跡ファイルを安全に削除する方法\" href=\"https://yamada-tech-memo.netlify.app/posts/git-clean-untracked-files/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        GitHub ActionsはOKでもNGでも通知する\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/github-actions-slack/slack.png\" alt=\"slack\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to GitHub Actions × Slackで ECSデプロイを可視化する\" href=\"https://yamada-tech-memo.netlify.app/posts/github-actions-slack/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        もっと早く知っておけばよかった\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/github-actions-oidc-aws-ecs/oidc.png\" alt=\"oidc\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to GitHub ActionsからOIDCを使って安全にAWS ECSへデプロイするぜ！\" href=\"https://yamada-tech-memo.netlify.app/posts/github-actions-oidc-aws-ecs/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        npm installからのnpm run build\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/vite-manifest-not-found/PHP.png\" alt=\"vivliostyle\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to LaravelでVite manifest not found at:のエラー\" href=\"https://yamada-tech-memo.netlify.app/posts/vite-manifest-not-found/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        Lambdaで実装\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/lambda_switchbot_new_relic/01.png\" alt=\"vivliostyle\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to SwitchBotの温度と湿度をLambdaで「New Relic」に送る\" href=\"https://yamada-tech-memo.netlify.app/posts/lambda_switchbot_new_relic/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        自前は気にすることが多い\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/20250702_new_relic/image.png\" alt=\"vivliostyle\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to 自前の「Grafana＋Prometheus」から「New Relic」に変更した\" href=\"https://yamada-tech-memo.netlify.app/posts/20250702_new_relic/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        便利なツールがあるもんだ！\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/yt-dlp-download-dj-mix/yt-dlp.png\" alt=\"vivliostyle\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to yt-dlpでmixcloudのDJ MIXをダウンロードする\" href=\"https://yamada-tech-memo.netlify.app/posts/yt-dlp-download-dj-mix/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        CI/CDができる\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/markdown-to-pdf/vivliostyle.png\" alt=\"vivliostyle\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to Vivliostyleで書籍作りを妄想した\" href=\"https://yamada-tech-memo.netlify.app/posts/markdown-to-pdf/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        CodexがPLUSに落ちてきた\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/open-ai-codex-vibe-coding/vibe.png\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to codexが使えるようになったので、vibe codingを試した\" href=\"https://yamada-tech-memo.netlify.app/posts/open-ai-codex-vibe-coding/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        無料でできる\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/lambda-kick0spotify-recently-play-music/lambda-spotify.png\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to Spotifyの再生履歴取得アプリをlambdaで動かす\" href=\"https://yamada-tech-memo.netlify.app/posts/lambda-kick0spotify-recently-play-music/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003c/body\u003e\u003c/html\u003e","plain_text":"git cleanコマンドを使って未追跡ファイルを安全に削除する方法を詳しく解説 GitHub ActionsはOKでもNGでも通知する もっと早く知っておけばよかった npm installからのnpm run build Lambdaで実装 自前は気にすることが多い 便利なツールがあるもんだ！ CI/CDができる CodexがPLUSに落ちてきた 無料でできる","scraped_at":"2025-07-12T20:13:54.333277734+09:00","word_count":15,"content_hash":"bb0480db672202f676b867d19e35e035"}
{"url":"https://yamada-tech-memo.netlify.app/","title":"技術的なメモを残す","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003cbr/\u003e\n 何回もググるから、メモを残しておく\u003cbr/\u003e\n 🏃‍♂️ running 🎧 music \u003cbr/\u003e\n\n    \u003c/body\u003e\u003c/html\u003e","plain_text":"何回もググるから、メモを残しておく 🏃‍♂️ running 🎧 music","scraped_at":"2025-07-12T20:26:19.105693895+09:00","word_count":5,"content_hash":"5b0d0abee531969e03cfc21e259317be"}
{"url":"https://yamada-tech-memo.netlify.app/posts/git-clean-untracked-files/","title":"git cleanで未追跡ファイルを安全に削除する方法","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003ch2 id=\"1-はじめに\"\u003e1. はじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAIを使用してバイブコーディングをしていると、コミットした時点に戻したい時があります。そんな時はcheckoutします。\u003c/p\u003e\n\u003cp\u003eが、checkoutだと、未追跡のファイルやディレクトリは削除してくれません。\u003c/p\u003e\n\u003cp\u003eそんな時に役立つのが \u003ccode\u003egit clean\u003c/code\u003e コマンドです。この記事では、\u003ccode\u003egit clean\u003c/code\u003e を使って未追跡ファイルを安全かつ効率的に削除する方法を詳しく解説します。\u003c/p\u003e\n\u003ch2 id=\"2-git-cleanとは\"\u003e2. git cleanとは\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-git-cleanとは\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egit clean\u003c/code\u003e は、Gitの追跡対象外（未追跡）のファイルやディレクトリを削除するコマンドです。\u003c/p\u003e\n\u003ch3 id=\"21-削除対象となるもの\"\u003e2.1. 削除対象となるもの\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-削除対象となるもの\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e未追跡ファイル（\u003ccode\u003egit add\u003c/code\u003e されていないファイル）\u003c/li\u003e\n\u003cli\u003e空のディレクトリ\u003c/li\u003e\n\u003cli\u003eビルド成果物\u003c/li\u003e\n\u003cli\u003eエディタの一時ファイル\u003c/li\u003e\n\u003cli\u003eテスト用に作成したファイル\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"22-削除対象にならないもの\"\u003e2.2. 削除対象にならないもの\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-削除対象にならないもの\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e追跡済みファイル（\u003ccode\u003egit add\u003c/code\u003e 済み、またはコミット済み）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.gitignore\u003c/code\u003e に記載されたファイル（デフォルト）\u003c/li\u003e\n\u003cli\u003eステージングエリアにあるファイル\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-基本的な使い方\"\u003e3. 基本的な使い方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-基本的な使い方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"31-削除対象を確認ドライラン\"\u003e3.1. 削除対象を確認（ドライラン）\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#31-削除対象を確認ドライラン\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e実際に削除する前に、どのファイルが削除されるかを確認することが重要です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#776e71\"\u003e# 未追跡ファイルを削除対象としてリスト表示\u003c/span\u003e\ngit clean -n\n\n\u003cspan style=\"color:#776e71\"\u003e# ディレクトリも含めて確認\u003c/span\u003e\ngit clean -n -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eオプションの説明：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-n\u003c/code\u003e (または \u003ccode\u003e--dry-run\u003c/code\u003e): 実際には削除せず、削除対象を表示のみ\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-d\u003c/code\u003e: ディレクトリも対象に含める\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e実行例：\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ git clean -n -d\nWould remove temp.txt\nWould remove build/\nWould remove .DS_Store\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"32-実際に削除を実行\"\u003e3.2. 実際に削除を実行\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#32-実際に削除を実行\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e確認して問題なければ、実際に削除します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#776e71\"\u003e# 未追跡ファイルを削除\u003c/span\u003e\ngit clean -f\n\n\u003cspan style=\"color:#776e71\"\u003e# 未追跡ファイルとディレクトリを削除\u003c/span\u003e\ngit clean -f -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e重要：\u003c/strong\u003e \u003ccode\u003e-f\u003c/code\u003e (force) オプションが必須です。Git は誤削除を防ぐため、このオプションなしでは実行されません。\u003c/p\u003e\n\u003ch2 id=\"4-よく使用するオプション\"\u003e4. よく使用するオプション\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-よく使用するオプション\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"41-基本オプション\"\u003e4.1. 基本オプション\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#41-基本オプション\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eオプション\u003c/th\u003e\n\u003cth\u003e説明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-n\u003c/code\u003e / \u003ccode\u003e--dry-run\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e削除せずに削除対象のファイルを表示\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-f\u003c/code\u003e / \u003ccode\u003e--force\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e実際に削除を実行（必須）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-d\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e未追跡ディレクトリも削除対象に含める\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-i\u003c/code\u003e / \u003ccode\u003e--interactive\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e対話モードで各ファイルを確認\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"42-高度なオプション\"\u003e4.2. 高度なオプション\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#42-高度なオプション\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eオプション\u003c/th\u003e\n\u003cth\u003e説明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-x\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e.gitignore\u003c/code\u003e に記載されたファイルも削除\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-X\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e.gitignore\u003c/code\u003e に記載されたファイルのみ削除\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-q\u003c/code\u003e / \u003ccode\u003e--quiet\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e削除したファイルを表示しない\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"5-実用的な使用例\"\u003e5. 実用的な使用例\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#5-実用的な使用例\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"51-開発中の一時ファイルを削除\"\u003e5.1. 開発中の一時ファイルを削除\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#51-開発中の一時ファイルを削除\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#776e71\"\u003e# まず確認\u003c/span\u003e\ngit clean -n -d\n\n\u003cspan style=\"color:#776e71\"\u003e# 実行\u003c/span\u003e\ngit clean -f -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"52-ビルド成果物も含めて全て削除\"\u003e5.2. ビルド成果物も含めて全て削除\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#52-ビルド成果物も含めて全て削除\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#776e71\"\u003e# .gitignore のファイルも含めて確認\u003c/span\u003e\ngit clean -n -d -x\n\n\u003cspan style=\"color:#776e71\"\u003e# 実行\u003c/span\u003e\ngit clean -f -d -x\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"53-対話モードで選択的に削除\"\u003e5.3. 対話モードで選択的に削除\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#53-対話モードで選択的に削除\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#776e71\"\u003e# 各ファイルを確認しながら削除\u003c/span\u003e\ngit clean -i -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e対話モードでは以下のような選択肢が表示されます：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eWould remove the following items:\n  temp.txt\n  build/\n*** Commands ***\n    1: clean                2: filter by pattern    3: select by numbers\n    4: ask each             5: quit                 6: help\nWhat now\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"54-特定のパターンのファイルのみ削除\"\u003e5.4. 特定のパターンのファイルのみ削除\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#54-特定のパターンのファイルのみ削除\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#776e71\"\u003e# .log ファイルのみ削除\u003c/span\u003e\ngit clean -f \u003cspan style=\"color:#48b685\"\u003e\u0026#34;*.log\u0026#34;\u003c/span\u003e\n\n\u003cspan style=\"color:#776e71\"\u003e# 特定のディレクトリ内のみ削除\u003c/span\u003e\ngit clean -f -d src/temp/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"6-注意点と安全な使い方\"\u003e6. 注意点と安全な使い方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#6-注意点と安全な使い方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"61-必ずドライランで確認\"\u003e6.1. 必ずドライランで確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#61-必ずドライランで確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#776e71\"\u003e# 危険：いきなり削除\u003c/span\u003e\ngit clean -f -d\n\n\u003cspan style=\"color:#776e71\"\u003e# 安全：まず確認してから削除\u003c/span\u003e\ngit clean -n -d\ngit clean -f -d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"62-重要なファイルはgitignoreに追加\"\u003e6.2. 重要なファイルは.gitignoreに追加\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#62-重要なファイルはgitignoreに追加\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e削除したくないファイルは事前に \u003ccode\u003e.gitignore\u003c/code\u003e に記載しておきます：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e# 設定ファイル\nconfig.local.json\n\n# 開発用データ\ndata/development/\n\n# IDE設定\n.vscode/\n.idea/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"7-よくある問題と解決法\"\u003e7. よくある問題と解決法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#7-よくある問題と解決法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"71-q1-削除されないファイルがある\"\u003e7.1. Q1: 削除されないファイルがある\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#71-q1-削除されないファイルがある\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e原因：\u003c/strong\u003e ファイルが \u003ccode\u003e.gitignore\u003c/code\u003e に記載されている\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e解決法：\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#776e71\"\u003e# .gitignore のファイルも削除\u003c/span\u003e\ngit clean -f -d -x\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"72-q2-削除対象が表示されない\"\u003e7.2. Q2: 削除対象が表示されない\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#72-q2-削除対象が表示されない\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e原因：\u003c/strong\u003e ファイルが既に追跡されている\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e確認方法：\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#776e71\"\u003e# ファイルの状態を確認\u003c/span\u003e\ngit status\n\n\u003cspan style=\"color:#776e71\"\u003e# 追跡されているファイルを確認\u003c/span\u003e\ngit ls-files\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"73-q3-誤って重要なファイルを削除してしまった\"\u003e7.3. Q3: 誤って重要なファイルを削除してしまった\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#73-q3-誤って重要なファイルを削除してしまった\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e対処法：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eシステムのゴミ箱を確認\u003c/li\u003e\n\u003cli\u003eバックアップから復元\u003c/li\u003e\n\u003cli\u003e残念ながら Git では復元できません\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"8-まとめ\"\u003e8. まとめ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#8-まとめ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egit clean\u003c/code\u003e は未追跡ファイルを効率的に削除できる便利なコマンドですが、削除されたファイルは復元できないため注意が必要です。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e安全に使用するためのベストプラクティス：\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e必ずドライランで確認\u003c/strong\u003e (\u003ccode\u003egit clean -n -d\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e重要なファイルは\u003ccode\u003e.gitignore\u003c/code\u003eに追加\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e必要に応じてバックアップを取得\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e段階的に削除\u003c/strong\u003e（まずファイルのみ、次にディレクトリ）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e定期的に \u003ccode\u003egit clean\u003c/code\u003e を実行することで、クリーンな開発環境を維持できます。特にCI/CDパイプラインでビルド環境をクリーンアップする際にも非常に有用です。\u003c/p\u003e\n\u003cp\u003e慣れるまでは \u003ccode\u003e-n\u003c/code\u003e オプションでの確認を忘れずに、安全にGitリポジトリを管理していきましょう。\u003c/p\u003e\n\n\n        \u003c/body\u003e\u003c/html\u003e","plain_text":"1. はじめに# AIを使用してバイブコーディングをしていると、コミットした時点に戻したい時があります。そんな時はcheckoutします。 が、checkoutだと、未追跡のファイルやディレクトリは削除してくれません。 そんな時に役立つのが git clean コマンドです。この記事では、git clean を使って未追跡ファイルを安全かつ効率的に削除する方法を詳しく解説します。 2. git cleanとは# git clean は、Gitの追跡対象外（未追跡）のファイルやディレクトリを削除するコマンドです。 2.1. 削除対象となるもの# 未追跡ファイル（git add されていないファイル） 空のディレクトリ ビルド成果物 エディタの一時ファイル テスト用に作成したファイル 2.2. 削除対象にならないもの# 追跡済みファイル（git add 済み、またはコミット済み） .gitignore に記載されたファイル（デフォルト） ステージングエリアにあるファイル 3. 基本的な使い方# 3.1. 削除対象を確認（ドライラン）# 実際に削除する前に、どのファイルが削除されるかを確認することが重要です。 # 未追跡ファイルを削除対象としてリスト表示 git clean -n # ディレクトリも含めて確認 git clean -n -d オプションの説明： -n (または --dry-run): 実際には削除せず、削除対象を表示のみ -d: ディレクトリも対象に含める 実行例： $ git clean -n -d Would remove temp.txt Would remove build/ Would remove .DS_Store 3.2. 実際に削除を実行# 確認して問題なければ、実際に削除します。 # 未追跡ファイルを削除 git clean -f # 未追跡ファイルとディレクトリを削除 git clean -f -d 重要： -f (force) オプションが必須です。Git は誤削除を防ぐため、このオプションなしでは実行されません。 4. よく使用するオプション# 4.1. 基本オプション# オプション 説明 -n / --dry-run 削除せずに削除対象のファイルを表示 -f / --force 実際に削除を実行（必須） -d 未追跡ディレクトリも削除対象に含める -i / --interactive 対話モードで各ファイルを確認 4.2. 高度なオプション# オプション 説明 -x .gitignore に記載されたファイルも削除 -X .gitignore に記載されたファイルのみ削除 -q / --quiet 削除したファイルを表示しない 5. 実用的な使用例# 5.1. 開発中の一時ファイルを削除# # まず確認 git clean -n -d # 実行 git clean -f -d 5.2. ビルド成果物も含めて全て削除# # .gitignore のファイルも含めて確認 git clean -n -d -x # 実行 git clean -f -d -x 5.3. 対話モードで選択的に削除# # 各ファイルを確認しながら削除 git clean -i -d 対話モードでは以下のような選択肢が表示されます： Would remove the following items: temp.txt build/ *** Commands *** 1: clean 2: filter by pattern 3: select by numbers 4: ask each 5: quit 6: help What now\u003e 5.4. 特定のパターンのファイルのみ削除# # .log ファイルのみ削除 git clean -f \"*.log\" # 特定のディレクトリ内のみ削除 git clean -f -d src/temp/ 6. 注意点と安全な使い方# 6.1. 必ずドライランで確認# # 危険：いきなり削除 git clean -f -d # 安全：まず確認してから削除 git clean -n -d git clean -f -d 6.2. 重要なファイルは.gitignoreに追加# 削除したくないファイルは事前に .gitignore に記載しておきます： # 設定ファイル config.local.json # 開発用データ data/development/ # IDE設定 .vscode/ .idea/ 7. よくある問題と解決法# 7.1. Q1: 削除されないファイルがある# 原因： ファイルが .gitignore に記載されている 解決法： # .gitignore のファイルも削除 git clean -f -d -x 7.2. Q2: 削除対象が表示されない# 原因： ファイルが既に追跡されている 確認方法： # ファイルの状態を確認 git status # 追跡されているファイルを確認 git ls-files 7.3. Q3: 誤って重要なファイルを削除してしまった# 対処法： システムのゴミ箱を確認 バックアップから復元 残念ながら Git では復元できません 8. まとめ# git clean は未追跡ファイルを効率的に削除できる便利なコマンドですが、削除されたファイルは復元できないため注意が必要です。 安全に使用するためのベストプラクティス： 必ずドライランで確認 (git clean -n -d) 重要なファイルは.gitignoreに追加 必要に応じてバックアップを取得 段階的に削除（まずファイルのみ、次にディレクトリ） 定期的に git clean を実行することで、クリーンな開発環境を維持できます。特にCI/CDパイプラインでビルド環境をクリーンアップする際にも非常に有用です。 慣れるまでは -n オプションでの確認を忘れずに、安全にGitリポジトリを管理していきましょう。","scraped_at":"2025-07-12T20:26:21.256694923+09:00","word_count":308,"content_hash":"7e80e20b77a84250fdf1917fe9216d05"}
{"url":"https://yamada-tech-memo.netlify.app/posts/github-actions-slack/","title":"GitHub Actions × Slackで ECSデプロイを可視化する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003ch2 id=\"1-はじめに\"\u003e1. はじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHub Actionsを用いてECSにデプロイしています。デプロイ結果をSlackに通知するGitHub Actionsの実装を紹介します。\u003c/p\u003e\n\u003cp\u003e通知には、成功・失敗のステータスだけでなく、デプロイ所要時間や変更されたファイル一覧も含め、チーム開発で役立つ情報を整形して送信しています。\u003c/p\u003e\n\u003ch2 id=\"2-通知のサンプル\"\u003e2. 通知のサンプル\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-通知のサンプル\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHubActionsが動くと、以下のようにslackに通知されます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./slack.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"3-githubactionsの流れ\"\u003e3. GitHubActionsの流れ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-githubactionsの流れ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のように動きます。それぞれのステップごとにGitHub Actionsの定義を解説します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./flow.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"31-デプロイ所要時間を計算\"\u003e3.1. デプロイ所要時間を計算\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#31-デプロイ所要時間を計算\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eこのステップでは、deploy-start ステップで記録しておいたUnixタイムスタンプとの差分から、デプロイにかかった分・秒単位の所要時間を計算します。結果は後続のステップで使用するため、GITHUB_OUTPUT に出力します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e- \u003cspan style=\"color:#5bc4bf\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eCalculate deploy duration\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003eid\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003edeploy-duration\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003eif\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003ealways()\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003erun\u003c/span\u003e: |\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    end_time=$(date -u +%s)\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    duration=$((end_time - ${{ steps.deploy-start.outputs.start_time }}))\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    minutes=$((duration / 60))\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    seconds=$((duration % 60))\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    echo \u0026#34;duration=${minutes}分${seconds}秒\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT\u003c/span\u003e    \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"32-コミットの変更内容を取得\"\u003e3.2. コミットの変更内容を取得\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#32-コミットの変更内容を取得\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e最新のコミット（HEAD）と一つ前のコミット（HEAD~1）との差分を取得し、変更ファイル数（changed_files）最大5件の変更ファイル一覧（files_list）を整形して出力します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e- \u003cspan style=\"color:#5bc4bf\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eGet commit changes\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003eid\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003ecommit-changes\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003eif\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003ealways()\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003erun\u003c/span\u003e: |\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    changed_files=$(git diff --name-only HEAD~1 HEAD | wc -l)\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    echo \u0026#34;changed_files=${changed_files}\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    \n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    files_list=$(git diff --name-only HEAD~1 HEAD | head -5 | sed \u0026#39;s/^/• /\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39;\\n\u0026#39;)\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    echo \u0026#34;files_list\u0026lt;\u0026lt;EOF\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    echo \u0026#34;$files_list\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    echo \u0026#34;EOF\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT\u003c/span\u003e    \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"33-slack通知の送信\"\u003e3.3. Slack通知の送信\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#33-slack通知の送信\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSlack通知はSlack Block Kit形式で整形され、視認性の高いレイアウトになります。通知には以下の情報が含まれます。\u003c/p\u003e\n\u003cp\u003e最低限必要なのは、成功したか失敗したかのステータスです。そして、成功や失敗したステータスについて詳細に参照するためのGitHubへのリンクを入れるのも必要だと思います。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e成功 or 失敗のステータス（アイコン付き）\u003c/li\u003e\n\u003cli\u003e実行者、ブランチ名\u003c/li\u003e\n\u003cli\u003eデプロイ所要時間、変更ファイル数\u003c/li\u003e\n\u003cli\u003eコミットメッセージと変更ファイル一覧\u003c/li\u003e\n\u003cli\u003eコミットとGitHub Actionsのワークフローへのリンク\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e- \u003cspan style=\"color:#5bc4bf\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eSlack Notification\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003eif\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003ealways()\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003eenv\u003c/span\u003e:\n    \u003cspan style=\"color:#5bc4bf\"\u003eSTATUS_ICON\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ job.status == \u0026#39;success\u0026#39; \u0026amp;\u0026amp; \u0026#39;✅\u0026#39; || \u0026#39;❌\u0026#39; }}\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003eSTATUS_TEXT\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ job.status == \u0026#39;success\u0026#39; \u0026amp;\u0026amp; \u0026#39;デプロイ成功\u0026#39; || \u0026#39;デプロイ失敗\u0026#39; }}\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003eSTATUS_COLOR\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ job.status == \u0026#39;success\u0026#39; \u0026amp;\u0026amp; \u0026#39;good\u0026#39; || \u0026#39;danger\u0026#39; }}\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003eDEPLOY_STATUS\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ job.status == \u0026#39;success\u0026#39; \u0026amp;\u0026amp; \u0026#39;ECSへのデプロイが完了しました！\u0026#39; || \u0026#39;ECSへのデプロイに失敗しました。\u0026#39; }}\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003eCOMMIT_URL\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ github.event.head_commit.url }}\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003eWORKFLOW_URL\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003eDEPLOY_DURATION\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ steps.deploy-duration.outputs.duration }}\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003eCHANGED_FILES\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ steps.commit-changes.outputs.changed_files }}\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003eFILES_LIST\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ steps.commit-changes.outputs.files_list }}\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003euses\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eslackapi/slack-github-action@v2.1.1\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003ewith\u003c/span\u003e:\n    \u003cspan style=\"color:#5bc4bf\"\u003ewebhook\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ env.SLACK_WEBHOOK_URL }}\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003ewebhook-type\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003ewebhook-trigger\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003epayload\u003c/span\u003e: |\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e      {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e        \u0026#34;text\u0026#34;: \u0026#34;ECSデプロイ通知\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e        \u0026#34;attachments\u0026#34;: [\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e          {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e            \u0026#34;color\u0026#34;: \u0026#34;${{ env.STATUS_COLOR }}\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e            \u0026#34;blocks\u0026#34;: [\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;text\u0026#34;: {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  \u0026#34;text\u0026#34;: \u0026#34;${{ env.STATUS_ICON }} *${{ env.STATUS_TEXT }}*: ${{ env.DEPLOY_STATUS }}\u0026#34;\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                }\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;fields\u0026#34;: [\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  { \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;*実行者*\\n${{ github.actor }}\u0026#34; },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  { \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;*ブランチ*\\n${{ github.ref_name }}\u0026#34; },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  { \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;*デプロイ時間*\\n${{ env.DEPLOY_DURATION }}\u0026#34; },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  { \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;*変更ファイル数*\\n${{ env.CHANGED_FILES }}件\u0026#34; }\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                ]\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;text\u0026#34;: {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  \u0026#34;text\u0026#34;: \u0026#34;*コミットメッセージ*\\n${{ github.event.head_commit.message }}\u0026#34;\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                }\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;text\u0026#34;: {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  \u0026#34;text\u0026#34;: \u0026#34;*変更されたファイル*\\n${{ env.FILES_LIST }}\u0026#34;\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                }\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;text\u0026#34;: {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  \u0026#34;text\u0026#34;: \u0026#34;*イメージタグ*\\n`${{ env.IMAGE_TAG }}`\u0026#34;\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                }\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;type\u0026#34;: \u0026#34;actions\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                \u0026#34;elements\u0026#34;: [\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                    \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                    \u0026#34;text\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;plain_text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;コミット詳細\u0026#34; },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                    \u0026#34;url\u0026#34;: \u0026#34;${{ env.COMMIT_URL }}\u0026#34;\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  {\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                    \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                    \u0026#34;text\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;plain_text\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;ワークフロー詳細\u0026#34; },\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                    \u0026#34;url\u0026#34;: \u0026#34;${{ env.WORKFLOW_URL }}\u0026#34;\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                  }\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                ]\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e              }\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e            ]\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e          }\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e        ]\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e      }\u003c/span\u003e      \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上記のようにGitHub Actionsを用いて、ECSデプロイの可視化とSlackへの自動通知を組み込んでます。\u003c/p\u003e\n\u003cp\u003e通知は失敗時にも送信されるため、トラブルにも素早く対応できるようになります。特に開発期間はこういう通知があると初動が早くなるのでおすすめです。\u003c/p\u003e\n\n\n        \u003c/body\u003e\u003c/html\u003e","plain_text":"1. はじめに# GitHub Actionsを用いてECSにデプロイしています。デプロイ結果をSlackに通知するGitHub Actionsの実装を紹介します。 通知には、成功・失敗のステータスだけでなく、デプロイ所要時間や変更されたファイル一覧も含め、チーム開発で役立つ情報を整形して送信しています。 2. 通知のサンプル# GitHubActionsが動くと、以下のようにslackに通知されます。 3. GitHubActionsの流れ# 以下のように動きます。それぞれのステップごとにGitHub Actionsの定義を解説します。 3.1. デプロイ所要時間を計算# このステップでは、deploy-start ステップで記録しておいたUnixタイムスタンプとの差分から、デプロイにかかった分・秒単位の所要時間を計算します。結果は後続のステップで使用するため、GITHUB_OUTPUT に出力します。 - name: Calculate deploy duration id: deploy-duration if: always() run: | end_time=$(date -u +%s) duration=$((end_time - ${{ steps.deploy-start.outputs.start_time }})) minutes=$((duration / 60)) seconds=$((duration % 60)) echo \"duration=${minutes}分${seconds}秒\" \u003e\u003e $GITHUB_OUTPUT 3.2. コミットの変更内容を取得# 最新のコミット（HEAD）と一つ前のコミット（HEAD~1）との差分を取得し、変更ファイル数（changed_files）最大5件の変更ファイル一覧（files_list）を整形して出力します。 - name: Get commit changes id: commit-changes if: always() run: | changed_files=$(git diff --name-only HEAD~1 HEAD | wc -l) echo \"changed_files=${changed_files}\" \u003e\u003e $GITHUB_OUTPUT files_list=$(git diff --name-only HEAD~1 HEAD | head -5 | sed 's/^/• /' | tr '\\n' '\\n') echo \"files_list\u003c\u003cEOF\" \u003e\u003e $GITHUB_OUTPUT echo \"$files_list\" \u003e\u003e $GITHUB_OUTPUT echo \"EOF\" \u003e\u003e $GITHUB_OUTPUT 3.3. Slack通知の送信# Slack通知はSlack Block Kit形式で整形され、視認性の高いレイアウトになります。通知には以下の情報が含まれます。 最低限必要なのは、成功したか失敗したかのステータスです。そして、成功や失敗したステータスについて詳細に参照するためのGitHubへのリンクを入れるのも必要だと思います。 成功 or 失敗のステータス（アイコン付き） 実行者、ブランチ名 デプロイ所要時間、変更ファイル数 コミットメッセージと変更ファイル一覧 コミットとGitHub Actionsのワークフローへのリンク - name: Slack Notification if: always() env: STATUS_ICON: ${{ job.status == 'success' \u0026\u0026 '✅' || '❌' }} STATUS_TEXT: ${{ job.status == 'success' \u0026\u0026 'デプロイ成功' || 'デプロイ失敗' }} STATUS_COLOR: ${{ job.status == 'success' \u0026\u0026 'good' || 'danger' }} DEPLOY_STATUS: ${{ job.status == 'success' \u0026\u0026 'ECSへのデプロイが完了しました！' || 'ECSへのデプロイに失敗しました。' }} COMMIT_URL: ${{ github.event.head_commit.url }} WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} DEPLOY_DURATION: ${{ steps.deploy-duration.outputs.duration }} CHANGED_FILES: ${{ steps.commit-changes.outputs.changed_files }} FILES_LIST: ${{ steps.commit-changes.outputs.files_list }} uses: slackapi/slack-github-action@v2.1.1 with: webhook: ${{ env.SLACK_WEBHOOK_URL }} webhook-type: webhook-trigger payload: | { \"text\": \"ECSデプロイ通知\", \"attachments\": [ { \"color\": \"${{ env.STATUS_COLOR }}\", \"blocks\": [ { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"${{ env.STATUS_ICON }} *${{ env.STATUS_TEXT }}*: ${{ env.DEPLOY_STATUS }}\" } }, { \"type\": \"section\", \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*実行者*\\n${{ github.actor }}\" }, { \"type\": \"mrkdwn\", \"text\": \"*ブランチ*\\n${{ github.ref_name }}\" }, { \"type\": \"mrkdwn\", \"text\": \"*デプロイ時間*\\n${{ env.DEPLOY_DURATION }}\" }, { \"type\": \"mrkdwn\", \"text\": \"*変更ファイル数*\\n${{ env.CHANGED_FILES }}件\" } ] }, { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"*コミットメッセージ*\\n${{ github.event.head_commit.message }}\" } }, { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"*変更されたファイル*\\n${{ env.FILES_LIST }}\" } }, { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"*イメージタグ*\\n`${{ env.IMAGE_TAG }}`\" } }, { \"type\": \"actions\", \"elements\": [ { \"type\": \"button\", \"text\": { \"type\": \"plain_text\", \"text\": \"コミット詳細\" }, \"url\": \"${{ env.COMMIT_URL }}\" }, { \"type\": \"button\", \"text\": { \"type\": \"plain_text\", \"text\": \"ワークフロー詳細\" }, \"url\": \"${{ env.WORKFLOW_URL }}\" } ] } ] } ] } 上記のようにGitHub Actionsを用いて、ECSデプロイの可視化とSlackへの自動通知を組み込んでます。 通知は失敗時にも送信されるため、トラブルにも素早く対応できるようになります。特に開発期間はこういう通知があると初動が早くなるのでおすすめです。","scraped_at":"2025-07-12T20:26:21.258485581+09:00","word_count":350,"content_hash":"c1fbdf1b63f92ab69c55c75456bc12ec"}
{"url":"https://yamada-tech-memo.netlify.app/posts/vite-manifest-not-found/","title":"LaravelでVite manifest not found at:のエラー","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eひょんなことから、Laravelで環境構築をしています。\u003c/p\u003e\n\u003cp\u003e慣れてないので、コマンドを1つ投入するたびにつまづいています。\u003c/p\u003e\n\u003cp\u003e記録に残して、自分の血と肉にしようと思います。\u003c/p\u003e\n\u003cp\u003e##　エラー\u003c/p\u003e\n\u003cp\u003eアプリケーションを起動して、画面を表示させようとすると以下のメッセージが表示されます。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIlluminate\\Foundation\\ViteManifestNotFoundException\nVite manifest not found at: /var/www/html/public/build/manifest.json\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLaravel が Vite でビルドしたアセットの「マニフェストファイル」を見つけられなかったことを示しています。\u003c/p\u003e\n\u003cp\u003eReactの文脈でのViteだと思うのですが、LaravelでもViteが使われることが多いようです。Viteは開発時にすぐブラウザに反映させる便利なものです。\u003c/p\u003e\n\u003ch2 id=\"2-エラーの意味\"\u003e2. エラーの意味\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-エラーの意味\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"21-vite-manifest\"\u003e2.1. Vite manifest\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-vite-manifest\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eVite はビルド時に、生成されたファイル名（ハッシュ付き）とエントリーポイントの対応をmanifest.jsonとして出力します。\u003c/p\u003e\n\u003ch3 id=\"22-laravel-側の期待場所\"\u003e2.2. Laravel 側の期待場所\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-laravel-側の期待場所\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eデフォルト設定ではpublic/build/manifest.jsonを探しにいきます。\u003c/p\u003e\n\u003ch3 id=\"23-例外発生\"\u003e2.3. 例外発生\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#23-例外発生\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eそのファイルが無いため、Illuminate\\Foundation\\ViteManifestNotFoundExceptionが投げられ、アセット読み込みが止まります。\u003c/p\u003e\n\u003cp\u003e##　原因と対応\u003c/p\u003e\n\u003cp\u003eビルドを実行していないのが原因です。\u003c/p\u003e\n\u003cp\u003eというわけで、対応は以下のコマンドを投入するだけです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enpm run build\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# ひょんなことから、Laravelで環境構築をしています。 慣れてないので、コマンドを1つ投入するたびにつまづいています。 記録に残して、自分の血と肉にしようと思います。 ##　エラー アプリケーションを起動して、画面を表示させようとすると以下のメッセージが表示されます。 Illuminate\\Foundation\\ViteManifestNotFoundException Vite manifest not found at: /var/www/html/public/build/manifest.json Laravel が Vite でビルドしたアセットの「マニフェストファイル」を見つけられなかったことを示しています。 Reactの文脈でのViteだと思うのですが、LaravelでもViteが使われることが多いようです。Viteは開発時にすぐブラウザに反映させる便利なものです。 2. エラーの意味# 2.1. Vite manifest# Vite はビルド時に、生成されたファイル名（ハッシュ付き）とエントリーポイントの対応をmanifest.jsonとして出力します。 2.2. Laravel 側の期待場所# デフォルト設定ではpublic/build/manifest.jsonを探しにいきます。 2.3. 例外発生# そのファイルが無いため、Illuminate\\Foundation\\ViteManifestNotFoundExceptionが投げられ、アセット読み込みが止まります。 ##　原因と対応 ビルドを実行していないのが原因です。 というわけで、対応は以下のコマンドを投入するだけです。 npm run build","scraped_at":"2025-07-12T20:26:23.646773531+09:00","word_count":41,"content_hash":"702c6c03d3465700979863bc6d0bbf4d"}
{"url":"https://yamada-tech-memo.netlify.app/posts/github-actions-oidc-aws-ecs/","title":"GitHub ActionsからOIDCを使って安全にAWS ECSへデプロイするぜ！","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003ch2 id=\"1-はじめに\"\u003e1. はじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAWSにECS環境を構築します。GitHubActionsで以下を実施します。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eコンテナイメージのビルド\u003c/li\u003e\n\u003cli\u003eコンテナイメージをECRにPUSH\u003c/li\u003e\n\u003cli\u003eECSをデプロイするために、タスク定義のリビジョンアップデート\u003c/li\u003e\n\u003cli\u003eECSにタスクをデプロイ\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eこれまではシークレットキーやシークレットアクセスキーをSECRETSに書いていました。\u003c/p\u003e\n\u003cp\u003eこのやり方だと、権限が広すぎますし、有効期限を管理が面倒だし、今っぽくないと考えていました。\u003c/p\u003e\n\u003cp\u003e調べると、OIDC（OpenID Connect）使えば、一時的な認証情報だけで安全にAWSへアクセスできることがわかりました。\u003c/p\u003e\n\u003cp\u003eこの記事では、GitHub ActionsからOIDCを使ってECSタスクをデプロイする方法を解説します。\u003c/p\u003e\n\u003ch2 id=\"2-なぜoidcを使うのか\"\u003e2. なぜOIDCを使うのか？\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-なぜoidcを使うのか\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHub ActionsとAWSを連携する方法として、以下の2つがよく使われます。改めて表にしてみます。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e方法\u003c/th\u003e\n\u003cth\u003eセキュリティ\u003c/th\u003e\n\u003cth\u003e運用負荷\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eアクセスキーをSECRETSに登録\u003c/td\u003e\n\u003ctd\u003e中（漏洩リスクあり）\u003c/td\u003e\n\u003ctd\u003e高（ローテーション管理）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOIDCで一時クレデンシャル取得\u003c/td\u003e\n\u003ctd\u003e高（キー不要）\u003c/td\u003e\n\u003ctd\u003e低（管理自動化）\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eアクセスキーやシークレットアクセスキーを使うっていうのが、もう面倒なわけですよ。誰のものを使用するかとか考えたり、ローテーションはどうするかって考えたり、実際運用するのが手間なわけです。\u003c/p\u003e\n\u003cp\u003eで、この記事でフォーカスしているOIDCを使えば、アクセスキーの管理が不要になります。GitHubが発行するJWTトークンを使ってAWSにアクセスする仕組みで、最小権限の原則にも則った安全な構成が可能になるのです。\u003c/p\u003e\n\u003ch2 id=\"3-仕組み\"\u003e3. 仕組み\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-仕組み\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHub ActionsからOIDCを使ってAWSにアクセスする仕組みを図で表すと以下のようになります。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./oidc.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"31-用語の整理\"\u003e3.1. 用語の整理\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#31-用語の整理\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eまず、混同しやすい用語を整理します：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOIDC（OpenID Connect）: 認証プロトコルの名前\u003c/li\u003e\n\u003cli\u003eJWTトークン（JSON Web Token）: OIDCで使用される具体的なトークン形式\u003c/li\u003e\n\u003cli\u003eIDトークン: JWTトークンの一種で、ユーザーやサービスの身元情報を含む\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eこの記事では、GitHub ActionsがOIDCプロトコルを使用してJWTトークンを取得し、AWSに送信する流れを解説します。\u003c/p\u003e\n\u003cp\u003e上図の流れに沿って、4つのステップで詳しく説明します。\u003c/p\u003e\n\u003ch3 id=\"32--github-actionsでjwtトークンを取得\"\u003e3.2. ① GitHub ActionsでJWTトークンを取得\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#32--github-actionsでjwtトークンを取得\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eGitHub Actionsワークフローが実行されると、GitHub内蔵のOIDCプロバイダーからJWTトークン（JSON Web Token）を取得します。\u003c/p\u003e\n\u003ch3 id=\"33--awsにjwtトークンを送信してロール引き受けを要求\"\u003e3.3. ② AWSにJWTトークンを送信してロール引き受けを要求\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#33--awsにjwtトークンを送信してロール引き受けを要求\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e取得したJWTトークンを使って、AWS STSの\u003ccode\u003eAssumeRoleWithWebIdentity\u003c/code\u003e APIを呼び出します。この時、事前に設定したIAMロールの引き受けを要求します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#776e71\"\u003e# 内部的に実行されるAPI呼び出し（イメージ）\u003c/span\u003e\naws sts assume-role-with-web-identity \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e  --role-arn arn:aws:iam::123456789012:role/GitHubActionsRole \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e  --role-session-name github-actions-session \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e  --web-identity-token \u0026lt;JWT-Token\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"34--awsがjwtトークンを検証してiamロールを引き受け許可\"\u003e3.4. ③ AWSがJWTトークンを検証してIAMロールを引き受け許可\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#34--awsがjwtトークンを検証してiamロールを引き受け許可\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eAWSは受け取ったJWTトークンを以下の手順で検証します。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e発行者の確認: JWTトークンの\u003ccode\u003eiss\u003c/code\u003eクレームが\u003ccode\u003ehttps://token.actions.githubusercontent.com\u003c/code\u003eであることを確認\u003c/li\u003e\n\u003cli\u003e署名の検証: GitHubの公開鍵でJWTトークンの署名を検証\u003c/li\u003e\n\u003cli\u003e条件の確認: IAMロールの信頼ポリシーで設定した条件（リポジトリ名、ブランチなど）とJWTトークンのクレームが一致するかチェック\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e検証に成功すると、AWSはIAMロールの引き受けを許可し、一時的な認証情報を返します：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eアクセスキーID: 一時的なアクセスキー\u003c/li\u003e\n\u003cli\u003eシークレットアクセスキー: 一時的なシークレットキー\u003c/li\u003e\n\u003cli\u003eセッショントークン: 一時的なセッショントークン\u003c/li\u003e\n\u003cli\u003e有効期限: デフォルトで最大1時間\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"35--一時的な認証情報を使ってecsにデプロイ\"\u003e3.5. ④ 一時的な認証情報を使ってECSにデプロイ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#35--一時的な認証情報を使ってecsにデプロイ\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eGitHub Actionsは、取得した一時的な認証情報を使ってAWS操作を実行します。この認証情報には、事前にIAMロールに付与したポリシーの権限のみが含まれているため、最小権限の原則に従った安全な操作が可能です。\u003c/p\u003e\n\u003cp\u003e具体的には以下のような操作を実行できます：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eECRへのPUSH**: コンテナイメージをECRリポジトリにアップロード\u003c/li\u003e\n\u003cli\u003eタスク定義の更新: 新しいイメージを使用するタスク定義を登録\u003c/li\u003e\n\u003cli\u003eECSサービスの更新: \u003ccode\u003eupdate-service --force-new-deployment\u003c/code\u003eでサービスを再起動\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eこの一連の流れにより、長期的なアクセスキーを管理することなく、安全にAWSリソースを操作できます。\u003c/p\u003e\n\u003ch2 id=\"4-具体的な設定例\"\u003e4. 具体的な設定例\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-具体的な設定例\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"41-iamロールの準備aws側\"\u003e4.1. IAMロールの準備（AWS側）\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#41-iamロールの準備aws側\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eまず、GitHubからのOIDC接続を許可するIAMロールを作成します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-hcl\" data-lang=\"hcl\"\u003e\u003cspan style=\"color:#776e71\"\u003e# Terraform例\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_openid_connect_provider\u0026#34; \u0026#34;github\u0026#34;\u003c/span\u003e {\n  url \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;https://token.actions.githubusercontent.com\u0026#34;\u003c/span\u003e\n  client_id_list \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;sts.amazonaws.com\u0026#34;\u003c/span\u003e]\n  thumbprint_list \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u0026lt;thumbprint\u0026gt;\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#776e71\"\u003e # \n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e}\n\n\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_role\u0026#34; \u0026#34;github_actions_role\u0026#34;\u003c/span\u003e {\n  name \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;GitHubActionsRole\u0026#34;\u003c/span\u003e\n  assume_role_policy \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003ejsonencode\u003c/span\u003e({\n    Version \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;2012-10-17\u0026#34;\u003c/span\u003e\n    Statement \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e [\n      {\n        Effect \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Allow\u0026#34;\u003c/span\u003e\n        Principal \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e {\n          Federated \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;arn:aws:iam::\u0026lt;account-id\u0026gt;:oidc-provider/token.actions.githubusercontent.com\u0026#34;\u003c/span\u003e\n        }\n        Action \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;sts:AssumeRoleWithWebIdentity\u0026#34;\u003c/span\u003e\n        Condition \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e {\n          StringLike \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e {\n            \u0026#34;token.actions.githubusercontent.com:sub\u0026#34; \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;repo:\u0026lt;your-org\u0026gt;/\u0026lt;your-repo\u0026gt;:*\u0026#34;\u003c/span\u003e\n          }\n        }\n      }\n    ]\n  })\n}\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e# 必要なポリシーをアタッチ（例：ECS, ECR, CloudWatch Logsなど）\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e####　thumbprintとは\u003c/p\u003e\n\u003cp\u003ethumbprintは、OIDCプロバイダー（GitHub）のSSL証明書の指紋（フィンガープリント）です。AWSがGitHubからのリクエストを信頼するために使用されます。\u003c/p\u003e\n\u003cp\u003eGitHub ActionsのOIDCプロバイダー用のthumbprintは以下の値です。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e6938fd4d98bab03faadb97b34396831e3780aea1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1c58a3a8518e8759bf075b76b750d4f2df264fcd\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ethumbprintは以下のコマンドで取得できます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eecho | openssl s_client -servername token.actions.githubusercontent.com -connect token.actions.githubusercontent.com:443 2\u0026gt;/dev/null | openssl x509 -fingerprint -noout -sha1 | sed \u003cspan style=\"color:#48b685\"\u003e\u0026#39;s/://g\u0026#39;\u003c/span\u003e | sed \u003cspan style=\"color:#48b685\"\u003e\u0026#39;s/.*=//g\u0026#39;\u003c/span\u003e | tr \u003cspan style=\"color:#48b685\"\u003e\u0026#39;[:upper:]\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;[:lower:]\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"42-github-actionsの定義\"\u003e4.2. GitHub Actionsの定義\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#42-github-actionsの定義\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eDeploy to ECS\u003c/span\u003e\n\n\u003cspan style=\"color:#5bc4bf\"\u003eon\u003c/span\u003e:\n  \u003cspan style=\"color:#5bc4bf\"\u003epush\u003c/span\u003e:\n    \u003cspan style=\"color:#5bc4bf\"\u003ebranches\u003c/span\u003e: [\u003cspan style=\"color:#f99b15\"\u003emain]\u003c/span\u003e\n\n\u003cspan style=\"color:#5bc4bf\"\u003epermissions\u003c/span\u003e:\n  \u003cspan style=\"color:#5bc4bf\"\u003eid-token\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003ewrite \u003c/span\u003e \u003cspan style=\"color:#776e71\"\u003e# JWTトークンの取得に必要\u003c/span\u003e\n  \u003cspan style=\"color:#5bc4bf\"\u003econtents\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eread\u003c/span\u003e\n\n\u003cspan style=\"color:#5bc4bf\"\u003ejobs\u003c/span\u003e:\n  \u003cspan style=\"color:#5bc4bf\"\u003edeploy\u003c/span\u003e:\n    \u003cspan style=\"color:#5bc4bf\"\u003eruns-on\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eubuntu-latest\u003c/span\u003e\n\n    \u003cspan style=\"color:#5bc4bf\"\u003esteps\u003c/span\u003e:\n      - \u003cspan style=\"color:#5bc4bf\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eCheckout source\u003c/span\u003e\n        \u003cspan style=\"color:#5bc4bf\"\u003euses\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eactions/checkout@v4\u003c/span\u003e\n\n      - \u003cspan style=\"color:#5bc4bf\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eConfigure AWS Credentials via OIDC\u003c/span\u003e\n        \u003cspan style=\"color:#5bc4bf\"\u003euses\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eaws-actions/configure-aws-credentials@v4\u003c/span\u003e\n        \u003cspan style=\"color:#5bc4bf\"\u003ewith\u003c/span\u003e:\n          \u003cspan style=\"color:#5bc4bf\"\u003erole-to-assume\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003earn:aws:iam::\u0026lt;account-id\u0026gt;:role/GitHubActionsRole\u003c/span\u003e\n          \u003cspan style=\"color:#5bc4bf\"\u003eaws-region\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eap-northeast-1\u003c/span\u003e\n\n      - \u003cspan style=\"color:#5bc4bf\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eBuild and Push to ECR\u003c/span\u003e\n        \u003cspan style=\"color:#5bc4bf\"\u003erun\u003c/span\u003e: |\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e          docker build -t myapp .\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e          docker tag myapp:latest \u0026lt;account-id\u0026gt;.dkr.ecr.ap-northeast-1.amazonaws.com/myapp:latest\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e          aws ecr get-login-password | docker login --username AWS --password-stdin \u0026lt;account-id\u0026gt;.dkr.ecr.ap-northeast-1.amazonaws.com\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e          docker push \u0026lt;account-id\u0026gt;.dkr.ecr.ap-northeast-1.amazonaws.com/myapp:latest\u003c/span\u003e          \n\n      - \u003cspan style=\"color:#5bc4bf\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eDeploy to ECS\u003c/span\u003e\n        \u003cspan style=\"color:#5bc4bf\"\u003erun\u003c/span\u003e: |\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e          aws ecs update-service \\\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e            --cluster my-cluster \\\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e            --service my-service \\\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e            --force-new-deployment\u003c/span\u003e          \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"5-注意点\"\u003e5. 注意点\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#5-注意点\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e個人的にハマったことを\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOIDCを使う場合、\u003ccode\u003epermissions.id-token: write\u003c/code\u003e が必須です（JWTトークンの取得権限）\u003c/li\u003e\n\u003cli\u003eIAMロールの信頼ポリシーは、リポジトリ単位で最小にする\u003c/li\u003e\n\u003cli\u003eECRへのPUSH、ECSのタスク定義の更新やCloudWatchの権限もIAMロールに付与。この権限周りが悩むところだと思います。動かないから調べてPolicy追加→実機で試すというループを何度したことか。。。\u003c/li\u003e\n\u003c/ul\u003e\n\n\n        \u003c/body\u003e\u003c/html\u003e","plain_text":"1. はじめに# AWSにECS環境を構築します。GitHubActionsで以下を実施します。 コンテナイメージのビルド コンテナイメージをECRにPUSH ECSをデプロイするために、タスク定義のリビジョンアップデート ECSにタスクをデプロイ これまではシークレットキーやシークレットアクセスキーをSECRETSに書いていました。 このやり方だと、権限が広すぎますし、有効期限を管理が面倒だし、今っぽくないと考えていました。 調べると、OIDC（OpenID Connect）使えば、一時的な認証情報だけで安全にAWSへアクセスできることがわかりました。 この記事では、GitHub ActionsからOIDCを使ってECSタスクをデプロイする方法を解説します。 2. なぜOIDCを使うのか？# GitHub ActionsとAWSを連携する方法として、以下の2つがよく使われます。改めて表にしてみます。 方法 セキュリティ 運用負荷 アクセスキーをSECRETSに登録 中（漏洩リスクあり） 高（ローテーション管理） OIDCで一時クレデンシャル取得 高（キー不要） 低（管理自動化） アクセスキーやシークレットアクセスキーを使うっていうのが、もう面倒なわけですよ。誰のものを使用するかとか考えたり、ローテーションはどうするかって考えたり、実際運用するのが手間なわけです。 で、この記事でフォーカスしているOIDCを使えば、アクセスキーの管理が不要になります。GitHubが発行するJWTトークンを使ってAWSにアクセスする仕組みで、最小権限の原則にも則った安全な構成が可能になるのです。 3. 仕組み# GitHub ActionsからOIDCを使ってAWSにアクセスする仕組みを図で表すと以下のようになります。 3.1. 用語の整理# まず、混同しやすい用語を整理します： OIDC（OpenID Connect）: 認証プロトコルの名前 JWTトークン（JSON Web Token）: OIDCで使用される具体的なトークン形式 IDトークン: JWTトークンの一種で、ユーザーやサービスの身元情報を含む この記事では、GitHub ActionsがOIDCプロトコルを使用してJWTトークンを取得し、AWSに送信する流れを解説します。 上図の流れに沿って、4つのステップで詳しく説明します。 3.2. ① GitHub ActionsでJWTトークンを取得# GitHub Actionsワークフローが実行されると、GitHub内蔵のOIDCプロバイダーからJWTトークン（JSON Web Token）を取得します。 3.3. ② AWSにJWTトークンを送信してロール引き受けを要求# 取得したJWTトークンを使って、AWS STSのAssumeRoleWithWebIdentity APIを呼び出します。この時、事前に設定したIAMロールの引き受けを要求します。 # 内部的に実行されるAPI呼び出し（イメージ） aws sts assume-role-with-web-identity \\ --role-arn arn:aws:iam::123456789012:role/GitHubActionsRole \\ --role-session-name github-actions-session \\ --web-identity-token \u003cJWT-Token\u003e 3.4. ③ AWSがJWTトークンを検証してIAMロールを引き受け許可# AWSは受け取ったJWTトークンを以下の手順で検証します。 発行者の確認: JWTトークンのissクレームがhttps://token.actions.githubusercontent.comであることを確認 署名の検証: GitHubの公開鍵でJWTトークンの署名を検証 条件の確認: IAMロールの信頼ポリシーで設定した条件（リポジトリ名、ブランチなど）とJWTトークンのクレームが一致するかチェック 検証に成功すると、AWSはIAMロールの引き受けを許可し、一時的な認証情報を返します： アクセスキーID: 一時的なアクセスキー シークレットアクセスキー: 一時的なシークレットキー セッショントークン: 一時的なセッショントークン 有効期限: デフォルトで最大1時間 3.5. ④ 一時的な認証情報を使ってECSにデプロイ# GitHub Actionsは、取得した一時的な認証情報を使ってAWS操作を実行します。この認証情報には、事前にIAMロールに付与したポリシーの権限のみが含まれているため、最小権限の原則に従った安全な操作が可能です。 具体的には以下のような操作を実行できます： ECRへのPUSH**: コンテナイメージをECRリポジトリにアップロード タスク定義の更新: 新しいイメージを使用するタスク定義を登録 ECSサービスの更新: update-service --force-new-deploymentでサービスを再起動 この一連の流れにより、長期的なアクセスキーを管理することなく、安全にAWSリソースを操作できます。 4. 具体的な設定例# 4.1. IAMロールの準備（AWS側）# まず、GitHubからのOIDC接続を許可するIAMロールを作成します。 # Terraform例 resource \"aws_iam_openid_connect_provider\" \"github\" { url = \"https://token.actions.githubusercontent.com\" client_id_list = [\"sts.amazonaws.com\"] thumbprint_list = [\"\u003cthumbprint\u003e\"] # } resource \"aws_iam_role\" \"github_actions_role\" { name = \"GitHubActionsRole\" assume_role_policy = jsonencode({ Version = \"2012-10-17\" Statement = [ { Effect = \"Allow\" Principal = { Federated = \"arn:aws:iam::\u003caccount-id\u003e:oidc-provider/token.actions.githubusercontent.com\" } Action = \"sts:AssumeRoleWithWebIdentity\" Condition = { StringLike = { \"token.actions.githubusercontent.com:sub\" = \"repo:\u003cyour-org\u003e/\u003cyour-repo\u003e:*\" } } } ] }) } # 必要なポリシーをアタッチ（例：ECS, ECR, CloudWatch Logsなど） ####　thumbprintとは thumbprintは、OIDCプロバイダー（GitHub）のSSL証明書の指紋（フィンガープリント）です。AWSがGitHubからのリクエストを信頼するために使用されます。 GitHub ActionsのOIDCプロバイダー用のthumbprintは以下の値です。 6938fd4d98bab03faadb97b34396831e3780aea1 1c58a3a8518e8759bf075b76b750d4f2df264fcd thumbprintは以下のコマンドで取得できます。 echo | openssl s_client -servername token.actions.githubusercontent.com -connect token.actions.githubusercontent.com:443 2\u003e/dev/null | openssl x509 -fingerprint -noout -sha1 | sed 's/://g' | sed 's/.*=//g' | tr '[:upper:]' '[:lower:]' 4.2. GitHub Actionsの定義# name: Deploy to ECS on: push: branches: [main] permissions: id-token: write # JWTトークンの取得に必要 contents: read jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout source uses: actions/checkout@v4 - name: Configure AWS Credentials via OIDC uses: aws-actions/configure-aws-credentials@v4 with: role-to-assume: arn:aws:iam::\u003caccount-id\u003e:role/GitHubActionsRole aws-region: ap-northeast-1 - name: Build and Push to ECR run: | docker build -t myapp . docker tag myapp:latest \u003caccount-id\u003e.dkr.ecr.ap-northeast-1.amazonaws.com/myapp:latest aws ecr get-login-password | docker login --username AWS --password-stdin \u003caccount-id\u003e.dkr.ecr.ap-northeast-1.amazonaws.com docker push \u003caccount-id\u003e.dkr.ecr.ap-northeast-1.amazonaws.com/myapp:latest - name: Deploy to ECS run: | aws ecs update-service \\ --cluster my-cluster \\ --service my-service \\ --force-new-deployment 5. 注意点# 個人的にハマったことを OIDCを使う場合、permissions.id-token: write が必須です（JWTトークンの取得権限） IAMロールの信頼ポリシーは、リポジトリ単位で最小にする ECRへのPUSH、ECSのタスク定義の更新やCloudWatchの権限もIAMロールに付与。この権限周りが悩むところだと思います。動かないから調べてPolicy追加→実機で試すというループを何度したことか。。。","scraped_at":"2025-07-12T20:26:25.694248624+09:00","word_count":313,"content_hash":"4964e1680599db063bf6587b90a25545"}
{"url":"https://yamada-tech-memo.netlify.app/posts/lambda_switchbot_new_relic/","title":"SwitchBotの温度と湿度をLambdaで「New Relic」に送る","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下をデータをNew Relicに送信するのに、Lambdaで実装しました。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSwitchBotで取得した温度と湿度\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e##　処理の流れ\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSwitchBot Cloud API から15分ごとに温度・湿度を取得\u003c/li\u003e\n\u003cli\u003eAWS Lambdaが取得値をMetric API形式に変換しNew RelicへPOST\u003c/li\u003e\n\u003cli\u003eNew Relic 側では NRQL/チャート/アラートで活用\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./01.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"グラフ\"\u003eグラフ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#グラフ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようにグラフ化されます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-5.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"工夫点\"\u003e工夫点\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#工夫点\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSAMを使用してまとめてデプロイするようにしています。\u003c/p\u003e\n\u003cp\u003eまた、以下のtemplate.yamlのようにTOKENなどの秘密度の高い情報はパラメータストアのセキュアパラメータとして取得するようにしています。（KMSでの暗号化は面倒に感じてしまい、してないです。）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003eResources\u003c/span\u003e:\n  \u003cspan style=\"color:#5bc4bf\"\u003eSwitchBotToNewRelicFunction\u003c/span\u003e:\n    \u003cspan style=\"color:#5bc4bf\"\u003eType\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eAWS::Serverless::Function\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003eProperties\u003c/span\u003e:\n      \u003cspan style=\"color:#5bc4bf\"\u003ePackageType\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eImage\u003c/span\u003e\n      \u003cspan style=\"color:#5bc4bf\"\u003eArchitectures\u003c/span\u003e:\n        - \u003cspan style=\"color:#f99b15\"\u003ex86_64\u003c/span\u003e\n      \u003cspan style=\"color:#5bc4bf\"\u003ePolicies\u003c/span\u003e:\n        - \u003cspan style=\"color:#5bc4bf\"\u003eVersion\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#39;2012-10-17\u0026#39;\u003c/span\u003e\n          \u003cspan style=\"color:#5bc4bf\"\u003eStatement\u003c/span\u003e:\n            - \u003cspan style=\"color:#5bc4bf\"\u003eEffect\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eAllow\u003c/span\u003e\n              \u003cspan style=\"color:#5bc4bf\"\u003eAction\u003c/span\u003e:\n                - \u003cspan style=\"color:#f99b15\"\u003essm:GetParameter\u003c/span\u003e\n                - \u003cspan style=\"color:#f99b15\"\u003essm:GetParameters\u003c/span\u003e\n              \u003cspan style=\"color:#5bc4bf\"\u003eResource\u003c/span\u003e:\n                - !\u003cspan style=\"color:#f99b15\"\u003eSub \u0026#34;arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SwitchBotTokenParameterName}\u0026#34;\u003c/span\u003e\n                - !\u003cspan style=\"color:#f99b15\"\u003eSub \u0026#34;arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${NewRelicLicenseKeyParameterName}\u0026#34;\u003c/span\u003e\n            - \u003cspan style=\"color:#5bc4bf\"\u003eEffect\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eAllow\u003c/span\u003e\n              \u003cspan style=\"color:#5bc4bf\"\u003eAction\u003c/span\u003e:\n                - \u003cspan style=\"color:#f99b15\"\u003ekms:Decrypt\u003c/span\u003e\n              \u003cspan style=\"color:#5bc4bf\"\u003eResource\u003c/span\u003e:\n                - !\u003cspan style=\"color:#f99b15\"\u003eSub \u0026#34;arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*\u0026#34;\u003c/span\u003e\n              \u003cspan style=\"color:#5bc4bf\"\u003eCondition\u003c/span\u003e:\n                \u003cspan style=\"color:#5bc4bf\"\u003eStringEquals\u003c/span\u003e:\n                  \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#39;kms:ViaService\u0026#39;\u003c/span\u003e: !\u003cspan style=\"color:#f99b15\"\u003eSub \u0026#39;ssm.${AWS::Region}.amazonaws.com\u0026#39;\u003c/span\u003e\n      \u003cspan style=\"color:#5bc4bf\"\u003eEvents\u003c/span\u003e:\n        \u003cspan style=\"color:#5bc4bf\"\u003eScheduledEvent\u003c/span\u003e:\n          \u003cspan style=\"color:#5bc4bf\"\u003eType\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eSchedule\u003c/span\u003e\n          \u003cspan style=\"color:#5bc4bf\"\u003eProperties\u003c/span\u003e:\n            \u003cspan style=\"color:#5bc4bf\"\u003eSchedule\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003erate(15 minutes)\u003c/span\u003e\n            \u003cspan style=\"color:#5bc4bf\"\u003eName\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eswitchbot-sensor-fetch-schedule\u003c/span\u003e\n            \u003cspan style=\"color:#5bc4bf\"\u003eDescription\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Triggers the function to fetch SwitchBot sensor data every 15 minutes.\u0026#34;\u003c/span\u003e\n            \u003cspan style=\"color:#5bc4bf\"\u003eEnabled\u003c/span\u003e: \u003cspan style=\"color:#815ba4\"\u003eTrue\u003c/span\u003e\n      \u003cspan style=\"color:#5bc4bf\"\u003eEnvironment\u003c/span\u003e:\n        \u003cspan style=\"color:#5bc4bf\"\u003eVariables\u003c/span\u003e:\n          \u003cspan style=\"color:#776e71\"\u003e# セキュアパラメータは実行時にSSMから取得するため、パラメータ名のみを環境変数として設定\u003c/span\u003e\n          \u003cspan style=\"color:#5bc4bf\"\u003eSWITCHBOT_TOKEN_PARAMETER\u003c/span\u003e: !\u003cspan style=\"color:#f99b15\"\u003eRef SwitchBotTokenParameterName\u003c/span\u003e\n          \u003cspan style=\"color:#5bc4bf\"\u003eNEW_RELIC_LICENSE_KEY_PARAMETER\u003c/span\u003e: !\u003cspan style=\"color:#f99b15\"\u003eRef NewRelicLicenseKeyParameterName\u003c/span\u003e\n          \u003cspan style=\"color:#776e71\"\u003e# 通常のパラメータは直接取得可能\u003c/span\u003e\n          \u003cspan style=\"color:#5bc4bf\"\u003eSWITCHBOT_DEVICE_ID\u003c/span\u003e: !\u003cspan style=\"color:#f99b15\"\u003eSub \u0026#39;{{resolve:ssm:${SwitchBotDeviceIdParameterName}}}\u0026#39;\u003c/span\u003e\n          \u003cspan style=\"color:#5bc4bf\"\u003eNEW_RELIC_APP_NAME\u003c/span\u003e: !\u003cspan style=\"color:#f99b15\"\u003eSub \u0026#39;{{resolve:ssm:${NewRelicAppNameParameterName}}}\u0026#39;\u003c/span\u003e\n          \u003cspan style=\"color:#5bc4bf\"\u003eNEW_RELIC_ACCOUNT_ID\u003c/span\u003e: !\u003cspan style=\"color:#f99b15\"\u003eSub \u0026#39;{{resolve:ssm:${NewRelicAccountIdParameterName}}}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 以下をデータをNew Relicに送信するのに、Lambdaで実装しました。 SwitchBotで取得した温度と湿度 ##　処理の流れ SwitchBot Cloud API から15分ごとに温度・湿度を取得 AWS Lambdaが取得値をMetric API形式に変換しNew RelicへPOST New Relic 側では NRQL/チャート/アラートで活用 グラフ# 以下のようにグラフ化されます。 工夫点# SAMを使用してまとめてデプロイするようにしています。 また、以下のtemplate.yamlのようにTOKENなどの秘密度の高い情報はパラメータストアのセキュアパラメータとして取得するようにしています。（KMSでの暗号化は面倒に感じてしまい、してないです。） Resources: SwitchBotToNewRelicFunction: Type: AWS::Serverless::Function Properties: PackageType: Image Architectures: - x86_64 Policies: - Version: '2012-10-17' Statement: - Effect: Allow Action: - ssm:GetParameter - ssm:GetParameters Resource: - !Sub \"arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SwitchBotTokenParameterName}\" - !Sub \"arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${NewRelicLicenseKeyParameterName}\" - Effect: Allow Action: - kms:Decrypt Resource: - !Sub \"arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*\" Condition: StringEquals: 'kms:ViaService': !Sub 'ssm.${AWS::Region}.amazonaws.com' Events: ScheduledEvent: Type: Schedule Properties: Schedule: rate(15 minutes) Name: switchbot-sensor-fetch-schedule Description: \"Triggers the function to fetch SwitchBot sensor data every 15 minutes.\" Enabled: True Environment: Variables: # セキュアパラメータは実行時にSSMから取得するため、パラメータ名のみを環境変数として設定 SWITCHBOT_TOKEN_PARAMETER: !Ref SwitchBotTokenParameterName NEW_RELIC_LICENSE_KEY_PARAMETER: !Ref NewRelicLicenseKeyParameterName # 通常のパラメータは直接取得可能 SWITCHBOT_DEVICE_ID: !Sub '{{resolve:ssm:${SwitchBotDeviceIdParameterName}}}' NEW_RELIC_APP_NAME: !Sub '{{resolve:ssm:${NewRelicAppNameParameterName}}}' NEW_RELIC_ACCOUNT_ID: !Sub '{{resolve:ssm:${NewRelicAccountIdParameterName}}}'","scraped_at":"2025-07-12T20:26:25.936988577+09:00","word_count":113,"content_hash":"a151aa243124da80a7ac04c7b4029950"}
{"url":"https://yamada-tech-memo.netlify.app/posts/20250702_new_relic/","title":"自前の「Grafana＋Prometheus」から「New Relic」に変更した","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e可観測性を高めようと、自宅サーバをPrometheus＋Grafanaで構成して以下のような状態を管理していました。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eサーバのCPU,メモリ\u003c/li\u003e\n\u003cli\u003eコンテナの使用状況\u003c/li\u003e\n\u003cli\u003eビデオカードの使用状況\u003c/li\u003e\n\u003cli\u003eSwitchBotで取得した温度と湿度\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e自前のサーバで動かしていたのですが、サーバを再起動するとPrometheusやGrafanaの起動確認したり、SwitchBotのエクスポーターの起動確認が必要で手間に感じていました。\u003c/p\u003e\n\u003cp\u003eそこで、監視システムをより運用しやすいSaaS型のソリューションに移行することを決めました。そのためのツールとして、サーバーレスアーキテクチャとNew Relicを選択し、監視しやすい環境構築を図ることにしました。\u003c/p\u003e\n\u003ch2 id=\"2-この記事で書くこと\"\u003e2. この記事で書くこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-この記事で書くこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下を「Grafana＋Prometheus」から「New Relic」にしての所感を書いてます。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eサーバのCPU,メモリ\u003c/li\u003e\n\u003cli\u003eコンテナの使用状況\u003c/li\u003e\n\u003cli\u003eビデオカードの使用状況\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-new-relicとは\"\u003e3. New Relicとは？\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-new-relicとは\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNew Relic は、クラウド上で提供される SaaS 型のフルスタック・オブザーバビリティ（可観測性）プラットフォーム です。\nAPM（アプリケーション性能監視）に始まり、インフラ監視、ログ、分散トレーシング、リアルユーザーモニタリング（RUM）、ブラウザ／モバイル計測、合成監視までワンストップで扱えるのが特徴です。すべてのデータは時系列データベース NRDB に集約され、共通のクエリ言語 NRQL やダッシュボード機能で横串分析できます。\u003c/p\u003e\n\u003cp\u003e同様のサービスとしては、DataDogやMackrelが思いつきます。\u003c/p\u003e\n\u003cp\u003eNew Relicは無料で使える枠が大きいので、New Relicを採用しました。\u003c/p\u003e\n\u003ch2 id=\"4-サーバからnew-relicにデータを送るには\"\u003e4. サーバからNew Relicにデータを送るには\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-サーバからnew-relicにデータを送るには\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eサーバからNew Relicにデータを送るには、Agentをインストールします。\u003c/p\u003e\n\u003cp\u003eインストールは「Integrations \u0026amp; Agents」からAPIキーを発行して、出力されるコマンドをコピペすればOKです。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-1.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-2.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-3.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eそうすると、以下のようなグラフが表示されます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eビデオカードも同様です。このような感じで表示されます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-4.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# 可観測性を高めようと、自宅サーバをPrometheus＋Grafanaで構成して以下のような状態を管理していました。 サーバのCPU,メモリ コンテナの使用状況 ビデオカードの使用状況 SwitchBotで取得した温度と湿度 自前のサーバで動かしていたのですが、サーバを再起動するとPrometheusやGrafanaの起動確認したり、SwitchBotのエクスポーターの起動確認が必要で手間に感じていました。 そこで、監視システムをより運用しやすいSaaS型のソリューションに移行することを決めました。そのためのツールとして、サーバーレスアーキテクチャとNew Relicを選択し、監視しやすい環境構築を図ることにしました。 2. この記事で書くこと# 以下を「Grafana＋Prometheus」から「New Relic」にしての所感を書いてます。 サーバのCPU,メモリ コンテナの使用状況 ビデオカードの使用状況 3. New Relicとは？# New Relic は、クラウド上で提供される SaaS 型のフルスタック・オブザーバビリティ（可観測性）プラットフォーム です。 APM（アプリケーション性能監視）に始まり、インフラ監視、ログ、分散トレーシング、リアルユーザーモニタリング（RUM）、ブラウザ／モバイル計測、合成監視までワンストップで扱えるのが特徴です。すべてのデータは時系列データベース NRDB に集約され、共通のクエリ言語 NRQL やダッシュボード機能で横串分析できます。 同様のサービスとしては、DataDogやMackrelが思いつきます。 New Relicは無料で使える枠が大きいので、New Relicを採用しました。 4. サーバからNew Relicにデータを送るには# サーバからNew Relicにデータを送るには、Agentをインストールします。 インストールは「Integrations \u0026 Agents」からAPIキーを発行して、出力されるコマンドをコピペすればOKです。 そうすると、以下のようなグラフが表示されます。 ビデオカードも同様です。このような感じで表示されます。","scraped_at":"2025-07-12T20:26:28.010812767+09:00","word_count":45,"content_hash":"123b9ce1b9e670c50274f20212a4623d"}
{"url":"https://yamada-tech-memo.netlify.app/posts/yt-dlp-download-dj-mix/","title":"yt-dlpでmixcloudのDJ MIXをダウンロードする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003cp\u003emixcloudにあるルイ・ベガのミックスを聴いてます。外出先で聴くとギガを消費してしまうので、ダウンロードしたいと考えました。\u003c/p\u003e\n\u003cp\u003e検索で出てくるようなwebサービスだとうまくダウンロードできないので、対応できるツールを探しました。そしたら\u003ca href=\"https://github.com/yt-dlp/yt-dlp\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eyt-dlp\u003c/a\u003eというツールがありました。\u003c/p\u003e\n\u003cp\u003e便利だったので、記録します。\u003c/p\u003e\n\u003ch2 id=\"yt-dlp-について詳しく\"\u003eyt-dlp について詳しく\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#yt-dlp-について詳しく\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eyt-dlpは、YouTubeやMixcloud、ニコニコ動画、SoundCloud、Vimeo、Bilibili、Twitter（X）など、数百種類以上の動画・音声配信サイトから動画や音声をダウンロードできる強力なオープンソースツールです。yt-dlpは、もともと有名なyoutube-dlのフォーク（派生プロジェクト）であり、より活発な開発と最新サイトへの対応、追加機能の充実が特徴です。\u003c/p\u003e\n\u003ch3 id=\"主な特徴\"\u003e主な特徴\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#主な特徴\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e主な特徴は以下です。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e多様なサイト対応: YouTubeだけでなく、MixcloudやTwitch、ニコニコ動画、Bilibili、SoundCloudなど、世界中の主要な配信サービスに対応しています。\u003c/li\u003e\n\u003cli\u003e高機能なオプション: 動画・音声のフォーマット選択、画質・音質の指定、プレイリストやチャンネル全体の一括ダウンロード、字幕やメタデータの取得、サムネイル画像の保存など、多彩なオプションが用意されています。\u003c/li\u003e\n\u003cli\u003effmpegとの連携: HLS（m3u8）やDASH（mpd）などのストリーミング形式にも対応し、ffmpegと連携して自動的にセグメントの結合や音声抽出、フォーマット変換を行います。\u003c/li\u003e\n\u003cli\u003e認証・Cookie対応: ログインが必要なコンテンツも、Cookieファイルやユーザー名・パスワードを指定することでダウンロード可能です。\u003c/li\u003e\n\u003cli\u003e高速な更新: サイト側の仕様変更にも迅速に対応しており、youtube-dlよりも頻繁にアップデートされています。\u003c/li\u003e\n\u003cli\u003eスクリプトや自動化との親和性: コマンドラインツールなので、シェルスクリプトやバッチ処理、Dockerなどの自動化環境でも簡単に利用できます。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"dockerでの私的使い方\"\u003eDockerでの私的使い方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#dockerでの私的使い方\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003epython製なので、python環境を作るのは骨が折れます。そこで、私は以下のDockerfileを書いて、使用しています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan style=\"color:#815ba4\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e python:3.11-slim\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e# 必要なパッケージのインストール\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eRUN\u003c/span\u003e apt-get update \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e    apt-get install -y --no-install-recommends \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e        ffmpeg \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e        ca-certificates \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e        wget \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e rm -rf /var/lib/apt/lists/*\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e# yt-dlpのインストール\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eRUN\u003c/span\u003e pip install --no-cache-dir --upgrade pip yt-dlp\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e# デフォルトの作業ディレクトリ\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eWORKDIR\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e /work\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e# デフォルトコマンド\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eENTRYPOINT\u003c/span\u003e [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;yt-dlp\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のようなコマンドを使用します。mixcloudは若干時間がかかります。60分mixに30分ぐらいかかる印象。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker run --rm -v \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e$PWD\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e:/work yt-dlp \u0026lt;ダウンロードしたいURL\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"代表的な使い方\"\u003e代表的な使い方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#代表的な使い方\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eコマンドそのものは以下のように使用します。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e単一動画のダウンロード\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003eyt-dlp https://www.youtube.com/watch?v\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003eXXXX\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eプレイリスト全体のダウンロード\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003eyt-dlp https://www.youtube.com/playlist?list\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003eXXXX\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e音声のみ抽出（mp3変換）\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003eyt-dlp -x --audio-format mp3 https://www.mixcloud.com/xxxx/xxxx/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eファイル名テンプレートの指定\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003eyt-dlp -o \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%(title)s.%(ext)s\u0026#39;\u003c/span\u003e https://www.youtube.com/watch?v\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003eXXXX\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e字幕やメタデータの同時取得\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003eyt-dlp --write-subs --write-info-json https://www.youtube.com/watch?v\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003eXXXX\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"よく使う主なオプション\"\u003eよく使う主なオプション\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#よく使う主なオプション\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-f\u003c/code\u003e : ダウンロードするフォーマット（画質・音質）を指定\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-o\u003c/code\u003e : 出力ファイル名テンプレートを指定\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-x\u003c/code\u003e : 音声のみ抽出\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--audio-format\u003c/code\u003e : 音声フォーマット（mp3, m4a, wav等）を指定\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--write-subs\u003c/code\u003e : 字幕をダウンロード\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--write-thumbnail\u003c/code\u003e : サムネイル画像を保存\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--write-info-json\u003c/code\u003e : メタデータをJSONで保存\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--playlist-items\u003c/code\u003e : プレイリストの一部だけをダウンロード\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--cookies\u003c/code\u003e : Cookieファイルを指定して認証が必要な動画も取得\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"注意事項\"\u003e注意事項\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#注意事項\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eyt-dlpは配信サイトの利用規約を尊重し、個人利用の範囲でご利用ください。\u003c/li\u003e\n\u003cli\u003e法的な問題や著作権には十分ご注意ください。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"公式情報\"\u003e公式情報\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#公式情報\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eGitHub: \u003ca href=\"https://github.com/yt-dlp/yt-dlp\"\u003ehttps://github.com/yt-dlp/yt-dlp\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eドキュメント: \u003ca href=\"https://github.com/yt-dlp/yt-dlp#readme\"\u003ehttps://github.com/yt-dlp/yt-dlp#readme\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eyt-dlpは非常に柔軟で強力なツールです。\u003c/p\u003e\n\u003cp\u003e詳細な使い方や最新情報は公式リポジトリやドキュメントをご参照ください。\u003c/p\u003e\n\n\n        \u003c/body\u003e\u003c/html\u003e","plain_text":"mixcloudにあるルイ・ベガのミックスを聴いてます。外出先で聴くとギガを消費してしまうので、ダウンロードしたいと考えました。 検索で出てくるようなwebサービスだとうまくダウンロードできないので、対応できるツールを探しました。そしたらyt-dlpというツールがありました。 便利だったので、記録します。 yt-dlp について詳しく# yt-dlpは、YouTubeやMixcloud、ニコニコ動画、SoundCloud、Vimeo、Bilibili、Twitter（X）など、数百種類以上の動画・音声配信サイトから動画や音声をダウンロードできる強力なオープンソースツールです。yt-dlpは、もともと有名なyoutube-dlのフォーク（派生プロジェクト）であり、より活発な開発と最新サイトへの対応、追加機能の充実が特徴です。 主な特徴# 主な特徴は以下です。 多様なサイト対応: YouTubeだけでなく、MixcloudやTwitch、ニコニコ動画、Bilibili、SoundCloudなど、世界中の主要な配信サービスに対応しています。 高機能なオプション: 動画・音声のフォーマット選択、画質・音質の指定、プレイリストやチャンネル全体の一括ダウンロード、字幕やメタデータの取得、サムネイル画像の保存など、多彩なオプションが用意されています。 ffmpegとの連携: HLS（m3u8）やDASH（mpd）などのストリーミング形式にも対応し、ffmpegと連携して自動的にセグメントの結合や音声抽出、フォーマット変換を行います。 認証・Cookie対応: ログインが必要なコンテンツも、Cookieファイルやユーザー名・パスワードを指定することでダウンロード可能です。 高速な更新: サイト側の仕様変更にも迅速に対応しており、youtube-dlよりも頻繁にアップデートされています。 スクリプトや自動化との親和性: コマンドラインツールなので、シェルスクリプトやバッチ処理、Dockerなどの自動化環境でも簡単に利用できます。 Dockerでの私的使い方# python製なので、python環境を作るのは骨が折れます。そこで、私は以下のDockerfileを書いて、使用しています。 FROM python:3.11-slim # 必要なパッケージのインストール RUN apt-get update \u0026\u0026 \\ apt-get install -y --no-install-recommends \\ ffmpeg \\ ca-certificates \\ wget \\ \u0026\u0026 rm -rf /var/lib/apt/lists/* # yt-dlpのインストール RUN pip install --no-cache-dir --upgrade pip yt-dlp # デフォルトの作業ディレクトリ WORKDIR /work # デフォルトコマンド ENTRYPOINT [\"yt-dlp\"] 以下のようなコマンドを使用します。mixcloudは若干時間がかかります。60分mixに30分ぐらいかかる印象。 docker run --rm -v \"$PWD\":/work yt-dlp \u003cダウンロードしたいURL\u003e 代表的な使い方# コマンドそのものは以下のように使用します。 単一動画のダウンロード yt-dlp https://www.youtube.com/watch?v=XXXX プレイリスト全体のダウンロード yt-dlp https://www.youtube.com/playlist?list=XXXX 音声のみ抽出（mp3変換） yt-dlp -x --audio-format mp3 https://www.mixcloud.com/xxxx/xxxx/ ファイル名テンプレートの指定 yt-dlp -o '%(title)s.%(ext)s' https://www.youtube.com/watch?v=XXXX 字幕やメタデータの同時取得 yt-dlp --write-subs --write-info-json https://www.youtube.com/watch?v=XXXX よく使う主なオプション# -f : ダウンロードするフォーマット（画質・音質）を指定 -o : 出力ファイル名テンプレートを指定 -x : 音声のみ抽出 --audio-format : 音声フォーマット（mp3, m4a, wav等）を指定 --write-subs : 字幕をダウンロード --write-thumbnail : サムネイル画像を保存 --write-info-json : メタデータをJSONで保存 --playlist-items : プレイリストの一部だけをダウンロード --cookies : Cookieファイルを指定して認証が必要な動画も取得 注意事項# yt-dlpは配信サイトの利用規約を尊重し、個人利用の範囲でご利用ください。 法的な問題や著作権には十分ご注意ください。 公式情報# GitHub: https://github.com/yt-dlp/yt-dlp ドキュメント: https://github.com/yt-dlp/yt-dlp#readme yt-dlpは非常に柔軟で強力なツールです。 詳細な使い方や最新情報は公式リポジトリやドキュメントをご参照ください。","scraped_at":"2025-07-12T20:26:30.135717456+09:00","word_count":135,"content_hash":"89db185c077372340f7e8b9520e5d4ab"}
{"url":"https://yamada-tech-memo.netlify.app/posts/open-ai-codex-vibe-coding/","title":"codexが使えるようになったので、vibe codingを試した","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003ch2 id=\"1-はじめに\"\u003e1. はじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e2025年6月に、OpenAIのCoding AgentがChatGPT Plusユーザにも解放されました。\u003c/p\u003e\n\u003cp\u003e従来の Copilot が「ペアプロの相棒」だったのに対し、Coding Agent は「対話型ビルドシステム」に近く、プロジェクトの骨格からテスト、CI/CDの雛形まで一気に生成してくれるのが特徴です。\u003c/p\u003e\n\u003cp\u003e機能を試すつもりが気付けば時間が溶けていました。─勢いで radiko タイムシフト録音アプリ を作り切ったので、その開発ログをまとめます。\u003c/p\u003e\n\u003ch2 id=\"2-作ったアプリ\"\u003e2. 作ったアプリ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-作ったアプリ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eradikoのタイムシフトを録音するアプリを作りました。\u003c/p\u003e\n\u003cp\u003egolangで作り、lambdaで動かすようにしています。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e項目\u003c/th\u003e\n\u003cth\u003e内容\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e目的\u003c/td\u003e\n\u003ctd\u003eradiko の「タイムフリー」番組を指定日時に自動録音し、S3 に保存\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e言語\u003c/td\u003e\n\u003ctd\u003eGo 1.24\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e実行環境\u003c/td\u003e\n\u003ctd\u003eAWS Lambda（x86_64, 512 MB, 15 min）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eトリガ\u003c/td\u003e\n\u003ctd\u003eEventBridge で番組終了十分後に起動\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eストレージ\u003c/td\u003e\n\u003ctd\u003eS3 Standard\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e変換\u003c/td\u003e\n\u003ctd\u003effmpeg を Lambda Layer に同梱→ m4a へ\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"3-ユースケース\"\u003e3. ユースケース\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-ユースケース\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eアトロク2を録音しておき、翌朝にオフライン再生\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e地方局の限定番組をまとめ聴きして、不要分は 30 日後に Lifecycle で削除\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"4-システム構成\"\u003e4. システム構成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-システム構成\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./arc.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e保存コストは 60 分番組で約 55 MiB → Intelligent-Tiering 移行後 30 日保管しても 1 円台/月。Lambda 実行も 40 円/月 程度に収まる見込みです。\u003c/p\u003e\n\u003ch2 id=\"5-開発フローと-coding-agent-の使い分け\"\u003e5. 開発フローと Coding Agent の使い分け\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#5-開発フローと-coding-agent-の使い分け\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eフェーズ\u003c/th\u003e\n\u003cth\u003e使った AI\u003c/th\u003e\n\u003cth\u003eメリット\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e雛形作成 \u003ccode\u003emain.go\u003c/code\u003e, \u003ccode\u003ego.mod\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eCopilot\u003c/td\u003e\n\u003ctd\u003eコード補完が軽快、手癖レベルの自動化に最適\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIaC (SAM)\u003c/td\u003e\n\u003ctd\u003eCodex\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003esam build\u003c/code\u003e 、\u003ccode\u003esam deploy\u003c/code\u003e でビルドとデプロイ\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCI/CD\u003c/td\u003e\n\u003ctd\u003eCodex\u003c/td\u003e\n\u003ctd\u003eGitHub Actions の YAML スニペット生成が高速\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"6-所感\"\u003e6. 所感\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#6-所感\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e良かった点\u003c/th\u003e\n\u003cth\u003e気になった点\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e* \u003cstrong\u003e失敗ケース\u003c/strong\u003eを例外ごとに網羅的に書いてくれる（\u003ccode\u003econtext.Canceled\u003c/code\u003e など）\u003c/td\u003e\n\u003ctd\u003e同じファイルに 1,500 行超の文脈を渡すとやや遅い\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e* \u003ccode\u003ego test -run TestFoo -v\u003c/code\u003e を裏で実行し結果まで返す → リトライ削減\u003c/td\u003e\n\u003ctd\u003e173 KB 以上の diff を貼ると「コンテキスト超過」で落ちる\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e* 質問ベースで \u003cstrong\u003eログ出力・メトリクス\u003c/strong\u003e まで整備\u003c/td\u003e\n\u003ctd\u003e「AWS の無料枠内？」などコスト系質問は若干回答が古いことがある\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"7-得られた知見とベストプラクティス\"\u003e7. 得られた知見とベストプラクティス\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#7-得られた知見とベストプラクティス\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGo Lambda のコールドスタートは net/http をインポートしても 400 ms 程度。録音系では十分許容範囲。\u003c/p\u003e\n\u003cp\u003effmpeg を Upx 圧縮すると 26 MB → 9 MB に。デプロイ容量削減かつダウンロード時間も短縮。\u003c/p\u003e\n\u003cp\u003eradiko API は仕様変更が多いので、playerUrl は毎回フェッチ＋正規表現で動的抽出。\u003c/p\u003e\n\n\n        \u003c/body\u003e\u003c/html\u003e","plain_text":"1. はじめに# 2025年6月に、OpenAIのCoding AgentがChatGPT Plusユーザにも解放されました。 従来の Copilot が「ペアプロの相棒」だったのに対し、Coding Agent は「対話型ビルドシステム」に近く、プロジェクトの骨格からテスト、CI/CDの雛形まで一気に生成してくれるのが特徴です。 機能を試すつもりが気付けば時間が溶けていました。─勢いで radiko タイムシフト録音アプリ を作り切ったので、その開発ログをまとめます。 2. 作ったアプリ# radikoのタイムシフトを録音するアプリを作りました。 golangで作り、lambdaで動かすようにしています。 項目 内容 目的 radiko の「タイムフリー」番組を指定日時に自動録音し、S3 に保存 言語 Go 1.24 実行環境 AWS Lambda（x86_64, 512 MB, 15 min） トリガ EventBridge で番組終了十分後に起動 ストレージ S3 Standard 変換 ffmpeg を Lambda Layer に同梱→ m4a へ 3. ユースケース# アトロク2を録音しておき、翌朝にオフライン再生 地方局の限定番組をまとめ聴きして、不要分は 30 日後に Lifecycle で削除 4. システム構成# 保存コストは 60 分番組で約 55 MiB → Intelligent-Tiering 移行後 30 日保管しても 1 円台/月。Lambda 実行も 40 円/月 程度に収まる見込みです。 5. 開発フローと Coding Agent の使い分け# フェーズ 使った AI メリット 雛形作成 main.go, go.mod Copilot コード補完が軽快、手癖レベルの自動化に最適 IaC (SAM) Codex sam build 、sam deploy でビルドとデプロイ CI/CD Codex GitHub Actions の YAML スニペット生成が高速 6. 所感# 良かった点 気になった点 * 失敗ケースを例外ごとに網羅的に書いてくれる（context.Canceled など） 同じファイルに 1,500 行超の文脈を渡すとやや遅い * go test -run TestFoo -v を裏で実行し結果まで返す → リトライ削減 173 KB 以上の diff を貼ると「コンテキスト超過」で落ちる * 質問ベースで ログ出力・メトリクス まで整備 「AWS の無料枠内？」などコスト系質問は若干回答が古いことがある 7. 得られた知見とベストプラクティス# Go Lambda のコールドスタートは net/http をインポートしても 400 ms 程度。録音系では十分許容範囲。 ffmpeg を Upx 圧縮すると 26 MB → 9 MB に。デプロイ容量削減かつダウンロード時間も短縮。 radiko API は仕様変更が多いので、playerUrl は毎回フェッチ＋正規表現で動的抽出。","scraped_at":"2025-07-12T20:26:30.714435023+09:00","word_count":157,"content_hash":"e1d4f72136a85f2b34ca53cf7eea0056"}
{"url":"https://yamada-tech-memo.netlify.app/posts/lambda-kick0spotify-recently-play-music/","title":"Spotifyの再生履歴取得アプリをlambdaで動かす","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003ch2 id=\"1-はじめに\"\u003e1. はじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSpotifyの再生履歴取得するアプリケーションをローカールのPC起動からAWSのLambda起動に変更しました。\u003c/p\u003e\n\u003cp\u003eローカルだとパソコンを常に電源を入れておく必要があり、起動するとかしないというのを気にするのがとても嫌でした。やはりクラウドで動かしたいなと思って、Lambdaから起動するように変更しました。\u003c/p\u003e\n\u003cp\u003eまた、ローカルで動かしていたときは、PCの再起動やスリープ、ネットワークの切断などで処理が止まってしまうことも多く、安定してデータを取得し続けるのが難しいという課題もありました。クラウドであれば、こうした心配から解放され、24時間365日安定して動作させることができます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"lambda-spotify.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"2-なぜlambdaにしたか\"\u003e2. なぜLambdaにしたか\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-なぜlambdaにしたか\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSpotifyの再生履歴を取得するアプリケーションを開発するにあたり、実行環境としてAWS Lambdaを選択しました。主な理由は以下の通りです。\u003c/p\u003e\n\u003ch3 id=\"21-低コスト\"\u003e2.1. 低コスト\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-低コスト\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eLambdaはリクエストごとに課金されるため、常時稼働させる必要がないバッチ処理やAPIには最適です。今回のアプリは定期的にSpotifyのAPIを叩くだけなので、サーバーを常時起動しておく必要がなく、無料枠の範囲で十分運用できます。\u003c/p\u003e\n\u003cp\u003eなお、Lambdaの無料枠は以下です。SpotifyのAPIをたたくぐらいなら、問題ないです。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eリクエスト数：月間 1,000,000 件まで無料\u003c/li\u003e\n\u003cli\u003eコンピュート時間：月間 400,000 GB-秒まで無料\u003c/li\u003e\n\u003cli\u003eHTTP レスポンス ストリーミング：月間 100 GiB まで無料（リクエストあたり最初の 6 MB までは別途カウントなし）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eまた、約1週間動かしてのコストは以下のとおりです。Lambdaのコストは本当に安く、個人開発や趣味のプロジェクトには最適だと実感しました。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"bills.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"22-インフラ管理不要\"\u003e2.2. インフラ管理不要\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-インフラ管理不要\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eサーバーレスのため、OSやミドルウェアの管理が不要です。セキュリティパッチの適用やスケーリングもAWS側で自動的に行われるため、運用負荷が大幅に下がります。\u003c/p\u003e\n\u003cp\u003eまた、障害時の自動リトライや、スケールアウトも自動で行われるため、インフラの知識がそこまでなくても安心して運用できます。EC2やVPSのようにサーバーの死活監視やメンテナンスを気にしなくて良いのは、精神的にもとても楽です。\u003c/p\u003e\n\u003ch3 id=\"23-他の選択肢との比較\"\u003e2.3. 他の選択肢との比較\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#23-他の選択肢との比較\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e最初はEC2やVPSも検討しましたが、コストや運用負荷、スケーリングの柔軟性を考えるとLambdaが最適でした。特に、バッチ処理やAPIのような「必要なときだけ動かす」用途には、Lambdaの従量課金が大きなメリットです。\u003c/p\u003e\n\u003ch2 id=\"3-工夫したポイント\"\u003e3. 工夫したポイント\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-工夫したポイント\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"31-docker化\"\u003e3.1. Docker化\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#31-docker化\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e可搬性をもたせたく、Lambdaで動かすならとDocker化しました。\u003c/p\u003e\n\u003cp\u003eDockerfileで環境がコードとしてまとまるので、別のパソコンでも動作確認しやすくなります。Lambdaのコンテナイメージ対応を活用することで、ローカルでも本番と同じ環境で動作確認でき、依存パッケージの違いによるトラブルも減りました。\u003c/p\u003e\n\u003cp\u003eまた、将来的にチーム開発や他のクラウドサービスへの移植も容易になります。DockerイメージをECR（Elastic Container Registry）にプッシュし、Lambdaから直接参照できるのも便利です。\u003c/p\u003e\n\u003ch3 id=\"32-apiのリフレッシュトークン自動更新\"\u003e3.2. APIのリフレッシュトークン自動更新\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#32-apiのリフレッシュトークン自動更新\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSpotifyのアクセストークンは有効期限が短いため、DynamoDBでリフレッシュトークンを管理し、自動的に更新する仕組みを実装しました。\u003c/p\u003e\n\u003cp\u003eもともとはファイルで管理していたのですが、ファイルの読み書きが難しいので、DynamoDBに変更したというわけです。DynamoDBを使うことで、Lambdaの実行環境が変わってもトークン情報を安全に一元管理できるようになりました。\u003c/p\u003e\n\u003cp\u003eまた、DynamoDBはスケーラブルで高可用性なので、今後ユーザーが増えても安心です。テーブル設計もシンプルで、トークンの有効期限や更新日時なども一緒に管理できるようにしています。\u003c/p\u003e\n\u003ch3 id=\"33-aws-samを使ったデプロイテストの工夫\"\u003e3.3. AWS SAMを使ったデプロイ・テストの工夫\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#33-aws-samを使ったデプロイテストの工夫\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e今回の開発では、AWS Lambdaのデプロイやローカルテストの効率化のために AWS SAM（Serverless Application Model） を活用しました。\u003c/p\u003e\n\u003cp\u003eSAM CLIを使うことで、Lambda関数をローカル環境で簡単にテストできます。Spotify APIへの通信などを本番環境に近い形で動作確認できるため、バグの早期発見や開発効率の向上につながります。\u003c/p\u003e\n\u003cp\u003eまた、SAMテンプレート（template.yaml）でインフラ構成をコード化し、\u003ccode\u003esam deploy\u003c/code\u003e コマンド一つでLambdaやIAMロールなどの関連リソースをまとめてデプロイできるようにしました。これにより、手作業による設定ミスを防ぎ、再現性の高いインフラ管理が実現できました。\u003c/p\u003e\n\u003cp\u003e具体的には以下のように書いています。ここでは使用するDyanmoDBのテーブルやIAMの定義を記述しています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e      \u003cspan style=\"color:#5bc4bf\"\u003eEnvironment\u003c/span\u003e:\n        \u003cspan style=\"color:#5bc4bf\"\u003eVariables\u003c/span\u003e:\n          \u003cspan style=\"color:#5bc4bf\"\u003eSPOTIFY_TOKEN_TABLE\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eSpotifyToken\u003c/span\u003e\n          \u003cspan style=\"color:#5bc4bf\"\u003eSPOTIFY_HISTORY_TABLE\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eSpotifyHistory\u003c/span\u003e\n      \u003cspan style=\"color:#5bc4bf\"\u003ePolicies\u003c/span\u003e:\n        - \u003cspan style=\"color:#5bc4bf\"\u003eStatement\u003c/span\u003e:\n            - \u003cspan style=\"color:#5bc4bf\"\u003eEffect\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eAllow\u003c/span\u003e\n              \u003cspan style=\"color:#5bc4bf\"\u003eAction\u003c/span\u003e:\n                - \u003cspan style=\"color:#f99b15\"\u003edynamodb:PutItem\u003c/span\u003e\n                - \u003cspan style=\"color:#f99b15\"\u003edynamodb:GetItem\u003c/span\u003e\n                - \u003cspan style=\"color:#f99b15\"\u003edynamodb:UpdateItem\u003c/span\u003e\n                - \u003cspan style=\"color:#f99b15\"\u003edynamodb:DeleteItem\u003c/span\u003e\n                - \u003cspan style=\"color:#f99b15\"\u003edynamodb:Scan\u003c/span\u003e\n                - \u003cspan style=\"color:#f99b15\"\u003edynamodb:Query\u003c/span\u003e\n              \u003cspan style=\"color:#5bc4bf\"\u003eResource\u003c/span\u003e: \n                - \u003cspan style=\"color:#f99b15\"\u003earn:aws:dynamodb:ap-northeast-1:449671225256:table/SpotifyToken\u003c/span\u003e\n                - \u003cspan style=\"color:#f99b15\"\u003earn:aws:dynamodb:ap-northeast-1:449671225256:table/SpotifyHistory\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eまた、2時間に1回動かすようにしており、２時間に1回という記述\u003ccode\u003eScheduleExpression: \u0026#34;rate(2 hours)\u0026#34;\u003c/code\u003eをしています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e  \u003cspan style=\"color:#5bc4bf\"\u003eSpotifyHistorySchedule\u003c/span\u003e:\n    \u003cspan style=\"color:#5bc4bf\"\u003eType\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eAWS::Scheduler::Schedule\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003eProperties\u003c/span\u003e:\n      \u003cspan style=\"color:#5bc4bf\"\u003eName\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003espotify-history-schedule\u003c/span\u003e\n      \u003cspan style=\"color:#5bc4bf\"\u003eDescription\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Spotify再生履歴取得 - 2時間ごとに実行\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#5bc4bf\"\u003eFlexibleTimeWindow\u003c/span\u003e:\n        \u003cspan style=\"color:#5bc4bf\"\u003eMode\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;OFF\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#5bc4bf\"\u003eScheduleExpression\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;rate(2 hours)\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#5bc4bf\"\u003eTarget\u003c/span\u003e:\n        \u003cspan style=\"color:#5bc4bf\"\u003eArn\u003c/span\u003e: !\u003cspan style=\"color:#f99b15\"\u003eGetAtt SpotifyTokenFunction.Arn\u003c/span\u003e\n        \u003cspan style=\"color:#5bc4bf\"\u003eRoleArn\u003c/span\u003e: !\u003cspan style=\"color:#f99b15\"\u003eGetAtt SpotifySchedulerRole.Arn\u003c/span\u003e\n        \u003cspan style=\"color:#5bc4bf\"\u003eInput\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#39;{\u0026#34;action\u0026#34;:\u0026#34;fetch_history\u0026#34;}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれ以外にもECRのリポジトリだったり、スケジュラーを動かすためのIAMなどもこのファイルで表現できるので、再現性が高くなります。\u003c/p\u003e\n\u003ch3 id=\"34-運用監視の工夫\"\u003e3.4. 運用・監視の工夫\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#34-運用監視の工夫\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eLambdaの実行ログはCloudWatch Logsに自動で送られるため、エラーや異常終了があった場合もすぐに気付けます。必要に応じてアラートを設定し、障害時にはメールやSlackで通知が飛ぶようにしています。\u003c/p\u003e\n\u003cp\u003eまた、Lambdaのメトリクス（実行回数、エラー回数、実行時間など）もCloudWatchで可視化できるので、運用状況の把握やパフォーマンスチューニングにも役立っています。\u003c/p\u003e\n\u003ch2 id=\"4-今後の展望\"\u003e4. 今後の展望\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-今後の展望\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e今後は、Spotify以外の音楽サービスとの連携や、取得した再生履歴データの可視化・分析にもチャレンジしたいと考えています。\u003c/p\u003e\n\u003cp\u003eまた、Lambdaの他の活用例として、定期的なデータ収集や通知、APIの自動化などにも応用できそうです。サーバーレスの世界はまだまだ奥が深いので、引き続き色々と試していきたいと思います。\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eここまで読んでいただきありがとうございました！Lambdaやサーバーレス、Spotify APIに興味がある方の参考になれば幸いです。\u003c/p\u003e\n\n\n        \u003c/body\u003e\u003c/html\u003e","plain_text":"1. はじめに# Spotifyの再生履歴取得するアプリケーションをローカールのPC起動からAWSのLambda起動に変更しました。 ローカルだとパソコンを常に電源を入れておく必要があり、起動するとかしないというのを気にするのがとても嫌でした。やはりクラウドで動かしたいなと思って、Lambdaから起動するように変更しました。 また、ローカルで動かしていたときは、PCの再起動やスリープ、ネットワークの切断などで処理が止まってしまうことも多く、安定してデータを取得し続けるのが難しいという課題もありました。クラウドであれば、こうした心配から解放され、24時間365日安定して動作させることができます。 2. なぜLambdaにしたか# Spotifyの再生履歴を取得するアプリケーションを開発するにあたり、実行環境としてAWS Lambdaを選択しました。主な理由は以下の通りです。 2.1. 低コスト# Lambdaはリクエストごとに課金されるため、常時稼働させる必要がないバッチ処理やAPIには最適です。今回のアプリは定期的にSpotifyのAPIを叩くだけなので、サーバーを常時起動しておく必要がなく、無料枠の範囲で十分運用できます。 なお、Lambdaの無料枠は以下です。SpotifyのAPIをたたくぐらいなら、問題ないです。 リクエスト数：月間 1,000,000 件まで無料 コンピュート時間：月間 400,000 GB-秒まで無料 HTTP レスポンス ストリーミング：月間 100 GiB まで無料（リクエストあたり最初の 6 MB までは別途カウントなし） また、約1週間動かしてのコストは以下のとおりです。Lambdaのコストは本当に安く、個人開発や趣味のプロジェクトには最適だと実感しました。 2.2. インフラ管理不要# サーバーレスのため、OSやミドルウェアの管理が不要です。セキュリティパッチの適用やスケーリングもAWS側で自動的に行われるため、運用負荷が大幅に下がります。 また、障害時の自動リトライや、スケールアウトも自動で行われるため、インフラの知識がそこまでなくても安心して運用できます。EC2やVPSのようにサーバーの死活監視やメンテナンスを気にしなくて良いのは、精神的にもとても楽です。 2.3. 他の選択肢との比較# 最初はEC2やVPSも検討しましたが、コストや運用負荷、スケーリングの柔軟性を考えるとLambdaが最適でした。特に、バッチ処理やAPIのような「必要なときだけ動かす」用途には、Lambdaの従量課金が大きなメリットです。 3. 工夫したポイント# 3.1. Docker化# 可搬性をもたせたく、Lambdaで動かすならとDocker化しました。 Dockerfileで環境がコードとしてまとまるので、別のパソコンでも動作確認しやすくなります。Lambdaのコンテナイメージ対応を活用することで、ローカルでも本番と同じ環境で動作確認でき、依存パッケージの違いによるトラブルも減りました。 また、将来的にチーム開発や他のクラウドサービスへの移植も容易になります。DockerイメージをECR（Elastic Container Registry）にプッシュし、Lambdaから直接参照できるのも便利です。 3.2. APIのリフレッシュトークン自動更新# Spotifyのアクセストークンは有効期限が短いため、DynamoDBでリフレッシュトークンを管理し、自動的に更新する仕組みを実装しました。 もともとはファイルで管理していたのですが、ファイルの読み書きが難しいので、DynamoDBに変更したというわけです。DynamoDBを使うことで、Lambdaの実行環境が変わってもトークン情報を安全に一元管理できるようになりました。 また、DynamoDBはスケーラブルで高可用性なので、今後ユーザーが増えても安心です。テーブル設計もシンプルで、トークンの有効期限や更新日時なども一緒に管理できるようにしています。 3.3. AWS SAMを使ったデプロイ・テストの工夫# 今回の開発では、AWS Lambdaのデプロイやローカルテストの効率化のために AWS SAM（Serverless Application Model） を活用しました。 SAM CLIを使うことで、Lambda関数をローカル環境で簡単にテストできます。Spotify APIへの通信などを本番環境に近い形で動作確認できるため、バグの早期発見や開発効率の向上につながります。 また、SAMテンプレート（template.yaml）でインフラ構成をコード化し、sam deploy コマンド一つでLambdaやIAMロールなどの関連リソースをまとめてデプロイできるようにしました。これにより、手作業による設定ミスを防ぎ、再現性の高いインフラ管理が実現できました。 具体的には以下のように書いています。ここでは使用するDyanmoDBのテーブルやIAMの定義を記述しています。 Environment: Variables: SPOTIFY_TOKEN_TABLE: SpotifyToken SPOTIFY_HISTORY_TABLE: SpotifyHistory Policies: - Statement: - Effect: Allow Action: - dynamodb:PutItem - dynamodb:GetItem - dynamodb:UpdateItem - dynamodb:DeleteItem - dynamodb:Scan - dynamodb:Query Resource: - arn:aws:dynamodb:ap-northeast-1:449671225256:table/SpotifyToken - arn:aws:dynamodb:ap-northeast-1:449671225256:table/SpotifyHistory また、2時間に1回動かすようにしており、２時間に1回という記述ScheduleExpression: \"rate(2 hours)\"をしています。 SpotifyHistorySchedule: Type: AWS::Scheduler::Schedule Properties: Name: spotify-history-schedule Description: \"Spotify再生履歴取得 - 2時間ごとに実行\" FlexibleTimeWindow: Mode: \"OFF\" ScheduleExpression: \"rate(2 hours)\" Target: Arn: !GetAtt SpotifyTokenFunction.Arn RoleArn: !GetAtt SpotifySchedulerRole.Arn Input: '{\"action\":\"fetch_history\"}' これ以外にもECRのリポジトリだったり、スケジュラーを動かすためのIAMなどもこのファイルで表現できるので、再現性が高くなります。 3.4. 運用・監視の工夫# Lambdaの実行ログはCloudWatch Logsに自動で送られるため、エラーや異常終了があった場合もすぐに気付けます。必要に応じてアラートを設定し、障害時にはメールやSlackで通知が飛ぶようにしています。 また、Lambdaのメトリクス（実行回数、エラー回数、実行時間など）もCloudWatchで可視化できるので、運用状況の把握やパフォーマンスチューニングにも役立っています。 4. 今後の展望# 今後は、Spotify以外の音楽サービスとの連携や、取得した再生履歴データの可視化・分析にもチャレンジしたいと考えています。 また、Lambdaの他の活用例として、定期的なデータ収集や通知、APIの自動化などにも応用できそうです。サーバーレスの世界はまだまだ奥が深いので、引き続き色々と試していきたいと思います。 ここまで読んでいただきありがとうございました！Lambdaやサーバーレス、Spotify APIに興味がある方の参考になれば幸いです。","scraped_at":"2025-07-12T20:26:32.72832662+09:00","word_count":137,"content_hash":"3315029eb600c3ba03938c62037282a5"}
{"url":"https://yamada-tech-memo.netlify.app/","title":"技術的なメモを残す","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"first-entry home-info\"\u003e\n    \n    \u003cdiv class=\"entry-content\"\u003e\n        \u003cbr/\u003e\n 何回もググるから、メモを残しておく\u003cbr/\u003e\n 🏃‍♂️ running 🎧 music \u003cbr/\u003e\n\n    \u003c/div\u003e\n    \n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        git cleanコマンドを使って未追跡ファイルを安全に削除する方法を詳しく解説\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/git-clean-untracked-files/git-clean.jpg\" alt=\"git clean\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to git cleanで未追跡ファイルを安全に削除する方法\" href=\"https://yamada-tech-memo.netlify.app/posts/git-clean-untracked-files/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        GitHub ActionsはOKでもNGでも通知する\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/github-actions-slack/slack.png\" alt=\"slack\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to GitHub Actions × Slackで ECSデプロイを可視化する\" href=\"https://yamada-tech-memo.netlify.app/posts/github-actions-slack/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        もっと早く知っておけばよかった\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/github-actions-oidc-aws-ecs/oidc.png\" alt=\"oidc\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to GitHub ActionsからOIDCを使って安全にAWS ECSへデプロイするぜ！\" href=\"https://yamada-tech-memo.netlify.app/posts/github-actions-oidc-aws-ecs/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        npm installからのnpm run build\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/vite-manifest-not-found/PHP.png\" alt=\"vivliostyle\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to LaravelでVite manifest not found at:のエラー\" href=\"https://yamada-tech-memo.netlify.app/posts/vite-manifest-not-found/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        Lambdaで実装\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/lambda_switchbot_new_relic/01.png\" alt=\"vivliostyle\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to SwitchBotの温度と湿度をLambdaで「New Relic」に送る\" href=\"https://yamada-tech-memo.netlify.app/posts/lambda_switchbot_new_relic/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        自前は気にすることが多い\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/20250702_new_relic/image.png\" alt=\"vivliostyle\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to 自前の「Grafana＋Prometheus」から「New Relic」に変更した\" href=\"https://yamada-tech-memo.netlify.app/posts/20250702_new_relic/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        便利なツールがあるもんだ！\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/yt-dlp-download-dj-mix/yt-dlp.png\" alt=\"vivliostyle\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to yt-dlpでmixcloudのDJ MIXをダウンロードする\" href=\"https://yamada-tech-memo.netlify.app/posts/yt-dlp-download-dj-mix/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        CI/CDができる\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/markdown-to-pdf/vivliostyle.png\" alt=\"vivliostyle\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to Vivliostyleで書籍作りを妄想した\" href=\"https://yamada-tech-memo.netlify.app/posts/markdown-to-pdf/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        CodexがPLUSに落ちてきた\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/open-ai-codex-vibe-coding/vibe.png\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to codexが使えるようになったので、vibe codingを試した\" href=\"https://yamada-tech-memo.netlify.app/posts/open-ai-codex-vibe-coding/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        無料でできる\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\n        \u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/posts/lambda-kick0spotify-recently-play-music/lambda-spotify.png\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to Spotifyの再生履歴取得アプリをlambdaで動かす\" href=\"https://yamada-tech-memo.netlify.app/posts/lambda-kick0spotify-recently-play-music/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003c/body\u003e\u003c/html\u003e","plain_text":"何回もググるから、メモを残しておく 🏃‍♂️ running 🎧 music git cleanコマンドを使って未追跡ファイルを安全に削除する方法を詳しく解説 GitHub ActionsはOKでもNGでも通知する もっと早く知っておけばよかった npm installからのnpm run build Lambdaで実装 自前は気にすることが多い 便利なツールがあるもんだ！ CI/CDができる CodexがPLUSに落ちてきた 無料でできる","scraped_at":"2025-07-12T20:31:56.402904762+09:00","word_count":20,"content_hash":"a9bc559c61250fb7e7d24af4eb75a815"}
{"url":"https://yamada-tech-memo.netlify.app/posts/page/4/","title":"📚 posts","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        あまりやらないから忘れる\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to Route53で払い出したドメインをALBに適用する\" href=\"https://yamada-tech-memo.netlify.app/posts/dns-apply-alb/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        カスタムパラメータを設定する\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to RDSとのSSL通信をやめる\" href=\"https://yamada-tech-memo.netlify.app/posts/enable-rds-ssl/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        terraformでやる\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to ALBにサーバ証明書を適用する\" href=\"https://yamada-tech-memo.netlify.app/posts/server-certification-apply-alb/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        CSR作成などは意識しない\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to ACMでサーバ証明書を発行する手順\" href=\"https://yamada-tech-memo.netlify.app/posts/acm-publish-server-certification/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        名前空間を使う\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to ECS ServiceDiscoveryを使ってタスク間通信するぜ！\" href=\"https://yamada-tech-memo.netlify.app/posts/use-ecsservicediscovery/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        terraformでもできる\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to SecurityHub：Inspectorを有効にする\" href=\"https://yamada-tech-memo.netlify.app/posts/inspector-enabled/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        まずは連携できた\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to CloudWatchLogsやCloudWatchAlarmからSQSに連携する\" href=\"https://yamada-tech-memo.netlify.app/posts/poc-cloudwatch-sqs/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        記録に残す\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to AWS SESを構築する\" href=\"https://yamada-tech-memo.netlify.app/posts/aws-ses/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        workspaceをメインにコードを書いてみた\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/bash.jpg\" alt=\"bash.png\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to 実装の考え方を残す。golangでAPIをスピーディーに実装した\" href=\"https://yamada-tech-memo.netlify.app/posts/golang-api-sample/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        ダイジェスト認証はソースコードから色々する必要あり\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/bash.jpg\" alt=\"bash.png\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to nginxでダイジェスト認証はコンパイルなどで面倒だから、dockerでしてみるでしょ\" href=\"https://yamada-tech-memo.netlify.app/posts/nginx-digest-docker/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003c/body\u003e\u003c/html\u003e","plain_text":"あまりやらないから忘れる カスタムパラメータを設定する terraformでやる CSR作成などは意識しない 名前空間を使う terraformでもできる まずは連携できた 記録に残す workspaceをメインにコードを書いてみた ダイジェスト認証はソースコードから色々する必要あり","scraped_at":"2025-07-12T20:32:13.882457711+09:00","word_count":10,"content_hash":"d7f5d6bc6684bafcf24b9f47aa0c4d31"}
{"url":"https://yamada-tech-memo.netlify.app/posts/page/10/","title":"📚 posts","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        大雑把なやり方\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/git.jpg\" alt=\"git\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to GitHubに100MBを超えるファイルをPUSHしちゃったら\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/github-max-size/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        terraformをアップデートした後の手順\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/terraform.jpg\" alt=\"terraform\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to terraformバージョンアップ後にやったこと\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/after-terraform-update/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        terraformのアップデートメモ\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/terraform.jpg\" alt=\"terraform\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to terraformのバージョンを上げた\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/terraform-update-150-to-162/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        alarmを出力する\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to CLoudWatchAlarmをテストする\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/test-cloud-watch-alarm/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        ミスしたことも含めて記録した\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/git.jpg\" alt=\"git\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to gitのコミットをrebaseでまとめた記録\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/git-rebase/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        使うときは慎重に\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/terraform.jpg\" alt=\"terraform\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to terraformで特定のmoduleだけapplyする\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/unique-moule-apply/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        思い出せなくて、いつも調べるから書いておく\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/bash.jpg\" alt=\"bash\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to 再帰的に検索したファイルを削除する\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/rm-xargs/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        コードを変更する方法\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/hugo.webp\" alt=\"hugo\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to HugoのPageBundleでアイキャッチを表示する方法\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/page-bundle-eye-catch/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        armは安い！\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to EC2でarmアーキテクチャのAMIを使用する。terraformで。\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/ec2-arm-ami/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        lambdaを使わないでいいから便利\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/terraform.jpg\" alt=\"terraform\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to terraformでEventBridge Scheduleしてみた\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/terraform-eventbridge-schedule/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003c/body\u003e\u003c/html\u003e","plain_text":"大雑把なやり方 terraformをアップデートした後の手順 terraformのアップデートメモ alarmを出力する ミスしたことも含めて記録した 使うときは慎重に 思い出せなくて、いつも調べるから書いておく コードを変更する方法 armは安い！ lambdaを使わないでいいから便利","scraped_at":"2025-07-12T21:12:26.003021018+09:00","word_count":10,"content_hash":"297ea6cb0c87d44c41eedb9bc2117cbf"}
{"url":"https://yamada-tech-memo.netlify.app/posts/20250702_new_relic/","title":"自前の「Grafana＋Prometheus」から「New Relic」に変更した","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e可観測性を高めようと、自宅サーバをPrometheus＋Grafanaで構成して以下のような状態を管理していました。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eサーバのCPU,メモリ\u003c/li\u003e\n\u003cli\u003eコンテナの使用状況\u003c/li\u003e\n\u003cli\u003eビデオカードの使用状況\u003c/li\u003e\n\u003cli\u003eSwitchBotで取得した温度と湿度\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e自前のサーバで動かしていたのですが、サーバを再起動するとPrometheusやGrafanaの起動確認したり、SwitchBotのエクスポーターの起動確認が必要で手間に感じていました。\u003c/p\u003e\n\u003cp\u003eそこで、監視システムをより運用しやすいSaaS型のソリューションに移行することを決めました。そのためのツールとして、サーバーレスアーキテクチャとNew Relicを選択し、監視しやすい環境構築を図ることにしました。\u003c/p\u003e\n\u003ch2 id=\"2-この記事で書くこと\"\u003e2. この記事で書くこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-この記事で書くこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下を「Grafana＋Prometheus」から「New Relic」にしての所感を書いてます。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eサーバのCPU,メモリ\u003c/li\u003e\n\u003cli\u003eコンテナの使用状況\u003c/li\u003e\n\u003cli\u003eビデオカードの使用状況\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-new-relicとは\"\u003e3. New Relicとは？\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-new-relicとは\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNew Relic は、クラウド上で提供される SaaS 型のフルスタック・オブザーバビリティ（可観測性）プラットフォーム です。\nAPM（アプリケーション性能監視）に始まり、インフラ監視、ログ、分散トレーシング、リアルユーザーモニタリング（RUM）、ブラウザ／モバイル計測、合成監視までワンストップで扱えるのが特徴です。すべてのデータは時系列データベース NRDB に集約され、共通のクエリ言語 NRQL やダッシュボード機能で横串分析できます。\u003c/p\u003e\n\u003cp\u003e同様のサービスとしては、DataDogやMackrelが思いつきます。\u003c/p\u003e\n\u003cp\u003eNew Relicは無料で使える枠が大きいので、New Relicを採用しました。\u003c/p\u003e\n\u003ch2 id=\"4-サーバからnew-relicにデータを送るには\"\u003e4. サーバからNew Relicにデータを送るには\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-サーバからnew-relicにデータを送るには\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eサーバからNew Relicにデータを送るには、Agentをインストールします。\u003c/p\u003e\n\u003cp\u003eインストールは「Integrations \u0026amp; Agents」からAPIキーを発行して、出力されるコマンドをコピペすればOKです。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-1.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-2.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-3.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eそうすると、以下のようなグラフが表示されます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eビデオカードも同様です。このような感じで表示されます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-4.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# 可観測性を高めようと、自宅サーバをPrometheus＋Grafanaで構成して以下のような状態を管理していました。 サーバのCPU,メモリ コンテナの使用状況 ビデオカードの使用状況 SwitchBotで取得した温度と湿度 自前のサーバで動かしていたのですが、サーバを再起動するとPrometheusやGrafanaの起動確認したり、SwitchBotのエクスポーターの起動確認が必要で手間に感じていました。 そこで、監視システムをより運用しやすいSaaS型のソリューションに移行することを決めました。そのためのツールとして、サーバーレスアーキテクチャとNew Relicを選択し、監視しやすい環境構築を図ることにしました。 2. この記事で書くこと# 以下を「Grafana＋Prometheus」から「New Relic」にしての所感を書いてます。 サーバのCPU,メモリ コンテナの使用状況 ビデオカードの使用状況 3. New Relicとは？# New Relic は、クラウド上で提供される SaaS 型のフルスタック・オブザーバビリティ（可観測性）プラットフォーム です。 APM（アプリケーション性能監視）に始まり、インフラ監視、ログ、分散トレーシング、リアルユーザーモニタリング（RUM）、ブラウザ／モバイル計測、合成監視までワンストップで扱えるのが特徴です。すべてのデータは時系列データベース NRDB に集約され、共通のクエリ言語 NRQL やダッシュボード機能で横串分析できます。 同様のサービスとしては、DataDogやMackrelが思いつきます。 New Relicは無料で使える枠が大きいので、New Relicを採用しました。 4. サーバからNew Relicにデータを送るには# サーバからNew Relicにデータを送るには、Agentをインストールします。 インストールは「Integrations \u0026 Agents」からAPIキーを発行して、出力されるコマンドをコピペすればOKです。 そうすると、以下のようなグラフが表示されます。 ビデオカードも同様です。このような感じで表示されます。 微信 支付宝","scraped_at":"2025-07-12T21:16:21.452763167+09:00","word_count":47,"content_hash":"6b9e1315ea95a8002b979c661fd64a17"}
{"url":"https://yamada-tech-memo.netlify.app/posts/page/11/","title":"📚 posts","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        PPAを追加するのがミソ\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/golang_logo.svg\" alt=\"golang\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to Ubuntu22.04でgolangを最新バージョンにする\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/golang-version-up/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        癖がある。使ってみないとわからないものだなー。\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/terraform.jpg\" alt=\"terraform\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to さくらのクラウドでterrformを使用してみた\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/sakura-cloud-terraform/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        TFLintをかける\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/terraform.jpg\" alt=\"terraform\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to terraformにlintする。dockerで\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/tflint-docker/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        yumするにもエンドポイントが必要！\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to プライベートサブネットのEC2からyumできない\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/s3-endopoint-for-yum/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        EICエンドポイント、良いっす\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to EICエンドポイントを使用してプライベートサブネットのEC2に接続する\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/eic-endpoint/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        プライベートサブネットに配置するECSコンテナはVPCエンドポイントに気をつけろ\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/aws.webp\" alt=\"aws\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to ECSのVPCエンドポイント\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/ecs-vpc-endpoint/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        response_bodyを使う\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/terraform.jpg\" alt=\"terraform\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to terraform：「body」は非推奨になりました。への対応。\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/terraform_body_is_deprecated/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        countを使用するのが楽\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/terraform.jpg\" alt=\"terraform\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to terraformでEC2を複数起動したい\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/terraform_many_ec2/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        provisionerを使用する\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/terraform.jpg\" alt=\"terraform\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to terraform後にプロビジョニングしたい\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/terraform_provisioning/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003carticle class=\"post-entry\"\u003e\n  \u003cdiv class=\"post-info\"\u003e\n    \n    \u003csection class=\"entry-content\"\u003e\n      \u003cp\u003e\n        aws_security_group_ruleを使う\n        \n      \u003c/p\u003e\n    \u003c/section\u003e\n    \n  \u003c/div\u003e \n\u003cfigure class=\"entry-cover\"\u003e\u003cimg loading=\"lazy\" src=\"https://yamada-tech-memo.netlify.app/img/terraform.jpg\" alt=\"terraform\"/\u003e\n\u003c/figure\u003e\n  \u003ca class=\"entry-link\" aria-label=\"post link to terraformでawsのセキュリティグループを複数適用する\" href=\"https://yamada-tech-memo.netlify.app/posts/2023/terraform_sg/\"\u003e\u003c/a\u003e\n\u003c/article\u003e\n\n\u003c/body\u003e\u003c/html\u003e","plain_text":"PPAを追加するのがミソ 癖がある。使ってみないとわからないものだなー。 TFLintをかける yumするにもエンドポイントが必要！ EICエンドポイント、良いっす プライベートサブネットに配置するECSコンテナはVPCエンドポイントに気をつけろ response_bodyを使う countを使用するのが楽 provisionerを使用する aws_security_group_ruleを使う","scraped_at":"2025-07-12T21:16:40.288672585+09:00","word_count":10,"content_hash":"92d6eeda1beb60a1af0a1d69f868f9df"}
{"url":"https://yamada-tech-memo.netlify.app/posts/spotify-recently-play-music/","title":"Spotifyの再生履歴を表示","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eいつ音楽を聴いているのかを知りたくなりました。\u003c/p\u003e\n\u003cp\u003eというのも、最近は録音したラジオ番組やPodcastを聞くことが多く、音楽を聴く機会が大きく減っている気がするためです。\u003c/p\u003e\n\u003cp\u003eいつ、どんな曲を聴いているのかを統計チックなものを取ろうと考えました。\u003c/p\u003e\n\u003cp\u003eそこで、まずは再生履歴を貯めていこうと考えました。\u003c/p\u003e\n\u003ch2 id=\"2-仕組み\"\u003e2. 仕組み\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-仕組み\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e継続するかが不透明だったので、安価に運用できる仕組みを考えました。\u003c/p\u003e\n\u003cp\u003e単純なのは、統計をとるためにSpotifyからデータを取得することです。調べると、Spotifyは再生した曲を提供するAPIを用意していることがわかりました。しかし、直近50曲までしか履歴を提供してくれません。\u003c/p\u003e\n\u003cp\u003eということで、ある程度のタイミングでSpotifyからデータを取得して、データベースに格納することにしました。\u003c/p\u003e\n\u003cp\u003e以下は概要図です。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"データベースはdynamodb\"\u003eデータベースはDynamoDB\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#データベースはdynamodb\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eクラウドのデータベースを使用することにしました。\u003c/p\u003e\n\u003cp\u003eまた、VPCが必要なRDBは高額になりがちです。なので、使った時に使った分だけ支払うDynamoDBを使用することにしました。\u003c/p\u003e\n\u003cp\u003eちなみに、以下がDynamoDBの使用状況です。作成しているときは、動作確認しているのでDynamoDBに書き込んだり、読み込んだりしているので、使用量が多いです。ただ、運用が始まってからはそうでもないですね。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"caacity.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"spotify-dynamodbへの格納アプリ\"\u003eSpotify →　DynamoDBへの格納アプリ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#spotify-dynamodbへの格納アプリ\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSpotifyから曲の情報を取得してDynamoDBに格納するアプリケーションはgolangで作りました。\u003c/p\u003e\n\u003cp\u003eこれは自宅で動かしています。cronで1回/1時間の頻度で動かしています。\u003c/p\u003e\n\u003cp\u003eSpotifyの認証をファイルに持たせてしまっているので、うまいことやってLambdaで動かすようにしたいと考えています。\u003c/p\u003e\n\u003ch3 id=\"hugoで表示\"\u003eHugoで表示\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#hugoで表示\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eDynamoDBから情報を取得して、このhugoで表示するようにしました。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"json.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e統計をとりたいだけだったので、曲を表示する必要はなかったですが、まずはやってみました。\u003c/p\u003e\n\u003cp\u003eメニューにSpotifyというリンクを挿入してそこからリンクを辿るようにしました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://yamada-tech-memo.netlify.app/spotify/\"\u003ehttps://yamada-tech-memo.netlify.app/spotify/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"工夫した点\"\u003e工夫した点\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#工夫した点\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e１回/1日は更新したいので、GitHubActionsを１回/1日動かして、DynamoDBからデータを取得してページをデプロイするようにしました。\u003c/p\u003e\n\u003ch2 id=\"苦労したこと\"\u003e苦労したこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#苦労したこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHubActionsを使用してリポジトリを更新するのには手間取りました。「権限不足しているから、更新させない」というメッセージと1時間ぐらい格闘していました。\u003c/p\u003e\n\u003ch2 id=\"盲点だったこと\"\u003e盲点だったこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#盲点だったこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ePodcastは再生履歴にカウントされません。Podcastの情報も取得できるかと思ったのですが、ダメでした。。。\u003c/p\u003e\n\u003cp\u003e以下のドキュメントに「Currently doesn’t support podcast episodes」と書いているんですよね。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://developer.spotify.com/documentation/web-api/reference/get-recently-played\"\u003ehttps://developer.spotify.com/documentation/web-api/reference/get-recently-played\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# いつ音楽を聴いているのかを知りたくなりました。 というのも、最近は録音したラジオ番組やPodcastを聞くことが多く、音楽を聴く機会が大きく減っている気がするためです。 いつ、どんな曲を聴いているのかを統計チックなものを取ろうと考えました。 そこで、まずは再生履歴を貯めていこうと考えました。 2. 仕組み# 継続するかが不透明だったので、安価に運用できる仕組みを考えました。 単純なのは、統計をとるためにSpotifyからデータを取得することです。調べると、Spotifyは再生した曲を提供するAPIを用意していることがわかりました。しかし、直近50曲までしか履歴を提供してくれません。 ということで、ある程度のタイミングでSpotifyからデータを取得して、データベースに格納することにしました。 以下は概要図です。 データベースはDynamoDB# クラウドのデータベースを使用することにしました。 また、VPCが必要なRDBは高額になりがちです。なので、使った時に使った分だけ支払うDynamoDBを使用することにしました。 ちなみに、以下がDynamoDBの使用状況です。作成しているときは、動作確認しているのでDynamoDBに書き込んだり、読み込んだりしているので、使用量が多いです。ただ、運用が始まってからはそうでもないですね。 Spotify →　DynamoDBへの格納アプリ# Spotifyから曲の情報を取得してDynamoDBに格納するアプリケーションはgolangで作りました。 これは自宅で動かしています。cronで1回/1時間の頻度で動かしています。 Spotifyの認証をファイルに持たせてしまっているので、うまいことやってLambdaで動かすようにしたいと考えています。 Hugoで表示# DynamoDBから情報を取得して、このhugoで表示するようにしました。 統計をとりたいだけだったので、曲を表示する必要はなかったですが、まずはやってみました。 メニューにSpotifyというリンクを挿入してそこからリンクを辿るようにしました。 https://yamada-tech-memo.netlify.app/spotify/ 工夫した点# １回/1日は更新したいので、GitHubActionsを１回/1日動かして、DynamoDBからデータを取得してページをデプロイするようにしました。 苦労したこと# GitHubActionsを使用してリポジトリを更新するのには手間取りました。「権限不足しているから、更新させない」というメッセージと1時間ぐらい格闘していました。 盲点だったこと# Podcastは再生履歴にカウントされません。Podcastの情報も取得できるかと思ったのですが、ダメでした。。。 以下のドキュメントに「Currently doesn’t support podcast episodes」と書いているんですよね。 https://developer.spotify.com/documentation/web-api/reference/get-recently-played 微信 支付宝","scraped_at":"2025-07-12T21:16:53.894090267+09:00","word_count":41,"content_hash":"b39ca2c2b9a052105032a78b80bd1ac0"}
{"url":"https://yamada-tech-memo.netlify.app/posts/multiple-acm-certificates-matching-domain/","title":"terrafoermで証明書を適用したら、エラーになった","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e証明書の有効期限が切れるので、新しい証明書を購入してALBに適用を試みたところ、以下のエラーメッセージが出力されました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e Error: multiple ACM Certificates matching domain (sample.com)\n│ \n│   with module.alb.data.aws_acm_certificate.acm,\n│   on ../../modules/alb/main.tf line 73, in data \u0026#34;aws_acm_certificate\u0026#34; \u0026#34;acm\u0026#34;:\n│   73: data \u0026#34;aws_acm_certificate\u0026#34; \u0026#34;acm\u0026#34; {\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eACM 証明書を1件に特定できず、複数ヒットしたため選択できないというエラーです。\u003c/p\u003e\n\u003cp\u003eTerraformは1件だけ返ることを前提にしているため、2件以上ヒットすると処理を中断するのです。\u003c/p\u003e\n\u003ch2 id=\"2-原因\"\u003e2. 原因\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-原因\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e同一ドメインにマッチする証明書が2つ存在していました。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e残り4日ぐらいで有効期限が切れる証明書\u003c/li\u003e\n\u003cli\u003e新規購入した証明書\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-対応\"\u003e3. 対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のように適用する証明書をユニークにするように変更しました。これでALBに適用することができました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_acm_certificate\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;acm\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003edomain\u003c/span\u003e = var.\u003cspan style=\"color:#06b6ef\"\u003edomain_name\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003estatuses\u003c/span\u003e    = [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;ISSUED\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#776e71\"\u003e             # 失効・検証中を除外\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#06b6ef\"\u003ekey_types\u003c/span\u003e   = [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;RSA_2048\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#776e71\"\u003e           # EC 証明書が混在するなら指定\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#06b6ef\"\u003emost_recent\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                   # ← 最新 1 枚に絞り込む\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# 証明書の有効期限が切れるので、新しい証明書を購入してALBに適用を試みたところ、以下のエラーメッセージが出力されました。 Error: multiple ACM Certificates matching domain (sample.com) │ │ with module.alb.data.aws_acm_certificate.acm, │ on ../../modules/alb/main.tf line 73, in data \"aws_acm_certificate\" \"acm\": │ 73: data \"aws_acm_certificate\" \"acm\" { ACM 証明書を1件に特定できず、複数ヒットしたため選択できないというエラーです。 Terraformは1件だけ返ることを前提にしているため、2件以上ヒットすると処理を中断するのです。 2. 原因# 同一ドメインにマッチする証明書が2つ存在していました。 残り4日ぐらいで有効期限が切れる証明書 新規購入した証明書 3. 対応# 以下のように適用する証明書をユニークにするように変更しました。これでALBに適用することができました。 data \"aws_acm_certificate\" \"acm\" { domain = var.domain_name statuses = [\"ISSUED\"] # 失効・検証中を除外 key_types = [\"RSA_2048\"] # EC 証明書が混在するなら指定 most_recent = true # ← 最新 1 枚に絞り込む } 微信 支付宝","scraped_at":"2025-07-12T21:16:58.232815715+09:00","word_count":69,"content_hash":"d07cd73e7bac22672773a782555a0034"}
{"url":"https://yamada-tech-memo.netlify.app/posts/check-import-certification/","title":"インポート証明書の有効期限が近づいたらslackに通知する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eACMで発行しているサーバ証明書は自動で更新してくれることもあり、有効期限などはそれほど意識することはありません。\u003c/p\u003e\n\u003cp\u003e一方、他のサービスで発行したサーバ証明書は自分で再登録して、サーバ証明書を適用する必要があります。とはいうものの、有効期限って忘れがちです。1年に1回の更新になるので、有効期限がいつかのチェックそのものも忘れがちです。\u003c/p\u003e\n\u003cp\u003eそこで、有効期限をチェックして、期限が近づいたらslackに通知するようにします。\u003c/p\u003e\n\u003ch2 id=\"仕組み\"\u003e仕組み\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#仕組み\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようにサービスを組み合わせてslackに通知します。\u003c/p\u003e\n\u003cp\u003eAWS Config → EventBridge → SNS → AWS Chatbot → Slack\u003c/p\u003e\n\u003ch2 id=\"terraformで実装\"\u003eterraformで実装\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#terraformで実装\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e自分の環境はConfigからSecurityHubを経由してSNS→Chatbot→slackの流れがありました。\u003c/p\u003e\n\u003cp\u003eそのため、追加でEventBridgeの部分を作り込みました。\u003c/p\u003e\n\u003cp\u003eまずはconfigルールを作ります。ここでは45日前にチェックするようにします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_config_config_rule\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;acm_expire\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;acm-certificate-expiration-check\u0026#34;\u003c/span\u003e\n\n  \u003cspan style=\"color:#06b6ef\"\u003esource\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003eowner\u003c/span\u003e             = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;AWS\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e                     # マネージドルール\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#06b6ef\"\u003esource_identifier\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ACM_CERTIFICATE_EXPIRATION_CHECK\u0026#34;\u003c/span\u003e\n  }\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e  # パラメータ: 45日。ここは変更可能\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#06b6ef\"\u003einput_parameters\u003c/span\u003e = jsonencode({\n    \u003cspan style=\"color:#06b6ef\"\u003edaysToExpiration\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;45\u0026#34;\u003c/span\u003e\n  })\n\n  \u003cspan style=\"color:#06b6ef\"\u003edepends_on\u003c/span\u003e = [\u003cspan style=\"color:#06b6ef\"\u003eaws_config_configuration_recorder\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003emain\u003c/span\u003e]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e次にEventBridgeでNON_COMPLIANTをSNSに通知します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_cloudwatch_event_rule\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;config_noncompliant\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e        = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ConfigACMCertNonCompliant\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003edescription\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Import cert is about to expire\u0026#34;\u003c/span\u003e\n\n  \u003cspan style=\"color:#06b6ef\"\u003eevent_pattern\u003c/span\u003e = \u003cspan style=\"color:#5bc4bf\"\u003e\u0026lt;\u0026lt;PATTERN\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e{\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e  \u0026#34;source\u0026#34;: [\u0026#34;aws.config\u0026#34;],\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e  \u0026#34;detail-type\u0026#34;: [\u0026#34;Config Rules Compliance Change\u0026#34;],\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e  \u0026#34;detail\u0026#34;: {\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e    \u0026#34;messageType\u0026#34;: [\u0026#34;ComplianceChangeNotification\u0026#34;],\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e    \u0026#34;configRuleName\u0026#34;: [\u0026#34;acm-certificate-expiration-check\u0026#34;],\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e    \u0026#34;newEvaluationResult\u0026#34;: { \u0026#34;complianceType\u0026#34;: [\u0026#34;NON_COMPLIANT\u0026#34;] }\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e  }\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e}\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003ePATTERN\u003c/span\u003e\n}\n\u003cspan style=\"color:#815ba4\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_cloudwatch_event_target\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;to_sns\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003erule\u003c/span\u003e      = \u003cspan style=\"color:#06b6ef\"\u003eaws_cloudwatch_event_rule\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003econfig_noncompliant\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003etarget_id\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;SendToSNS\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003earn\u003c/span\u003e       = \u003cspan style=\"color:#06b6ef\"\u003eaws_sns_topic\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003echatbot\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003earn\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"運用\"\u003e運用\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#運用\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e上記のterraformをapplyしたらすぐに通知がきました。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# ACMで発行しているサーバ証明書は自動で更新してくれることもあり、有効期限などはそれほど意識することはありません。 一方、他のサービスで発行したサーバ証明書は自分で再登録して、サーバ証明書を適用する必要があります。とはいうものの、有効期限って忘れがちです。1年に1回の更新になるので、有効期限がいつかのチェックそのものも忘れがちです。 そこで、有効期限をチェックして、期限が近づいたらslackに通知するようにします。 仕組み# 以下のようにサービスを組み合わせてslackに通知します。 AWS Config → EventBridge → SNS → AWS Chatbot → Slack terraformで実装# 自分の環境はConfigからSecurityHubを経由してSNS→Chatbot→slackの流れがありました。 そのため、追加でEventBridgeの部分を作り込みました。 まずはconfigルールを作ります。ここでは45日前にチェックするようにします。 resource \"aws_config_config_rule\" \"acm_expire\" { name = \"acm-certificate-expiration-check\" source { owner = \"AWS\" # マネージドルール source_identifier = \"ACM_CERTIFICATE_EXPIRATION_CHECK\" } # パラメータ: 45日。ここは変更可能 input_parameters = jsonencode({ daysToExpiration = \"45\" }) depends_on = [aws_config_configuration_recorder.main] } 次にEventBridgeでNON_COMPLIANTをSNSに通知します。 resource \"aws_cloudwatch_event_rule\" \"config_noncompliant\" { name = \"ConfigACMCertNonCompliant\" description = \"Import cert is about to expire\" event_pattern = \u003c\u003cPATTERN { \"source\": [\"aws.config\"], \"detail-type\": [\"Config Rules Compliance Change\"], \"detail\": { \"messageType\": [\"ComplianceChangeNotification\"], \"configRuleName\": [\"acm-certificate-expiration-check\"], \"newEvaluationResult\": { \"complianceType\": [\"NON_COMPLIANT\"] } } } PATTERN } resource \"aws_cloudwatch_event_target\" \"to_sns\" { rule = aws_cloudwatch_event_rule.config_noncompliant.name target_id = \"SendToSNS\" arn = aws_sns_topic.chatbot.arn } 運用# 上記のterraformをapplyしたらすぐに通知がきました。 微信 支付宝","scraped_at":"2025-07-12T21:16:59.869349535+09:00","word_count":113,"content_hash":"143ab1df73a08dfa0374ab51168a0e9f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/rds-eosl-cost-down/","title":"RDSのバージョンを上げてからのコスト遷移","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRDSのPostgreSQL 12.19を使用していました。\u003c/p\u003e\n\u003ch3 id=\"11-コスト上昇の理由\"\u003e1.1. コスト上昇の理由\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#11-コスト上昇の理由\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eAWSでは、EOSLを迎えたRDSエンジンに対して追加料金が発生します：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExtended Support料金\u003c/strong\u003e: インスタンス時間あたりの追加料金\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e料金体系\u003c/strong\u003e: 通常のRDS料金に加えて、時間あたりの追加コストが発生\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eこの結果、3月からRDSのコストが大幅に上昇しました。\u003c/p\u003e\n\u003cp\u003ePostgreSQLのバージョンを新しいサポート対象バージョンにアップグレードすることで、Extended Support料金を回避し、コストを削減しました。\u003c/p\u003e\n\u003cp\u003eもちろん、もっと早くからやっていればいいのですが、なかなか手が回らず。。。\u003c/p\u003e\n\u003ch2 id=\"2-対応したバージョンアップ\"\u003e2. 対応したバージョンアップ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-対応したバージョンアップ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"21-アップグレード対象バージョン\"\u003e2.1. アップグレード対象バージョン\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-アップグレード対象バージョン\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eアップグレード前\u003c/strong\u003e: PostgreSQL 12.19（EOSL）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eアップグレード後\u003c/strong\u003e: PostgreSQL 15.4（サポート対象）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"22-バージョン選択の理由\"\u003e2.2. バージョン選択の理由\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-バージョン選択の理由\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003ePostgreSQL 15を選択した理由：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e安定性が確認されている\u003c/li\u003e\n\u003cli\u003e長期サポートが期待できる\u003c/li\u003e\n\u003cli\u003e12系からの移行が比較的スムーズ\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-コスト遷移\"\u003e3. コスト遷移\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-コスト遷移\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eグラフの水色部分がRDSです。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./cost_explorer2.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"31-コスト変化の詳細\"\u003e3.1. コスト変化の詳細\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#31-コスト変化の詳細\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e2月まで\u003c/strong\u003e: 通常のRDS料金\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e3月1日〜\u003c/strong\u003e: Extended Support料金により大幅増加\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e3月8日頃\u003c/strong\u003e: 検証環境バージョンアップ（コスト削減効果確認）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e3月20日頃\u003c/strong\u003e: 本番環境バージョンアップ（コスト正常化）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e3月1日にコストが跳ね上がっているのがわかります。\u003c/p\u003e\n\u003cp\u003eバージョンアップ後、RDSのコストは2月までと同程度に戻っています。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# RDSのPostgreSQL 12.19を使用していました。 1.1. コスト上昇の理由# AWSでは、EOSLを迎えたRDSエンジンに対して追加料金が発生します： Extended Support料金: インスタンス時間あたりの追加料金 料金体系: 通常のRDS料金に加えて、時間あたりの追加コストが発生 この結果、3月からRDSのコストが大幅に上昇しました。 PostgreSQLのバージョンを新しいサポート対象バージョンにアップグレードすることで、Extended Support料金を回避し、コストを削減しました。 もちろん、もっと早くからやっていればいいのですが、なかなか手が回らず。。。 2. 対応したバージョンアップ# 2.1. アップグレード対象バージョン# アップグレード前: PostgreSQL 12.19（EOSL） アップグレード後: PostgreSQL 15.4（サポート対象） 2.2. バージョン選択の理由# PostgreSQL 15を選択した理由： 安定性が確認されている 長期サポートが期待できる 12系からの移行が比較的スムーズ 3. コスト遷移# グラフの水色部分がRDSです。 3.1. コスト変化の詳細# 2月まで: 通常のRDS料金 3月1日〜: Extended Support料金により大幅増加 3月8日頃: 検証環境バージョンアップ（コスト削減効果確認） 3月20日頃: 本番環境バージョンアップ（コスト正常化） 3月1日にコストが跳ね上がっているのがわかります。 バージョンアップ後、RDSのコストは2月までと同程度に戻っています。 微信 支付宝","scraped_at":"2025-07-12T21:17:02.366751675+09:00","word_count":51,"content_hash":"228943fec467d4344cceaa7bfa03c45e"}
{"url":"https://yamada-tech-memo.netlify.app/posts/rds_force_ssl/","title":"RDSバージョンアップは強制SSLがデフォだったから、ツールが使えなくなった件","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRDSにPostgresqlを使用しています。\u003c/p\u003e\n\u003cp\u003eバージョン12を使用していましたが、サポート終了となり利用料金が上がります。そのため、バージョンを16に変更しました。\u003c/p\u003e\n\u003cp\u003e検証環境のバージョンを16にあげて、2週間動かしていました。で、特に問題がなかったので、本番環境もバージョンをあげました。\u003c/p\u003e\n\u003cp\u003eそしたら、データベースをメンテするのに使用している\u003ca href=\"https://a5m2.mmatsubara.com/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eA5:SQL Mk-2\u003c/a\u003eで接続できないという申告がありました。このツールはWindows用のツールです。このツールを動かすためにEC2にWindowsServer2022を入れて動かしていました。\u003c/p\u003e\n\u003ch2 id=\"2-事象をもう少し詳しく\"\u003e2. 事象をもう少し詳しく\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-事象をもう少し詳しく\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e接続しようとすると、以下のメッセージが出ます。\u003ccode\u003eno encryption\u003c/code\u003eとあるので、TLS/SSL関連とあたりをつけます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eno pg_hba.conf entry for host “10.12.1.38”, user “xxxuser”, database “dbname”, no encryption\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e調査すると、以下の記事にあるようにPostgresqlの15から強制的にSSLを使用するようになったみたいです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zenn.dev/ncdc/articles/bbc72e7522c144\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eRDSのPostgre15からSSL通信がデフォルトでONになって接続エラーが発生した件\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"3-ssl通信したくて試したこと\"\u003e3. SSL通信したくて、試したこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-ssl通信したくて試したこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eツールの接続設定で、「SSLを使用する」設定をONにしました。しかし、以下のメッセージです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eThe other side has sent a failure alert: [40]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eエラーコード40はハンドシェイク中のエラーなので、以下を考えました。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCA証明書が入ってない\u003c/li\u003e\n\u003cli\u003e暗号スイートの不一致\u003c/li\u003e\n\u003cli\u003eTLSバージョンの不一致\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eというわけで、CA証明書等を以下からダウンロードして、インポートしました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eSSL/TLS を使用した DB インスタンスまたはクラスターへの接続の暗号化 - Amazon Relational Database Service\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eが、NG。。。\u003c/p\u003e\n\u003cp\u003e暗号スイートやTLSバージョンの不一致はツール問題だと思い、TLSは諦めました。。。。←悔しい。\u003c/p\u003e\n\u003ch2 id=\"4-対応\"\u003e4. 対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e強制SSLをやめて、ツールはそのまま暗号化しないで通信するようにしました。Linuxだと問題なく通信できるんですけどね。。。\u003c/p\u003e\n\u003cp\u003e対応の流れは以下です。\u003c/p\u003e\n\u003ch3 id=\"41-dbインスタンスパラメータグループ作成\"\u003e4.1. DBインスタンスパラメータグループ作成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#41-dbインスタンスパラメータグループ作成\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eこれに「rds.force_ssl」に「0（無効）」を設定します。\u003c/p\u003e\n\u003ch3 id=\"42-dbインスタンスに適用\"\u003e4.2. DBインスタンスに適用\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#42-dbインスタンスに適用\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e上で作成したDBインスタンスパラメータグループをDBインスタンスに適用する。\u003c/p\u003e\n\u003ch3 id=\"43-db再起動\"\u003e4.3. DB再起動\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#43-db再起動\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e適用したDBインスタンスパラメータグループを有効にするため、DBを手動で再起動する。\u003c/p\u003e\n\u003cp\u003eちなみに、この再起動を自分でやることがわからず、30分ぐらい溶かしました。\u003c/p\u003e\n\u003cp\u003eRDSの設定欄には作成した「DBインスタンスパラメータグループ」があるので、適用されていると思い込んでました。しかし、再起動して初めて有効になるのでした。\u003c/p\u003e\n\u003ch2 id=\"5-terraformのコード\"\u003e5. terraformのコード\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#5-terraformのコード\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようにDBインスタンスパラメータグループを作成します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eresource \u0026#34;aws_db_parameter_group\u0026#34; \u0026#34;this\u0026#34; {\n  name        = \u0026#34;${var.env}-ars-no-ssl-parameter\u0026#34;\n  family      = \u0026#34;postgres16\u0026#34; \n  description = \u0026#34;Custom parameter group with rds.force_ssl disabled\u0026#34;\n\n  parameter {\n    name  = \u0026#34;rds.force_ssl\u0026#34;\n    value = \u0026#34;0\u0026#34;\n    apply_method = \u0026#34;immediate\u0026#34;  # immediateでも手動再起動が必要\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e既存のデータベース定義に入れます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_db_instance\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;db\u0026#34;\u003c/span\u003e {\n\n  \u003cspan style=\"color:#ef6155\"\u003e〜省略〜\u003c/span\u003e\n\n  \u003cspan style=\"color:#06b6ef\"\u003edb_name\u003c/span\u003e                 = var.data\u003cspan style=\"color:#06b6ef\"\u003ebase_name\u003c/span\u003e\n\n　\u003cspan style=\"color:#ef6155\"\u003e〜省略〜\u003c/span\u003e\n\n  \u003cspan style=\"color:#06b6ef\"\u003eparameter_group_name\u003c/span\u003e    = \u003cspan style=\"color:#06b6ef\"\u003eaws_db_parameter_group\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e　\u003cspan style=\"color:#ef6155\"\u003e←\u003c/span\u003e　\u003cspan style=\"color:#ef6155\"\u003e適用する\u003c/span\u003e\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# RDSにPostgresqlを使用しています。 バージョン12を使用していましたが、サポート終了となり利用料金が上がります。そのため、バージョンを16に変更しました。 検証環境のバージョンを16にあげて、2週間動かしていました。で、特に問題がなかったので、本番環境もバージョンをあげました。 そしたら、データベースをメンテするのに使用しているA5:SQL Mk-2で接続できないという申告がありました。このツールはWindows用のツールです。このツールを動かすためにEC2にWindowsServer2022を入れて動かしていました。 2. 事象をもう少し詳しく# 接続しようとすると、以下のメッセージが出ます。no encryptionとあるので、TLS/SSL関連とあたりをつけます。 no pg_hba.conf entry for host “10.12.1.38”, user “xxxuser”, database “dbname”, no encryption 調査すると、以下の記事にあるようにPostgresqlの15から強制的にSSLを使用するようになったみたいです。 RDSのPostgre15からSSL通信がデフォルトでONになって接続エラーが発生した件 3. SSL通信したくて、試したこと# ツールの接続設定で、「SSLを使用する」設定をONにしました。しかし、以下のメッセージです。 The other side has sent a failure alert: [40] エラーコード40はハンドシェイク中のエラーなので、以下を考えました。 CA証明書が入ってない 暗号スイートの不一致 TLSバージョンの不一致 というわけで、CA証明書等を以下からダウンロードして、インポートしました。 SSL/TLS を使用した DB インスタンスまたはクラスターへの接続の暗号化 - Amazon Relational Database Service が、NG。。。 暗号スイートやTLSバージョンの不一致はツール問題だと思い、TLSは諦めました。。。。←悔しい。 4. 対応# 強制SSLをやめて、ツールはそのまま暗号化しないで通信するようにしました。Linuxだと問題なく通信できるんですけどね。。。 対応の流れは以下です。 4.1. DBインスタンスパラメータグループ作成# これに「rds.force_ssl」に「0（無効）」を設定します。 4.2. DBインスタンスに適用# 上で作成したDBインスタンスパラメータグループをDBインスタンスに適用する。 4.3. DB再起動# 適用したDBインスタンスパラメータグループを有効にするため、DBを手動で再起動する。 ちなみに、この再起動を自分でやることがわからず、30分ぐらい溶かしました。 RDSの設定欄には作成した「DBインスタンスパラメータグループ」があるので、適用されていると思い込んでました。しかし、再起動して初めて有効になるのでした。 5. terraformのコード# 以下のようにDBインスタンスパラメータグループを作成します。 resource \"aws_db_parameter_group\" \"this\" { name = \"${var.env}-ars-no-ssl-parameter\" family = \"postgres16\" description = \"Custom parameter group with rds.force_ssl disabled\" parameter { name = \"rds.force_ssl\" value = \"0\" apply_method = \"immediate\" # immediateでも手動再起動が必要 } } 既存のデータベース定義に入れます。 resource \"aws_db_instance\" \"db\" { 〜省略〜 db_name = var.database_name 　〜省略〜 parameter_group_name = aws_db_parameter_group.this.name　←　適用する } 微信 支付宝","scraped_at":"2025-07-12T21:17:03.073425787+09:00","word_count":122,"content_hash":"48129f8b51225c29fe1db50187448bd4"}
{"url":"https://yamada-tech-memo.netlify.app/posts/rds-eosl-cost-up/","title":"RDS(postgresql12)のサポート終了。だから、利用料が上がった","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAWSでRDSのPostgresqlを使ってます。\u003c/p\u003e\n\u003cp\u003eバージョン12.19を使用しているのですが、2月末でサポートが終了しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/PostgreSQLReleaseNotes/postgresql-release-calendar.html\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eAmazon RDS for PostgreSQL のリリースカレンダー - Amazon Relational Database Service\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"コストアップ\"\u003eコストアップ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#コストアップ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eサポートが終了しても、使うことはできます。\u003c/p\u003e\n\u003cp\u003eただ、使用料が上がるのです。\u003c/p\u003e\n\u003cp\u003eどれくらい上がるかは、以下に記載されています。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://aws.amazon.com/jp/rds/postgresql/pricing/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003e料金 - Amazon RDS for PostgreSQL | AWS\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRDS for PostgreSQL 12 にインスタンスがある場合、このバージョンは 2025 年 2 月 28 日に標準サポートが終了します。米国東部 (オハイオ) にデプロイする場合、2025 年 3 月 1 日から 2027 年 2 月 28 日までの間、vCPU 時間あたり 0.100 USD の料金が発生します。2027 年 3 月 1 日以降、vCPU 時間あたり 0.200 USD の料金が発生します。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e怖い。。。\u003c/p\u003e\n\u003ch2 id=\"実際のコスト\"\u003e実際のコスト\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#実際のコスト\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eコストエクスプローラーだと以下のようになってました。RDSの料金が3月1日から6倍と、ドカっと増えています。\u003c/p\u003e\n\u003cp\u003eもう少し細かくみてみると、RDSは2.3ドル/日ぐらいだったのが、13.8ドル/日ぐらいに上昇しました。\u003c/p\u003e\n\u003cp\u003e怖いからバージョンアップを避けていました。なので、コストアップはわかっちゃいたのですが、やっぱりグラフで見える化すると恐怖を感じます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./cost_explorer.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# AWSでRDSのPostgresqlを使ってます。 バージョン12.19を使用しているのですが、2月末でサポートが終了しました。 Amazon RDS for PostgreSQL のリリースカレンダー - Amazon Relational Database Service コストアップ# サポートが終了しても、使うことはできます。 ただ、使用料が上がるのです。 どれくらい上がるかは、以下に記載されています。 料金 - Amazon RDS for PostgreSQL | AWS RDS for PostgreSQL 12 にインスタンスがある場合、このバージョンは 2025 年 2 月 28 日に標準サポートが終了します。米国東部 (オハイオ) にデプロイする場合、2025 年 3 月 1 日から 2027 年 2 月 28 日までの間、vCPU 時間あたり 0.100 USD の料金が発生します。2027 年 3 月 1 日以降、vCPU 時間あたり 0.200 USD の料金が発生します。 怖い。。。 実際のコスト# コストエクスプローラーだと以下のようになってました。RDSの料金が3月1日から6倍と、ドカっと増えています。 もう少し細かくみてみると、RDSは2.3ドル/日ぐらいだったのが、13.8ドル/日ぐらいに上昇しました。 怖いからバージョンアップを避けていました。なので、コストアップはわかっちゃいたのですが、やっぱりグラフで見える化すると恐怖を感じます。 微信 支付宝","scraped_at":"2025-07-12T21:17:03.239470394+09:00","word_count":69,"content_hash":"c2f81e361d39a802177be230bd9d1746"}
{"url":"https://yamada-tech-memo.netlify.app/posts/nvidia-drver-update/","title":"録画サーバのビデオカードが動かくなった","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eいつものようにエンコードしようとすると、ゼロバイトのファイルができるだけでエンコードできません。\u003c/p\u003e\n\u003cp\u003envidia-smiすると、以下のメッセージが表示されました。「ドライバーとライブラリのバージョンが一致していない」という意味です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eFailed to initialize NVML: Driver/library version mismatch\nNVML library version: 550.144\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこのままだと動画のエンコードができないため、困ります。\u003c/p\u003e\n\u003cp\u003eこの記事はライムライとドライバをアップデートしたので、その記録です。\u003c/p\u003e\n\u003ch2 id=\"2-情報を記録\"\u003e2. 情報を記録\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-情報を記録\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eサーバは以下のようになっています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecat /etc/os-release \n\u003cspan style=\"color:#ef6155\"\u003ePRETTY_NAME\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;Ubuntu 22.04.5 LTS\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003eNAME\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;Ubuntu\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003eVERSION_ID\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;22.04\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003eVERSION\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;22.04.5 LTS (Jammy Jellyfish)\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003eVERSION_CODENAME\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003ejammy\n\u003cspan style=\"color:#ef6155\"\u003eID\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003eubuntu\n\u003cspan style=\"color:#ef6155\"\u003eID_LIKE\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003edebian\n\u003cspan style=\"color:#ef6155\"\u003eHOME_URL\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;https://www.ubuntu.com/\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003eSUPPORT_URL\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;https://help.ubuntu.com/\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003eBUG_REPORT_URL\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;https://bugs.launchpad.net/ubuntu/\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003ePRIVACY_POLICY_URL\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003eUBUNTU_CODENAME\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003ejammy\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eビデオカードの確認。GeForce GTX 1650を確認できます。そろそろAIに強いものに変更したい。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e lspci | grep -i nvidia\n01:00.0 VGA compatible controller: NVIDIA Corporation TU116 [GeForce GTX 1650] (rev a1)\n01:00.1 Audio device: NVIDIA Corporation TU116 High Definition Audio Controller (rev a1)\n01:00.2 USB controller: NVIDIA Corporation TU116 USB 3.1 Host Controller (rev a1)\n01:00.3 Serial bus controller: NVIDIA Corporation TU116 USB Type-C UCSI Controller (rev a1)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下をみると、\u003ccode\u003edriver   : nvidia-driver-570 - third-party non-free recommended\u003c/code\u003eがおすすめなようです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eubuntu-drivers devices\n== /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 ==\nmodalias : pci:v000010DEd00002188sv00001462sd00008D97bc03sc00i00\nvendor   : NVIDIA Corporation\nmodel    : TU116 [GeForce GTX 1650]\nmanual_install: True\ndriver   : nvidia-driver-555 - third-party non-free\ndriver   : nvidia-driver-470-server - distro non-free\ndriver   : nvidia-driver-470 - distro non-free\ndriver   : nvidia-driver-535 - third-party non-free\ndriver   : nvidia-driver-550 - third-party non-free\ndriver   : nvidia-driver-515 - third-party non-free\ndriver   : nvidia-driver-450-server - distro non-free\ndriver   : nvidia-driver-535-server - distro non-free\ndriver   : nvidia-driver-565-open - third-party non-free\ndriver   : nvidia-driver-535-open - distro non-free\ndriver   : nvidia-driver-565 - third-party non-free\ndriver   : nvidia-driver-525 - third-party non-free\ndriver   : nvidia-driver-535-server-open - distro non-free\ndriver   : nvidia-driver-545 - third-party non-free\ndriver   : nvidia-driver-570-open - third-party non-free\ndriver   : nvidia-driver-570 - third-party non-free recommended\ndriver   : nvidia-driver-545-open - distro non-free\ndriver   : nvidia-driver-520 - third-party non-free\ndriver   : nvidia-driver-570-server - distro non-free\ndriver   : nvidia-driver-560 - third-party non-free\ndriver   : nvidia-driver-555-open - third-party non-free\ndriver   : nvidia-driver-570-server-open - distro non-free\ndriver   : nvidia-driver-550-open - third-party non-free\ndriver   : nvidia-driver-560-open - third-party non-free\ndriver   : xserver-xorg-video-nouveau - distro free builtin\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003envidia-container-toolkitのバージョンも確認。\u003c/p\u003e\n\u003cp\u003e参考\u003ca href=\"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eInstalling the NVIDIA Container Toolkit — NVIDIA Container Toolkit\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003envidia-container-toolkit -version\u003c/code\u003eします。1.17.4が入ってます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003envidia-container-toolkit -version\nNVIDIA Container Runtime Hook version 1.17.4\ncommit: 9b69590c7428470a72f2ae05f826412976af1395\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-手順\"\u003e3. 手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003esudo add-apt-repository ppa:graphics-drivers/ppaでリポジトリをアップデート\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo add-apt-repository ppa:graphics-drivers/ppa\nPPA publishes dbgsym, you may need to include \u003cspan style=\"color:#48b685\"\u003e\u0026#39;main/debug\u0026#39;\u003c/span\u003e component\nリポジトリ: \u003cspan style=\"color:#48b685\"\u003e\u0026#39;deb https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu/ jammy main\u0026#39;\u003c/span\u003e\n概要：\nFresh drivers from upstream, currently shipping Nvidia.\n\n\u003cspan style=\"color:#776e71\"\u003e## Current releases\u003c/span\u003e\n\nCurrent production branch release: 550.107.02\nCurrent new feature branch release: 555.58.02\nCurrent beta release: 560.28.03\n\n\u003cspan style=\"color:#776e71\"\u003e## Legacy releases\u003c/span\u003e\n\n470.256.02 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003ex86_64\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e - GKxxx “Kepler” GPUs\n390.157 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003ex86 / x86_64 / ARM\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e - GF1xx “Fermi” GPUs \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e*​\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n340.108 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003ex86 / x86_64\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e - GeForce \u003cspan style=\"color:#f99b15\"\u003e8\u003c/span\u003e and \u003cspan style=\"color:#f99b15\"\u003e9\u003c/span\u003e series GPUs \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e*​\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n304.137 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003ex86 / x86_64\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e - GeForce \u003cspan style=\"color:#f99b15\"\u003e6\u003c/span\u003e and \u003cspan style=\"color:#f99b15\"\u003e7\u003c/span\u003e series GPUs \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e*​\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n173.14.39 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003ex86 / x86_64\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e - GeForce \u003cspan style=\"color:#f99b15\"\u003e5\u003c/span\u003e series GPUs \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e*​\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n96.43.23 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003ex86 / x86_64\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e - GeForce \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e through GeForce \u003cspan style=\"color:#f99b15\"\u003e4\u003c/span\u003e series GPUs \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e*​\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n71.86.15 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003ex86 / x86_64\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e - Riva TNT, TNT2, GeForce, and some GeForce \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e GPUs \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e*​\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n\u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e*​\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e These releases are no longer being maintained. Please see Support timeframes \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e Unix legacy GPU releases \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e more details. https://nvidia.custhelp.com/app/answers/detail/a_id/3142\n\n\u003cspan style=\"color:#776e71\"\u003e## What we\u0026#39;re working on right now:\u003c/span\u003e\n\n- Normal driver updates\n- Help Wanted: Mesa Updates \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e Intel/AMD users, ping us \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e you want to help \u003cspan style=\"color:#815ba4\"\u003edo\u003c/span\u003e this work, we\u003cspan style=\"color:#48b685\"\u003e\u0026#39;re shorthanded.\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e## WARNINGS:\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003eThis PPA is currently in testing, you should be experienced with packaging before you dive in here:\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003eVolunteers welcome!\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e### How you can help:\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e## Install PTS and benchmark your gear:\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e    sudo apt-get install phoronix-test-suite\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003eRun the benchmark:\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e    phoronix-test-suite default-benchmark openarena xonotic tesseract gputest unigine-valley\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003eand then say yes when it asks you to submit your results to openbenchmarking.org. Then grab a cup of coffee, it takes a bit for the benchmarks to run. Depending on the version of Ubuntu you\u0026#39;\u003c/span\u003ere using it might preferable \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e you to grabs PTS from upstream directly: http://www.phoronix-test-suite.com/?k\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003edownloads\n\n\u003cspan style=\"color:#776e71\"\u003e## Share your results with the community:\u003c/span\u003e\n\nPost a link to your results \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eor any other feedback to\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: https://launchpad.net/~graphics-drivers-testers\n\nRemember to rerun and resubmit the benchmarks after driver upgrades, this will allow us to gather a bunch of data on performance that we can share with everybody.\n\nIf you run into old documentation referring to other PPAs, you can help us by consolidating references to this PPA.\n\nIf someone wants to go ahead and start prototyping on \u003cspan style=\"color:#48b685\"\u003e`\u003c/span\u003esoftware-properties-gtk\u003cspan style=\"color:#48b685\"\u003e`\u003c/span\u003e on what the GUI should look like, please start hacking!\n\n\u003cspan style=\"color:#776e71\"\u003e## Help us Help You!\u003c/span\u003e\n\nWe use the donation funds to get the developers hardware to test and upload these drivers, please consider donating to the \u003cspan style=\"color:#48b685\"\u003e\u0026#34;community\u0026#34;\u003c/span\u003e slider on the donation page \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e you\u003cspan style=\"color:#ef6155\"\u003e\u0026#39;\u003c/span\u003ere loving this PPA:\n\nhttp://www.ubuntu.com/download/desktop/contribute\nより詳しい情報: https://launchpad.net/~graphics-drivers/+archive/ubuntu/ppa\nリポジトリを追加しています。\n\n追加するかを確認されるので、追加すると\n\nFound existing deb entry in /etc/apt/sources.list.d/graphics-drivers-ubuntu-ppa-jammy.list\nAdding deb entry to /etc/apt/sources.list.d/graphics-drivers-ubuntu-ppa-jammy.list\nFound existing deb-src entry in /etc/apt/sources.list.d/graphics-drivers-ubuntu-ppa-jammy.list\nAdding disabled deb-src entry to /etc/apt/sources.list.d/graphics-drivers-ubuntu-ppa-jammy.list\nAdding key to /etc/apt/trusted.gpg.d/graphics-drivers-ubuntu-ppa.gpg with fingerprint 2388FF3BE10A76F638F80723FCAE110B1118213C\nヒット:1 https://deb.nodesource.com/node_21.x nodistro InRelease\nヒット:2 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease                                                              \nヒット:3 https://download.docker.com/linux/ubuntu jammy InRelease                                                                                           \nヒット:4 https://nvidia.github.io/libnvidia-container/stable/deb/amd64  InRelease                                                                           \n取得:5 http://security.ubuntu.com/ubuntu jammy-security InRelease \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e129\u003c/span\u003e kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e                                                                                  \nヒット:6 http://jp.archive.ubuntu.com/ubuntu jammy InRelease                                                                 \n取得:7 http://jp.archive.ubuntu.com/ubuntu jammy-updates InRelease \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e128\u003c/span\u003e kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e                                                   \nヒット:8 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease                                           \n取得:9 http://security.ubuntu.com/ubuntu jammy-security/main amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e43.0 kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:10 http://jp.archive.ubuntu.com/ubuntu jammy-backports InRelease \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e127\u003c/span\u003e kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e                                             \nヒット:11 https://ppa.launchpadcontent.net/longsleep/golang-backports/ubuntu jammy InRelease   \n取得:12 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e208\u003c/span\u003e B\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:13 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e126\u003c/span\u003e kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:14 http://security.ubuntu.com/ubuntu jammy-security/multiverse amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e208\u003c/span\u003e B\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e       \n取得:15 http://jp.archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e2,378 kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:16 http://jp.archive.ubuntu.com/ubuntu jammy-updates/main i386 Packages \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e765\u003c/span\u003e kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:17 http://jp.archive.ubuntu.com/ubuntu jammy-updates/main amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e103\u003c/span\u003e kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:18 http://jp.archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e212\u003c/span\u003e B\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:19 http://jp.archive.ubuntu.com/ubuntu jammy-updates/universe i386 Packages \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e760\u003c/span\u003e kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:20 http://jp.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e1,193 kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:21 http://jp.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e359\u003c/span\u003e kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:22 http://jp.archive.ubuntu.com/ubuntu jammy-updates/multiverse amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e940\u003c/span\u003e B\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:23 http://jp.archive.ubuntu.com/ubuntu jammy-backports/main amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e7,048 B\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:24 http://jp.archive.ubuntu.com/ubuntu jammy-backports/restricted amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e212\u003c/span\u003e B\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:25 http://jp.archive.ubuntu.com/ubuntu jammy-backports/universe amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e17.7 kB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n取得:26 http://jp.archive.ubuntu.com/ubuntu jammy-backports/multiverse amd64 DEP-11 Metadata \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e212\u003c/span\u003e B\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n6,137 kB を 3秒 で取得しました \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e2,071 kB/s\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e                       \nパッケージリストを読み込んでいます... 完了\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"4-apt-updateとupgrade\"\u003e4. apt updateとupgrade\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-apt-updateとupgrade\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003esudo apt update\u003c/code\u003eします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eヒット:1 https://nvidia.github.io/libnvidia-container/stable/deb/amd64  InRelease\nヒット:2 https://deb.nodesource.com/node_21.x nodistro InRelease                                                                                            \nヒット:3 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease                                                              \nヒット:4 https://download.docker.com/linux/ubuntu jammy InRelease                                                                                           \nヒット:5 http://security.ubuntu.com/ubuntu jammy-security InRelease                                                                                         \nヒット:6 http://jp.archive.ubuntu.com/ubuntu jammy InRelease                                                                                                \nヒット:7 http://jp.archive.ubuntu.com/ubuntu jammy-updates InRelease                         \nヒット:8 http://jp.archive.ubuntu.com/ubuntu jammy-backports InRelease\nヒット:9 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\nヒット:10 https://ppa.launchpadcontent.net/longsleep/golang-backports/ubuntu jammy InRelease\nパッケージリストを読み込んでいます... 完了\n依存関係ツリーを作成しています... 完了\n状態情報を読み取っています... 完了        \nアップグレードできるパッケージが \u003cspan style=\"color:#f99b15\"\u003e55\u003c/span\u003e 個あります。表示するには \u003cspan style=\"color:#48b685\"\u003e\u0026#39;apt list --upgradable\u0026#39;\u003c/span\u003e を実行してください。\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003esudo apt upgrade\u003c/code\u003eをします。\u003c/p\u003e\n\u003cp\u003eそして、再起動。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003envidia-smi\u003c/code\u003eすると、こんな感じで表示されるようになりました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eSun Mar  9 08:32:54 2025       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 550.144.03             Driver Version: 550.144.03     CUDA Version: 12.4     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  NVIDIA GeForce GTX 1650        Off |   00000000:01:00.0 Off |                  N/A |\n| 30%   36C    P0             19W /   75W |      30MiB /   4096MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n                                                                                         \n+-----------------------------------------------------------------------------------------+\n| Processes:                                                                              |\n|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n|        ID   ID                                                               Usage      |\n|=========================================================================================|\n|    0   N/A  N/A       923      G   /usr/lib/xorg/Xorg                             22MiB |\n|    0   N/A  N/A      1236      G   /usr/bin/gnome-shell                            3MiB |\n|    0   N/A  N/A      1785      G   /usr/libexec/gnome-initial-setup                1MiB |\n+-----------------------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"5-ドライバーもアップデートする\"\u003e5. ドライバーもアップデートする\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#5-ドライバーもアップデートする\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eついでに、ドライバーもアップデートします。\u003c/p\u003e\n\u003cp\u003envidia-driver-570がおすすめされていたので、これを入れます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt install -y nvidia-driver-570\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eアップデートされました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003envidia-smi\nSun Mar  9 10:48:10 2025       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 570.124.06             Driver Version: 570.124.06     CUDA Version: 12.8     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  NVIDIA GeForce GTX 1650        Off |   00000000:01:00.0 Off |                  N/A |\n| 30%   34C    P8              4W /   75W |      27MiB /   4096MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n                                                                                         \n+-----------------------------------------------------------------------------------------+\n| Processes:                                                                              |\n|  GPU   GI   CI              PID   Type   Process name                        GPU Memory |\n|        ID   ID                                                               Usage      |\n|=========================================================================================|\n|    0   N/A  N/A             966      G   /usr/lib/xorg/Xorg                       19MiB |\n|    0   N/A  N/A            1254      G   /usr/bin/gnome-shell                      3MiB |\n|    0   N/A  N/A            1722      G   /usr/libexec/gnome-initial-setup          2MiB |\n+-----------------------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"6-課題\"\u003e6. 課題\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#6-課題\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e録画終了後の自動エンコードが動かなくなりました。。。\u003c/p\u003e\n\u003cp\u003eなんとしないと。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# いつものようにエンコードしようとすると、ゼロバイトのファイルができるだけでエンコードできません。 nvidia-smiすると、以下のメッセージが表示されました。「ドライバーとライブラリのバージョンが一致していない」という意味です。 Failed to initialize NVML: Driver/library version mismatch NVML library version: 550.144 このままだと動画のエンコードができないため、困ります。 この記事はライムライとドライバをアップデートしたので、その記録です。 2. 情報を記録# サーバは以下のようになっています。 cat /etc/os-release PRETTY_NAME=\"Ubuntu 22.04.5 LTS\" NAME=\"Ubuntu\" VERSION_ID=\"22.04\" VERSION=\"22.04.5 LTS (Jammy Jellyfish)\" VERSION_CODENAME=jammy ID=ubuntu ID_LIKE=debian HOME_URL=\"https://www.ubuntu.com/\" SUPPORT_URL=\"https://help.ubuntu.com/\" BUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\" PRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\" UBUNTU_CODENAME=jammy ビデオカードの確認。GeForce GTX 1650を確認できます。そろそろAIに強いものに変更したい。 lspci | grep -i nvidia 01:00.0 VGA compatible controller: NVIDIA Corporation TU116 [GeForce GTX 1650] (rev a1) 01:00.1 Audio device: NVIDIA Corporation TU116 High Definition Audio Controller (rev a1) 01:00.2 USB controller: NVIDIA Corporation TU116 USB 3.1 Host Controller (rev a1) 01:00.3 Serial bus controller: NVIDIA Corporation TU116 USB Type-C UCSI Controller (rev a1) 以下をみると、driver : nvidia-driver-570 - third-party non-free recommendedがおすすめなようです。 ubuntu-drivers devices == /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 == modalias : pci:v000010DEd00002188sv00001462sd00008D97bc03sc00i00 vendor : NVIDIA Corporation model : TU116 [GeForce GTX 1650] manual_install: True driver : nvidia-driver-555 - third-party non-free driver : nvidia-driver-470-server - distro non-free driver : nvidia-driver-470 - distro non-free driver : nvidia-driver-535 - third-party non-free driver : nvidia-driver-550 - third-party non-free driver : nvidia-driver-515 - third-party non-free driver : nvidia-driver-450-server - distro non-free driver : nvidia-driver-535-server - distro non-free driver : nvidia-driver-565-open - third-party non-free driver : nvidia-driver-535-open - distro non-free driver : nvidia-driver-565 - third-party non-free driver : nvidia-driver-525 - third-party non-free driver : nvidia-driver-535-server-open - distro non-free driver : nvidia-driver-545 - third-party non-free driver : nvidia-driver-570-open - third-party non-free driver : nvidia-driver-570 - third-party non-free recommended driver : nvidia-driver-545-open - distro non-free driver : nvidia-driver-520 - third-party non-free driver : nvidia-driver-570-server - distro non-free driver : nvidia-driver-560 - third-party non-free driver : nvidia-driver-555-open - third-party non-free driver : nvidia-driver-570-server-open - distro non-free driver : nvidia-driver-550-open - third-party non-free driver : nvidia-driver-560-open - third-party non-free driver : xserver-xorg-video-nouveau - distro free builtin nvidia-container-toolkitのバージョンも確認。 参考Installing the NVIDIA Container Toolkit — NVIDIA Container Toolkit nvidia-container-toolkit -versionします。1.17.4が入ってます。 nvidia-container-toolkit -version NVIDIA Container Runtime Hook version 1.17.4 commit: 9b69590c7428470a72f2ae05f826412976af1395 3. 手順# sudo add-apt-repository ppa:graphics-drivers/ppaでリポジトリをアップデート sudo add-apt-repository ppa:graphics-drivers/ppa PPA publishes dbgsym, you may need to include 'main/debug' component リポジトリ: 'deb https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu/ jammy main' 概要： Fresh drivers from upstream, currently shipping Nvidia. ## Current releases Current production branch release: 550.107.02 Current new feature branch release: 555.58.02 Current beta release: 560.28.03 ## Legacy releases 470.256.02 (x86_64) - GKxxx “Kepler” GPUs 390.157 (x86 / x86_64 / ARM) - GF1xx “Fermi” GPUs (*​) 340.108 (x86 / x86_64) - GeForce 8 and 9 series GPUs (*​) 304.137 (x86 / x86_64) - GeForce 6 and 7 series GPUs (*​) 173.14.39 (x86 / x86_64) - GeForce 5 series GPUs (*​) 96.43.23 (x86 / x86_64) - GeForce 2 through GeForce 4 series GPUs (*​) 71.86.15 (x86 / x86_64) - Riva TNT, TNT2, GeForce, and some GeForce 2 GPUs (*​) (*​) These releases are no longer being maintained. Please see Support timeframes for Unix legacy GPU releases for more details. https://nvidia.custhelp.com/app/answers/detail/a_id/3142 ## What we're working on right now: - Normal driver updates - Help Wanted: Mesa Updates for Intel/AMD users, ping us if you want to help do this work, we're shorthanded. ## WARNINGS: This PPA is currently in testing, you should be experienced with packaging before you dive in here: Volunteers welcome! ### How you can help: ## Install PTS and benchmark your gear: sudo apt-get install phoronix-test-suite Run the benchmark: phoronix-test-suite default-benchmark openarena xonotic tesseract gputest unigine-valley and then say yes when it asks you to submit your results to openbenchmarking.org. Then grab a cup of coffee, it takes a bit for the benchmarks to run. Depending on the version of Ubuntu you're using it might preferable for you to grabs PTS from upstream directly: http://www.phoronix-test-suite.com/?k=downloads ## Share your results with the community: Post a link to your results (or any other feedback to): https://launchpad.net/~graphics-drivers-testers Remember to rerun and resubmit the benchmarks after driver upgrades, this will allow us to gather a bunch of data on performance that we can share with everybody. If you run into old documentation referring to other PPAs, you can help us by consolidating references to this PPA. If someone wants to go ahead and start prototyping on `software-properties-gtk` on what the GUI should look like, please start hacking! ## Help us Help You! We use the donation funds to get the developers hardware to test and upload these drivers, please consider donating to the \"community\" slider on the donation page if you're loving this PPA: http://www.ubuntu.com/download/desktop/contribute より詳しい情報: https://launchpad.net/~graphics-drivers/+archive/ubuntu/ppa リポジトリを追加しています。 追加するかを確認されるので、追加すると Found existing deb entry in /etc/apt/sources.list.d/graphics-drivers-ubuntu-ppa-jammy.list Adding deb entry to /etc/apt/sources.list.d/graphics-drivers-ubuntu-ppa-jammy.list Found existing deb-src entry in /etc/apt/sources.list.d/graphics-drivers-ubuntu-ppa-jammy.list Adding disabled deb-src entry to /etc/apt/sources.list.d/graphics-drivers-ubuntu-ppa-jammy.list Adding key to /etc/apt/trusted.gpg.d/graphics-drivers-ubuntu-ppa.gpg with fingerprint 2388FF3BE10A76F638F80723FCAE110B1118213C ヒット:1 https://deb.nodesource.com/node_21.x nodistro InRelease ヒット:2 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64 InRelease ヒット:3 https://download.docker.com/linux/ubuntu jammy InRelease ヒット:4 https://nvidia.github.io/libnvidia-container/stable/deb/amd64 InRelease 取得:5 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB] ヒット:6 http://jp.archive.ubuntu.com/ubuntu jammy InRelease 取得:7 http://jp.archive.ubuntu.com/ubuntu jammy-updates InRelease [128 kB] ヒット:8 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease 取得:9 http://security.ubuntu.com/ubuntu jammy-security/main amd64 DEP-11 Metadata [43.0 kB] 取得:10 http://jp.archive.ubuntu.com/ubuntu jammy-backports InRelease [127 kB] ヒット:11 https://ppa.launchpadcontent.net/longsleep/golang-backports/ubuntu jammy InRelease 取得:12 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 DEP-11 Metadata [208 B] 取得:13 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 DEP-11 Metadata [126 kB] 取得:14 http://security.ubuntu.com/ubuntu jammy-security/multiverse amd64 DEP-11 Metadata [208 B] 取得:15 http://jp.archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [2,378 kB] 取得:16 http://jp.archive.ubuntu.com/ubuntu jammy-updates/main i386 Packages [765 kB] 取得:17 http://jp.archive.ubuntu.com/ubuntu jammy-updates/main amd64 DEP-11 Metadata [103 kB] 取得:18 http://jp.archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 DEP-11 Metadata [212 B] 取得:19 http://jp.archive.ubuntu.com/ubuntu jammy-updates/universe i386 Packages [760 kB] 取得:20 http://jp.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages [1,193 kB] 取得:21 http://jp.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 DEP-11 Metadata [359 kB] 取得:22 http://jp.archive.ubuntu.com/ubuntu jammy-updates/multiverse amd64 DEP-11 Metadata [940 B] 取得:23 http://jp.archive.ubuntu.com/ubuntu jammy-backports/main amd64 DEP-11 Metadata [7,048 B] 取得:24 http://jp.archive.ubuntu.com/ubuntu jammy-backports/restricted amd64 DEP-11 Metadata [212 B] 取得:25 http://jp.archive.ubuntu.com/ubuntu jammy-backports/universe amd64 DEP-11 Metadata [17.7 kB] 取得:26 http://jp.archive.ubuntu.com/ubuntu jammy-backports/multiverse amd64 DEP-11 Metadata [212 B] 6,137 kB を 3秒 で取得しました (2,071 kB/s) パッケージリストを読み込んでいます... 完了 4. apt updateとupgrade# sudo apt updateします。 ヒット:1 https://nvidia.github.io/libnvidia-container/stable/deb/amd64 InRelease ヒット:2 https://deb.nodesource.com/node_21.x nodistro InRelease ヒット:3 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64 InRelease ヒット:4 https://download.docker.com/linux/ubuntu jammy InRelease ヒット:5 http://security.ubuntu.com/ubuntu jammy-security InRelease ヒット:6 http://jp.archive.ubuntu.com/ubuntu jammy InRelease ヒット:7 http://jp.archive.ubuntu.com/ubuntu jammy-updates InRelease ヒット:8 http://jp.archive.ubuntu.com/ubuntu jammy-backports InRelease ヒット:9 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease ヒット:10 https://ppa.launchpadcontent.net/longsleep/golang-backports/ubuntu jammy InRelease パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています... 完了 状態情報を読み取っています... 完了 アップグレードできるパッケージが 55 個あります。表示するには 'apt list --upgradable' を実行してください。 sudo apt upgradeをします。 そして、再起動。 nvidia-smiすると、こんな感じで表示されるようになりました。 Sun Mar 9 08:32:54 2025 +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 550.144.03 Driver Version: 550.144.03 CUDA Version: 12.4 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA GeForce GTX 1650 Off | 00000000:01:00.0 Off | N/A | | 30% 36C P0 19W / 75W | 30MiB / 4096MiB | 0% Default | | | | N/A | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | 0 N/A N/A 923 G /usr/lib/xorg/Xorg 22MiB | | 0 N/A N/A 1236 G /usr/bin/gnome-shell 3MiB | | 0 N/A N/A 1785 G /usr/libexec/gnome-initial-setup 1MiB | +-----------------------------------------------------------------------------------------+ 5. ドライバーもアップデートする# ついでに、ドライバーもアップデートします。 nvidia-driver-570がおすすめされていたので、これを入れます。 sudo apt install -y nvidia-driver-570 アップデートされました。 nvidia-smi Sun Mar 9 10:48:10 2025 +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 570.124.06 Driver Version: 570.124.06 CUDA Version: 12.8 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA GeForce GTX 1650 Off | 00000000:01:00.0 Off | N/A | | 30% 34C P8 4W / 75W | 27MiB / 4096MiB | 0% Default | | | | N/A | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | 0 N/A N/A 966 G /usr/lib/xorg/Xorg 19MiB | | 0 N/A N/A 1254 G /usr/bin/gnome-shell 3MiB | | 0 N/A N/A 1722 G /usr/libexec/gnome-initial-setup 2MiB | +-----------------------------------------------------------------------------------------+ 6. 課題# 録画終了後の自動エンコードが動かなくなりました。。。 なんとしないと。 微信 支付宝","scraped_at":"2025-07-12T21:17:05.5468862+09:00","word_count":1254,"content_hash":"a2bfb0a506a558128a3dc2f82ef1c76a"}
{"url":"https://yamada-tech-memo.netlify.app/posts/cant-s3-1mb-upload/","title":"1MBを超えるファイルをS3にアップロードできない","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e画面からS3にファイルをアップロードする仕組みを構築していました。\u003c/p\u003e\n\u003cp\u003e実装はできたのですが、1MBを超えるファイルをアップロードすることができないと申告がありました。それ以下ならアップロードできるのですが、、、。\u003c/p\u003e\n\u003cp\u003eということで調査した内容です。\u003c/p\u003e\n\u003ch2 id=\"s3とalbじゃなかった\"\u003eS3とALBじゃなかった\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#s3とalbじゃなかった\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eS3の問題ではないかと考えて、S3の設定を確認しました。\u003c/p\u003e\n\u003cp\u003eしかし、アップロードサイズを制限するような設定はありません。\u003c/p\u003e\n\u003cp\u003eまた、ALBも疑いましたが、ALBもサイズ制限をするような設定はありません。\u003c/p\u003e\n\u003ch2 id=\"springだった\"\u003eSpringだった\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#springだった\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eそこで、コンテナで動いているJavaアプリを疑いました。\u003c/p\u003e\n\u003cp\u003eで、ここでCloudWatchLogsを確認します。（先にログを見るべきですね）\u003c/p\u003e\n\u003cp\u003e以下のようにログが出力されているのを確認しました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e2025-03-xxT11:06:33.025+09:00\norg.apache.tomcat.util.http.fileupload.impl.FileSizeLimitExceededException: The field file exceeds its maximum permitted size of 1048576 bytes.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eファイルアップロードの上限にかかっていることがわりました。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003espring.servlet.multipart.max-file-size\u003c/code\u003eの設定です。この設定をいれてないと、デフォルトで1MBが上限になっているのです。\u003c/p\u003e\n\u003ch2 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eapplication.yml\u003c/code\u003eに追加しました。\u003c/p\u003e\n\u003ch2 id=\"参考にした記事\"\u003e参考にした記事\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考にした記事\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://qiita.com/MizoguchiKenji/items/0aa1f2b385e73c36c24d#:~:text=spring.servlet.multipart.max%2Dfile%2Dsize,-%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\u0026amp;text=%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%AF%E3%80%8C1MB%E3%80%8D%E3%81%A7%E3%81%99%E3%80%82,%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%BE%E3%81%99%E3%80%82\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eSpring MVC ファイルのアップロード #spring - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 画面からS3にファイルをアップロードする仕組みを構築していました。 実装はできたのですが、1MBを超えるファイルをアップロードすることができないと申告がありました。それ以下ならアップロードできるのですが、、、。 ということで調査した内容です。 S3とALBじゃなかった# S3の問題ではないかと考えて、S3の設定を確認しました。 しかし、アップロードサイズを制限するような設定はありません。 また、ALBも疑いましたが、ALBもサイズ制限をするような設定はありません。 Springだった# そこで、コンテナで動いているJavaアプリを疑いました。 で、ここでCloudWatchLogsを確認します。（先にログを見るべきですね） 以下のようにログが出力されているのを確認しました。 2025-03-xxT11:06:33.025+09:00 org.apache.tomcat.util.http.fileupload.impl.FileSizeLimitExceededException: The field file exceeds its maximum permitted size of 1048576 bytes. ファイルアップロードの上限にかかっていることがわりました。 spring.servlet.multipart.max-file-sizeの設定です。この設定をいれてないと、デフォルトで1MBが上限になっているのです。 対応# application.ymlに追加しました。 参考にした記事# Spring MVC ファイルのアップロード #spring - Qiita 微信 支付宝","scraped_at":"2025-07-12T21:17:05.73174996+09:00","word_count":38,"content_hash":"0c58ec6fe806f04094464d0b1591c8f9"}
{"url":"https://yamada-tech-memo.netlify.app/posts/golangci-lint/","title":"golangで静的解析するならgolangci-lint","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003egolangでAPIを構築しています。\u003c/p\u003e\n\u003cp\u003eコードを追加するたびに手動テストするのは面倒です。\u003c/p\u003e\n\u003cp\u003eそこで、自動でテストをする仕組みを調べています。\u003c/p\u003e\n\u003cp\u003e静的解析は速くチェックできるし、フィードバックもしやすいです。そこで、golangではどんなツールがあるのか調べました。\u003c/p\u003e\n\u003ch2 id=\"静的解析はgolangci-lint\"\u003e静的解析はgolangci-lint\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#静的解析はgolangci-lint\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e静的解析は\u003ccode\u003egolang-lint\u003c/code\u003eというのがあります。\u003c/p\u003e\n\u003cp\u003eGoのソースコードのスタイルや可読性に関する基本的なチェックを行うツールです。\u003c/p\u003e\n\u003cp\u003eで、今は\u003ccode\u003egolangci-lint\u003c/code\u003eというのが一般的とのことです。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003egolangci-lint\u003c/code\u003e は、\u003ccode\u003egolint\u003c/code\u003eに加えて、\u003ccode\u003eerrcheck\u003c/code\u003e、\u003ccode\u003estaticcheck\u003c/code\u003e、\u003ccode\u003egocyclo\u003c/code\u003e、\u003ccode\u003eineffassign\u003c/code\u003eなど、多数のツールをまとめて実行します。\u003c/p\u003e\n\u003cp\u003eさらに、設定ファイル（YAML形式）を使って、各リントツールの有効/無効、警告レベルなどを細かくカスタマイズできます。\u003c/p\u003e\n\u003cp\u003eCI/CDにも組み込みやすいので、今は\u003ccode\u003egolangci-lint\u003c/code\u003e一択のようにです。\u003c/p\u003e\n\u003ch2 id=\"使い方\"\u003e使い方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#使い方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eインストール方法は以下のリンクにあります。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/golangci/golangci-lint\"\u003ehttps://github.com/golangci/golangci-lint\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e使うには以下のようにコマンドで。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egolangci-lint run -v\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eパスすると、こんな感じで出力されます。\u003c/p\u003e\n\u003cp\u003e使っている当初は指摘が3つぐらい出てまして、関数の戻り値にエラーがないか確認しなさいというのがその指摘内容でした。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eINFO golangci-lint has version 1.64.5 built with go1.24.0 from 0a603e49 on 2025-02-13T21:19:55Z \nINFO [config_reader] Config search paths: [./ /home/yamadatt/git/lambda-api-gw-go /home/yamadatt/git /home/yamadatt /home /] \nINFO [goenv] Read go env for 8.205455ms: map[string]string{\u0026#34;GOCACHE\u0026#34;:\u0026#34;/home/yamadatt/.cache/go-build\u0026#34;, \u0026#34;GOROOT\u0026#34;:\u0026#34;/home/yamadatt/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.4.linux-amd64\u0026#34;} \nINFO [lintersdb] Active 6 linters: [errcheck gosimple govet ineffassign staticcheck unused] \nINFO [loader] Go packages loading at mode 8767 (imports|types_sizes|name|compiled_files|deps|exports_file|files) took 395.600228ms \nINFO [runner/filename_unadjuster] Pre-built 0 adjustments in 1.350229ms \nINFO [linters_context/goanalysis] analyzers took 0s with no stages \nINFO [runner] Issues before processing: 26, after processing: 0 \nINFO [runner] Processors filtering stat (in/out): exclusion_rules: 26/0, invalid_issue: 26/26, exclusion_paths: 26/26, skip_files: 26/26, generated_file_filter: 26/26, path_absoluter: 26/26, filename_unadjuster: 26/26, cgo: 26/26, path_relativity: 26/26, skip_dirs: 26/26, identifier_marker: 26/26 \nINFO [runner] processing took 345.696µs with stages: exclusion_rules: 224.597µs, generated_file_filter: 84.269µs, path_relativity: 13.789µs, skip_dirs: 10.471µs, filename_unadjuster: 2.602µs, invalid_issue: 1.714µs, cgo: 1.436µs, identifier_marker: 1.436µs, max_same_issues: 1.046µs, path_absoluter: 1.03µs, nolint_filter: 702ns, sort_results: 351ns, skip_files: 276ns, fixer: 274ns, exclusion_paths: 273ns, diff: 225ns, source_code: 220ns, max_from_linter: 214ns, max_per_file_from_linter: 177ns, path_shortener: 160ns, uniq_by_line: 152ns, path_prettifier: 143ns, severity-rules: 139ns \nINFO [runner] linters took 301.521762ms with stages: goanalysis_metalinter: 301.116282ms \nINFO File cache stats: 0 entries of total size 0B \nINFO Memory: 9 samples, avg is 44.9MB, max is 62.3MB \nINFO Execution took 707.228889ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"ちなみに\"\u003eちなみに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ちなみに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003esnapでもインストールできますが、古いみたいなので上のリポジトリからインストールするのが良さそう。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo snap install golangci-lint\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eエラー内容。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eerror: This revision of snap \u0026#34;golangci-lint\u0026#34; was published using classic confinement and thus may\n       perform arbitrary system changes outside of the security sandbox that snaps are usually\n       confined to, which may put your system at risk.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# golangでAPIを構築しています。 コードを追加するたびに手動テストするのは面倒です。 そこで、自動でテストをする仕組みを調べています。 静的解析は速くチェックできるし、フィードバックもしやすいです。そこで、golangではどんなツールがあるのか調べました。 静的解析はgolangci-lint# 静的解析はgolang-lintというのがあります。 Goのソースコードのスタイルや可読性に関する基本的なチェックを行うツールです。 で、今はgolangci-lintというのが一般的とのことです。 golangci-lint は、golintに加えて、errcheck、staticcheck、gocyclo、ineffassignなど、多数のツールをまとめて実行します。 さらに、設定ファイル（YAML形式）を使って、各リントツールの有効/無効、警告レベルなどを細かくカスタマイズできます。 CI/CDにも組み込みやすいので、今はgolangci-lint一択のようにです。 使い方# インストール方法は以下のリンクにあります。 https://github.com/golangci/golangci-lint 使うには以下のようにコマンドで。 golangci-lint run -v パスすると、こんな感じで出力されます。 使っている当初は指摘が3つぐらい出てまして、関数の戻り値にエラーがないか確認しなさいというのがその指摘内容でした。 INFO golangci-lint has version 1.64.5 built with go1.24.0 from 0a603e49 on 2025-02-13T21:19:55Z INFO [config_reader] Config search paths: [./ /home/yamadatt/git/lambda-api-gw-go /home/yamadatt/git /home/yamadatt /home /] INFO [goenv] Read go env for 8.205455ms: map[string]string{\"GOCACHE\":\"/home/yamadatt/.cache/go-build\", \"GOROOT\":\"/home/yamadatt/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.4.linux-amd64\"} INFO [lintersdb] Active 6 linters: [errcheck gosimple govet ineffassign staticcheck unused] INFO [loader] Go packages loading at mode 8767 (imports|types_sizes|name|compiled_files|deps|exports_file|files) took 395.600228ms INFO [runner/filename_unadjuster] Pre-built 0 adjustments in 1.350229ms INFO [linters_context/goanalysis] analyzers took 0s with no stages INFO [runner] Issues before processing: 26, after processing: 0 INFO [runner] Processors filtering stat (in/out): exclusion_rules: 26/0, invalid_issue: 26/26, exclusion_paths: 26/26, skip_files: 26/26, generated_file_filter: 26/26, path_absoluter: 26/26, filename_unadjuster: 26/26, cgo: 26/26, path_relativity: 26/26, skip_dirs: 26/26, identifier_marker: 26/26 INFO [runner] processing took 345.696µs with stages: exclusion_rules: 224.597µs, generated_file_filter: 84.269µs, path_relativity: 13.789µs, skip_dirs: 10.471µs, filename_unadjuster: 2.602µs, invalid_issue: 1.714µs, cgo: 1.436µs, identifier_marker: 1.436µs, max_same_issues: 1.046µs, path_absoluter: 1.03µs, nolint_filter: 702ns, sort_results: 351ns, skip_files: 276ns, fixer: 274ns, exclusion_paths: 273ns, diff: 225ns, source_code: 220ns, max_from_linter: 214ns, max_per_file_from_linter: 177ns, path_shortener: 160ns, uniq_by_line: 152ns, path_prettifier: 143ns, severity-rules: 139ns INFO [runner] linters took 301.521762ms with stages: goanalysis_metalinter: 301.116282ms INFO File cache stats: 0 entries of total size 0B INFO Memory: 9 samples, avg is 44.9MB, max is 62.3MB INFO Execution took 707.228889ms ちなみに# snapでもインストールできますが、古いみたいなので上のリポジトリからインストールするのが良さそう。 sudo snap install golangci-lint エラー内容。 error: This revision of snap \"golangci-lint\" was published using classic confinement and thus may perform arbitrary system changes outside of the security sandbox that snaps are usually confined to, which may put your system at risk. 微信 支付宝","scraped_at":"2025-07-12T21:17:08.036427777+09:00","word_count":259,"content_hash":"d1bee9fec51f856dfbaf064278bdba68"}
{"url":"https://yamada-tech-memo.netlify.app/posts/golang-framework-jin/","title":"テストしやすいAPI実装を模索してみる。まずはフレームワーク。","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAWSのECSを使用してAPIを提供してます。\u003c/p\u003e\n\u003cp\u003e「とりあえず」ということで、手っ取り早く手慣れているECSで実装しました。しかし、この構成はAPIへの通信がなくてもECSでコンテナを起動し続ける必要があります。コンテナが起動しているイコール課金で、支払いがもったいなく感じます。\u003c/p\u003e\n\u003cp\u003eそこで、ひとつの方法として、ECSをやめてAPI-GW＋Lambdaを使用してAPIを実装することを検討しています。これなら通信がAPIに到達したときにLambdaを動かすので、無風時はコストがかからないはずです。さらにAPIのコール100万回（回数はうろ覚えなので後で調べる）は無料で、お小遣いに優しくなると期待できます。\u003c/p\u003e\n\u003cp\u003eそこで、もう少しAPIの実装を深堀りして、効率的な実装をしたいと考えました。さらに、可能な限り抽象化してテストしやすくしようと考えました。というのも、頻繁に触ってリリースすればいいのですが、時間が経過して機能追加しようとしたらすっかり忘れてデグレしてしまうようなことが怖いためです。なので、テストで担保できる仕組みにしようと考えました。\u003c/p\u003e\n\u003ch2 id=\"フレームワークを検討\"\u003eフレームワークを検討\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#フレームワークを検討\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eそこで調べると、APIを実装するにはフレームワークを使用するのが良さそうというのがわかりました。（いまさら、それを調べる？感はある。。。）\u003c/p\u003e\n\u003cp\u003e以下の記事を参考に比較しました。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://zenn.dev/skrikzts/articles/2ba3a0f9fca265\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eGo言語　フレームワーク比較\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/GpAraki/items/7bf6c1794d50f0fc27aa\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eGolangのフレームワーク #Go - Qiita\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://note.com/webdrawer/n/n240833faf20b\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003egolang 開発におすすめのフレームワーク5選と特徴について｜webdrawer\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ginが良さそう\"\u003eGinが良さそう\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ginが良さそう\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e初心者な自分にとって、複雑なものは避けたいです。\u003c/p\u003e\n\u003cp\u003e上の記事を読むと、シンプルなGinが良さそうです。広く使われてそうですし。\u003c/p\u003e\n\u003ch2 id=\"ファイルの構成\"\u003eファイルの構成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ファイルの構成\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eここからは調べた内容をメモ。\u003c/p\u003e\n\u003cp\u003eこのようなファイル構成により、エントリーポイント（cmd/main.go）はサーバーの起動や設定の読み込みに専念し、\n内部処理（internal/以下）はルーティング、ハンドリング、DB接続、データモデル、ミドルウェアなどの各責務ごとに分離されます。\nこれにより、コードの再利用性、テスト容易性、保守性が向上し、プロジェクトの拡張や変更がしやすくなります。\u003c/p\u003e\n\u003cp\u003eアプリケーション設定（例：DB接続情報、サーバーポートなど）を管理し、main.go で読み込みます。設定の読み込みには、例えば Viper などのライブラリを利用すると便利なようです。\u003c/p\u003e\n\u003cp\u003eファイル構成は以下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e/project-root\n├── cmd/\n│   └── main.go         // アプリケーションのエントリーポイント。Gin ルーターの初期化とサーバー起動を行う\n├── internal/\n│   ├── api/\n│   │   ├── routes.go   // Gin のルーティング設定。エンドポイントとハンドラーの紐付けを記述\n│   │   └── handlers.go // 各エンドポイントのリクエスト処理（GET/POSTなど）を実装\n│   ├── db/\n│   │   └── db.go       // データベース接続の初期化、クエリ実行、トランザクション管理などの DB ロジックを実装\n│   ├── models/\n│   │   └── model.go    // アプリケーション内で使用するデータ構造体（例：User, Item, Stock など）の定義\n│   └── middleware/\n│       └── logging.go  // 共通ミドルウェア（例：リクエストロギング、認証、エラーハンドリング）を実装\n├── config/\n│   └── config.yaml     // アプリケーション設定（DB接続情報、サーバーポート、環境変数など）を管理\n├── go.mod\n└── go.sum\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"各ファイルの役割概要\"\u003e各ファイルの役割・概要\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#各ファイルの役割概要\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ecmd/main.go\u003c/code\u003e\nアプリケーションの起動ファイルです。ここでは設定ファイルの読み込み、DB の初期化（internal/db/db.go の呼び出し）、そして Gin ルーターの初期化（internal/api/routes.go の利用）を行い、サーバーを起動します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#5bc4bf\"\u003eimport\u003c/span\u003e (\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;project-root/config\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;project-root/internal/api\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;project-root/internal/db\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emain\u003c/span\u003e() {\n    \u003cspan style=\"color:#776e71\"\u003e// 設定のロード\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#06b6ef\"\u003ecfg\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eLoadConfig\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;config/config.yaml\u0026#34;\u003c/span\u003e)\n    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#06b6ef\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;failed to load config: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e)\n    }\n\n    \u003cspan style=\"color:#776e71\"\u003e// DB接続の初期化\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edb\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eInitDB\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ecfg\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eDatabase\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eDSN\u003c/span\u003e); \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#06b6ef\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;failed to initialize DB: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e)\n    }\n\n    \u003cspan style=\"color:#776e71\"\u003e// Ginルーターの初期化\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#06b6ef\"\u003erouter\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eapi\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eSetupRouter\u003c/span\u003e()\n\n    \u003cspan style=\"color:#776e71\"\u003e// サーバー起動\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erouter\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eRun\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;:\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecfg\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eServer\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePort\u003c/span\u003e); \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#06b6ef\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eFatalf\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;failed to run server: %v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e)\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003einternal/api/routes.go\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eGin のルーティング設定を担当します。たとえば、API のバージョン毎にグループ分けし、各エンドポイントと対応するハンドラー（internal/api/handlers.go 内）を登録します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eapi\u003c/span\u003e\n\n\u003cspan style=\"color:#5bc4bf\"\u003eimport\u003c/span\u003e (\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;github.com/gin-gonic/gin\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;project-root/internal/api/handlers\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eSetupRouter\u003c/span\u003e() \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eEngine\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003er\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eDefault\u003c/span\u003e()\n\n    \u003cspan style=\"color:#776e71\"\u003e// 必要に応じてミドルウェアの登録（例：logging, CORSなど）\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#776e71\"\u003e// r.Use(middleware.LoggingMiddleware())\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\n    \u003cspan style=\"color:#776e71\"\u003e// APIルーティング例（バージョニングなど）\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#06b6ef\"\u003ev1\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003er\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGroup\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;/v1\u0026#34;\u003c/span\u003e)\n    {\n        \u003cspan style=\"color:#06b6ef\"\u003ev1\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGET\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;/items\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003ehandlers\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGetItems\u003c/span\u003e)\n        \u003cspan style=\"color:#06b6ef\"\u003ev1\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePOST\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;/items\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003ehandlers\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eCreateItem\u003c/span\u003e)\n        \u003cspan style=\"color:#06b6ef\"\u003ev1\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGET\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;/items/:id\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003ehandlers\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGetItem\u003c/span\u003e)\n    }\n    \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003er\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003einternal/api/handlers.go\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e各エンドポイントのリクエスト処理を実装します。たとえば、リクエストパラメータの取得、JSON のバインディング、DB 層（internal/db/db.go）の呼び出し、レスポンス生成などを行います。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehandlers\u003c/span\u003e\n\n\u003cspan style=\"color:#5bc4bf\"\u003eimport\u003c/span\u003e (\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;strconv\u0026#34;\u003c/span\u003e\n\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;github.com/gin-gonic/gin\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;project-root/internal/db\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;project-root/internal/models\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#776e71\"\u003e// GetItems は GET /v1/items のハンドラー例\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eGetItems\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eContext\u003c/span\u003e) {\n    \u003cspan style=\"color:#06b6ef\"\u003eitems\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edb\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eFetchItems\u003c/span\u003e()\n    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eJSON\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eStatusInternalServerError\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eH\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eError\u003c/span\u003e()})\n        \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e\n    }\n    \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eJSON\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eStatusOK\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eitems\u003c/span\u003e)\n}\n\n\u003cspan style=\"color:#776e71\"\u003e// CreateItem は POST /v1/items のハンドラー例\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eCreateItem\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eContext\u003c/span\u003e) {\n    \u003cspan style=\"color:#815ba4\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emodels\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eItem\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eShouldBindJSON\u003c/span\u003e(\u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e); \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eJSON\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eStatusBadRequest\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eH\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eError\u003c/span\u003e()})\n        \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e\n    }\n    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edb\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eInsertItem\u003c/span\u003e(\u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e); \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eJSON\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eStatusInternalServerError\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eH\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eError\u003c/span\u003e()})\n        \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e\n    }\n    \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eJSON\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eStatusCreated\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e)\n}\n\n\u003cspan style=\"color:#776e71\"\u003e// GetItem は GET /v1/items/:id のハンドラー例\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eGetItem\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eContext\u003c/span\u003e) {\n    \u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003estrconv\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eAtoi\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eParam\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e))\n    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eJSON\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eStatusBadRequest\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eH\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;invalid id\u0026#34;\u003c/span\u003e})\n        \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e\n    }\n    \u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edb\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eFetchItemByID\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e)\n    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eJSON\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eStatusInternalServerError\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eH\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eError\u003c/span\u003e()})\n        \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e\n    }\n    \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eJSON\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eStatusOK\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003einternal/db/db.go\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eデータベースへの接続初期化、クエリ実行、トランザクション処理などを実装します。テストを容易にするために、依存性注入を意識した設計にするのがおすすめです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edb\u003c/span\u003e\n\n\u003cspan style=\"color:#5bc4bf\"\u003eimport\u003c/span\u003e (\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;database/sql\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;github.com/go-sql-driver/mysql\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#776e71\"\u003e// MySQL ドライバーの例\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;project-root/internal/models\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#815ba4\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eDB\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003esql\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eDB\u003c/span\u003e\n\n\u003cspan style=\"color:#776e71\"\u003e// InitDB は DSN を元に DB 接続を初期化します\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eInitDB\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003edsn\u003c/span\u003e \u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#fec418\"\u003eerror\u003c/span\u003e {\n    \u003cspan style=\"color:#815ba4\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#fec418\"\u003eerror\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eDB\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003esql\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eOpen\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;mysql\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003edsn\u003c/span\u003e)\n    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e\n    }\n    \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eDB\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePing\u003c/span\u003e()\n}\n\n\u003cspan style=\"color:#776e71\"\u003e// FetchItems は全アイテムを DB から取得する例\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eFetchItems\u003c/span\u003e() ([]\u003cspan style=\"color:#06b6ef\"\u003emodels\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eItem\u003c/span\u003e, \u003cspan style=\"color:#fec418\"\u003eerror\u003c/span\u003e) {\n    \u003cspan style=\"color:#06b6ef\"\u003erows\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eDB\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eQuery\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;SELECT id, name, price FROM items\u0026#34;\u003c/span\u003e)\n    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e\n    }\n    \u003cspan style=\"color:#815ba4\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erows\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eClose\u003c/span\u003e()\n\n    \u003cspan style=\"color:#815ba4\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eitems\u003c/span\u003e []\u003cspan style=\"color:#06b6ef\"\u003emodels\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eItem\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erows\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eNext\u003c/span\u003e() {\n        \u003cspan style=\"color:#815ba4\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emodels\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eItem\u003c/span\u003e\n        \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erows\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eScan\u003c/span\u003e(\u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eID\u003c/span\u003e, \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eName\u003c/span\u003e, \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePrice\u003c/span\u003e); \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n            \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e\n        }\n        \u003cspan style=\"color:#06b6ef\"\u003eitems\u003c/span\u003e = append(\u003cspan style=\"color:#06b6ef\"\u003eitems\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e)\n    }\n    \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eitems\u003c/span\u003e, \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#776e71\"\u003e// InsertItem はアイテムを DB に挿入する例\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eInsertItem\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003emodels\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eItem\u003c/span\u003e) \u003cspan style=\"color:#fec418\"\u003eerror\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003estmt\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eDB\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePrepare\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;INSERT INTO items (name, price) VALUES (?, ?)\u0026#34;\u003c/span\u003e)\n    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e\n    }\n    \u003cspan style=\"color:#815ba4\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003estmt\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eClose\u003c/span\u003e()\n    \u003cspan style=\"color:#06b6ef\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003estmt\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eExec\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eName\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePrice\u003c/span\u003e)\n    \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#776e71\"\u003e// FetchItemByID は ID からアイテムを取得する例\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eFetchItemByID\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e \u003cspan style=\"color:#fec418\"\u003eint\u003c/span\u003e) (\u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003emodels\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eItem\u003c/span\u003e, \u003cspan style=\"color:#fec418\"\u003eerror\u003c/span\u003e) {\n    \u003cspan style=\"color:#815ba4\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emodels\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eItem\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eDB\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eQueryRow\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;SELECT id, name, price FROM items WHERE id = ?\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e).\n        \u003cspan style=\"color:#06b6ef\"\u003eScan\u003c/span\u003e(\u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eID\u003c/span\u003e, \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eName\u003c/span\u003e, \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePrice\u003c/span\u003e)\n    \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e\n    }\n    \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eitem\u003c/span\u003e, \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003einternal/models/model.go\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eAPI や DB で利用するデータモデル（例：Item）の定義を行います。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emodels\u003c/span\u003e\n\n\u003cspan style=\"color:#776e71\"\u003e// Item はサンプルデータモデルです\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eItem\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003estruct\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003eID\u003c/span\u003e    \u003cspan style=\"color:#fec418\"\u003eint\u003c/span\u003e    \u003cspan style=\"color:#48b685\"\u003e`json:\u0026#34;id\u0026#34;`\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eName\u003c/span\u003e  \u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e`json:\u0026#34;name\u0026#34;`\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003ePrice\u003c/span\u003e \u003cspan style=\"color:#fec418\"\u003eint\u003c/span\u003e    \u003cspan style=\"color:#48b685\"\u003e`json:\u0026#34;price\u0026#34;`\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003einternal/middleware/logging.go\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e必要に応じて、リクエストロギングやエラーハンドリングなどの共通処理用ミドルウェアを実装します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emiddleware\u003c/span\u003e\n\n\u003cspan style=\"color:#5bc4bf\"\u003eimport\u003c/span\u003e (\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;github.com/gin-gonic/gin\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#776e71\"\u003e// LoggingMiddleware はシンプルなリクエストロギングの例です\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eLoggingMiddleware\u003c/span\u003e() \u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eHandlerFunc\u003c/span\u003e {\n    \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eContext\u003c/span\u003e) {\n        \u003cspan style=\"color:#06b6ef\"\u003estart\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eNow\u003c/span\u003e()\n        \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eNext\u003c/span\u003e()\n        \u003cspan style=\"color:#06b6ef\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;method=%s path=%s status=%d duration=%s\u0026#34;\u003c/span\u003e,\n            \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eRequest\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eMethod\u003c/span\u003e,\n            \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eRequest\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eURL\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePath\u003c/span\u003e,\n            \u003cspan style=\"color:#06b6ef\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eWriter\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eStatus\u003c/span\u003e(),\n            \u003cspan style=\"color:#06b6ef\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eSince\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003estart\u003c/span\u003e),\n        )\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003econfig/config.yaml\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eアプリケーション設定（例：DB接続情報、サーバーポートなど）を管理し、main.go で読み込みます。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# AWSのECSを使用してAPIを提供してます。 「とりあえず」ということで、手っ取り早く手慣れているECSで実装しました。しかし、この構成はAPIへの通信がなくてもECSでコンテナを起動し続ける必要があります。コンテナが起動しているイコール課金で、支払いがもったいなく感じます。 そこで、ひとつの方法として、ECSをやめてAPI-GW＋Lambdaを使用してAPIを実装することを検討しています。これなら通信がAPIに到達したときにLambdaを動かすので、無風時はコストがかからないはずです。さらにAPIのコール100万回（回数はうろ覚えなので後で調べる）は無料で、お小遣いに優しくなると期待できます。 そこで、もう少しAPIの実装を深堀りして、効率的な実装をしたいと考えました。さらに、可能な限り抽象化してテストしやすくしようと考えました。というのも、頻繁に触ってリリースすればいいのですが、時間が経過して機能追加しようとしたらすっかり忘れてデグレしてしまうようなことが怖いためです。なので、テストで担保できる仕組みにしようと考えました。 フレームワークを検討# そこで調べると、APIを実装するにはフレームワークを使用するのが良さそうというのがわかりました。（いまさら、それを調べる？感はある。。。） 以下の記事を参考に比較しました。 Go言語　フレームワーク比較 Golangのフレームワーク #Go - Qiita golang 開発におすすめのフレームワーク5選と特徴について｜webdrawer Ginが良さそう# 初心者な自分にとって、複雑なものは避けたいです。 上の記事を読むと、シンプルなGinが良さそうです。広く使われてそうですし。 ファイルの構成# ここからは調べた内容をメモ。 このようなファイル構成により、エントリーポイント（cmd/main.go）はサーバーの起動や設定の読み込みに専念し、 内部処理（internal/以下）はルーティング、ハンドリング、DB接続、データモデル、ミドルウェアなどの各責務ごとに分離されます。 これにより、コードの再利用性、テスト容易性、保守性が向上し、プロジェクトの拡張や変更がしやすくなります。 アプリケーション設定（例：DB接続情報、サーバーポートなど）を管理し、main.go で読み込みます。設定の読み込みには、例えば Viper などのライブラリを利用すると便利なようです。 ファイル構成は以下。 /project-root ├── cmd/ │ └── main.go // アプリケーションのエントリーポイント。Gin ルーターの初期化とサーバー起動を行う ├── internal/ │ ├── api/ │ │ ├── routes.go // Gin のルーティング設定。エンドポイントとハンドラーの紐付けを記述 │ │ └── handlers.go // 各エンドポイントのリクエスト処理（GET/POSTなど）を実装 │ ├── db/ │ │ └── db.go // データベース接続の初期化、クエリ実行、トランザクション管理などの DB ロジックを実装 │ ├── models/ │ │ └── model.go // アプリケーション内で使用するデータ構造体（例：User, Item, Stock など）の定義 │ └── middleware/ │ └── logging.go // 共通ミドルウェア（例：リクエストロギング、認証、エラーハンドリング）を実装 ├── config/ │ └── config.yaml // アプリケーション設定（DB接続情報、サーバーポート、環境変数など）を管理 ├── go.mod └── go.sum 各ファイルの役割・概要# cmd/main.go アプリケーションの起動ファイルです。ここでは設定ファイルの読み込み、DB の初期化（internal/db/db.go の呼び出し）、そして Gin ルーターの初期化（internal/api/routes.go の利用）を行い、サーバーを起動します。 package main import ( \"log\" \"project-root/config\" \"project-root/internal/api\" \"project-root/internal/db\" ) func main() { // 設定のロード cfg, err := config.LoadConfig(\"config/config.yaml\") if err != nil { log.Fatalf(\"failed to load config: %v\", err) } // DB接続の初期化 if err := db.InitDB(cfg.Database.DSN); err != nil { log.Fatalf(\"failed to initialize DB: %v\", err) } // Ginルーターの初期化 router := api.SetupRouter() // サーバー起動 if err := router.Run(\":\" + cfg.Server.Port); err != nil { log.Fatalf(\"failed to run server: %v\", err) } } internal/api/routes.go Gin のルーティング設定を担当します。たとえば、API のバージョン毎にグループ分けし、各エンドポイントと対応するハンドラー（internal/api/handlers.go 内）を登録します。 package api import ( \"github.com/gin-gonic/gin\" \"project-root/internal/api/handlers\" ) func SetupRouter() *gin.Engine { r := gin.Default() // 必要に応じてミドルウェアの登録（例：logging, CORSなど） // r.Use(middleware.LoggingMiddleware()) // APIルーティング例（バージョニングなど） v1 := r.Group(\"/v1\") { v1.GET(\"/items\", handlers.GetItems) v1.POST(\"/items\", handlers.CreateItem) v1.GET(\"/items/:id\", handlers.GetItem) } return r } internal/api/handlers.go 各エンドポイントのリクエスト処理を実装します。たとえば、リクエストパラメータの取得、JSON のバインディング、DB 層（internal/db/db.go）の呼び出し、レスポンス生成などを行います。 package handlers import ( \"net/http\" \"strconv\" \"github.com/gin-gonic/gin\" \"project-root/internal/db\" \"project-root/internal/models\" ) // GetItems は GET /v1/items のハンドラー例 func GetItems(c *gin.Context) { items, err := db.FetchItems() if err != nil { c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()}) return } c.JSON(http.StatusOK, items) } // CreateItem は POST /v1/items のハンドラー例 func CreateItem(c *gin.Context) { var item models.Item if err := c.ShouldBindJSON(\u0026item); err != nil { c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()}) return } if err := db.InsertItem(\u0026item); err != nil { c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()}) return } c.JSON(http.StatusCreated, item) } // GetItem は GET /v1/items/:id のハンドラー例 func GetItem(c *gin.Context) { id, err := strconv.Atoi(c.Param(\"id\")) if err != nil { c.JSON(http.StatusBadRequest, gin.H{\"error\": \"invalid id\"}) return } item, err := db.FetchItemByID(id) if err != nil { c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()}) return } c.JSON(http.StatusOK, item) } internal/db/db.go データベースへの接続初期化、クエリ実行、トランザクション処理などを実装します。テストを容易にするために、依存性注入を意識した設計にするのがおすすめです。 package db import ( \"database/sql\" _ \"github.com/go-sql-driver/mysql\" // MySQL ドライバーの例 \"project-root/internal/models\" ) var DB *sql.DB // InitDB は DSN を元に DB 接続を初期化します func InitDB(dsn string) error { var err error DB, err = sql.Open(\"mysql\", dsn) if err != nil { return err } return DB.Ping() } // FetchItems は全アイテムを DB から取得する例 func FetchItems() ([]models.Item, error) { rows, err := DB.Query(\"SELECT id, name, price FROM items\") if err != nil { return nil, err } defer rows.Close() var items []models.Item for rows.Next() { var item models.Item if err := rows.Scan(\u0026item.ID, \u0026item.Name, \u0026item.Price); err != nil { return nil, err } items = append(items, item) } return items, nil } // InsertItem はアイテムを DB に挿入する例 func InsertItem(item *models.Item) error { stmt, err := DB.Prepare(\"INSERT INTO items (name, price) VALUES (?, ?)\") if err != nil { return err } defer stmt.Close() _, err = stmt.Exec(item.Name, item.Price) return err } // FetchItemByID は ID からアイテムを取得する例 func FetchItemByID(id int) (*models.Item, error) { var item models.Item err := DB.QueryRow(\"SELECT id, name, price FROM items WHERE id = ?\", id). Scan(\u0026item.ID, \u0026item.Name, \u0026item.Price) if err != nil { return nil, err } return \u0026item, nil } internal/models/model.go API や DB で利用するデータモデル（例：Item）の定義を行います。 package models // Item はサンプルデータモデルです type Item struct { ID int `json:\"id\"` Name string `json:\"name\"` Price int `json:\"price\"` } internal/middleware/logging.go 必要に応じて、リクエストロギングやエラーハンドリングなどの共通処理用ミドルウェアを実装します。 package middleware import ( \"github.com/gin-gonic/gin\" \"log\" \"time\" ) // LoggingMiddleware はシンプルなリクエストロギングの例です func LoggingMiddleware() gin.HandlerFunc { return func(c *gin.Context) { start := time.Now() c.Next() log.Printf(\"method=%s path=%s status=%d duration=%s\", c.Request.Method, c.Request.URL.Path, c.Writer.Status(), time.Since(start), ) } } config/config.yaml アプリケーション設定（例：DB接続情報、サーバーポートなど）を管理し、main.go で読み込みます。 微信 支付宝","scraped_at":"2025-07-12T21:17:08.442537374+09:00","word_count":600,"content_hash":"02f7363d30d7d75810e529eb081e2ef7"}
{"url":"https://yamada-tech-memo.netlify.app/posts/securityhub_desabled/","title":"SecurityHubの通知を抑止","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSecuriHubからの通知をslackに連携しています。が、この通知が多くて、オオカミ少年状態です。\u003c/p\u003e\n\u003cp\u003eかといって根本的な対処ができないものもあり、通知を減らすことにしました。\u003c/p\u003e\n\u003ch2 id=\"対象のメッセージ\"\u003e対象のメッセージ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対象のメッセージ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e対象にしたのは、以下の2つのメッセージです。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAWS Config should be enabled and use the service-linked role for resource recording\u003c/li\u003e\n\u003cli\u003eECS containers should be limited to read-only access to root filesystems\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e手順は簡単で、コントロールを無効にします。\u003c/p\u003e\n\u003ch3 id=\"config\"\u003eConfig\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#config\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"ecs\"\u003eECS\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ecs\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"03.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"04.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# SecuriHubからの通知をslackに連携しています。が、この通知が多くて、オオカミ少年状態です。 かといって根本的な対処ができないものもあり、通知を減らすことにしました。 対象のメッセージ# 対象にしたのは、以下の2つのメッセージです。 AWS Config should be enabled and use the service-linked role for resource recording ECS containers should be limited to read-only access to root filesystems 手順# 手順は簡単で、コントロールを無効にします。 Config# ECS# 微信 支付宝","scraped_at":"2025-07-12T21:17:11.41798066+09:00","word_count":35,"content_hash":"0a78ba62ba63b92103f5425ed2039c10"}
{"url":"https://yamada-tech-memo.netlify.app/posts/how_to_git_submodule_update/","title":"submoduleをアップデートした","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eサブモジュールをアップデートしたので、記録です。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e状態確認です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit status\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のように出力されます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eブランチ main\nYour branch is up to date with \u0026#39;origin/main\u0026#39;.\n\nChanges not staged for commit:\n  (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be committed)\n  (use \u0026#34;git restore \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory)\n  (commit or discard the untracked or modified content in submodules)\n        modified:   themes/blowfish (untracked content)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"アップデート\"\u003eアップデート\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#アップデート\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eアップデートします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit submodule update --remote --merge\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eアップデートをためていたので、たまっていたアップデートが表示されます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eremote: Enumerating objects: 6911, done.\nremote: Counting objects: 100% (3773/3773), done.\nremote: Compressing objects: 100% (108/108), done.\nremote: Total 6911 (delta 3703), reused 3665 (delta 3665), pack-reused 3138 (from 1)\nReceiving objects: 100% (6911/6911), 51.14 MiB | 22.24 MiB/s, done.\nResolving deltas: 100% (4599/4599), completed with 327 local objects.\nFrom https://github.com/nunocoracao/blowfish\n   7d634c9a..24dfec3d  dev        -\u0026gt; origin/dev\n   13ff6f53..96a116a8  main       -\u0026gt; origin/main\n * [new tag]           v2.83.0    -\u0026gt; v2.83.0\n * [new tag]           latest     -\u0026gt; latest\n * [new tag]           v2.67.0    -\u0026gt; v2.67.0\n * [new tag]           v2.68.0    -\u0026gt; v2.68.0\n * [new tag]           v2.69.0    -\u0026gt; v2.69.0\n * [new tag]           v2.70.0    -\u0026gt; v2.70.0\n * [new tag]           v2.71.0    -\u0026gt; v2.71.0\n * [new tag]           v2.71.1    -\u0026gt; v2.71.1\n * [new tag]           v2.72.0    -\u0026gt; v2.72.0\n * [new tag]           v2.72.1    -\u0026gt; v2.72.1\n * [new tag]           v2.73.0    -\u0026gt; v2.73.0\n * [new tag]           v2.74.0    -\u0026gt; v2.74.0\n * [new tag]           v2.75.0    -\u0026gt; v2.75.0\n * [new tag]           v2.76.0    -\u0026gt; v2.76.0\n * [new tag]           v2.77.0    -\u0026gt; v2.77.0\n * [new tag]           v2.77.1    -\u0026gt; v2.77.1\n * [new tag]           v2.78.0    -\u0026gt; v2.78.0\n * [new tag]           v2.79.0    -\u0026gt; v2.79.0\n * [new tag]           v2.80.0    -\u0026gt; v2.80.0\n * [new tag]           v2.81.0    -\u0026gt; v2.81.0\n * [new tag]           v2.82.0    -\u0026gt; v2.82.0\nUpdating f06bcb2a..96a116a8\nFast-forward\n .github/workflows/create-config-zip.yml            |     21 +\n .github/workflows/firebase-preview.yml             |     38 -\n .github/workflows/firebase-production.yml          |     39 -\n .github/workflows/hugo-version-update.yml          |      2 +-\n README.id.md                                       |    145 +\n README.ja.md                                       |    179 +\n README.md                                          |     11 +-\n README.zh-cn.md                                    |    176 +\n assets/css/compiled/main.css                       |    812 +-\n\n〜省略〜\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれでアップデート完了です。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# サブモジュールをアップデートしたので、記録です。 手順# 状態確認です。 git status 以下のように出力されます。 ブランチ main Your branch is up to date with 'origin/main'. Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git restore \u003cfile\u003e...\" to discard changes in working directory) (commit or discard the untracked or modified content in submodules) modified: themes/blowfish (untracked content) アップデート# アップデートします。 git submodule update --remote --merge アップデートをためていたので、たまっていたアップデートが表示されます。 remote: Enumerating objects: 6911, done. remote: Counting objects: 100% (3773/3773), done. remote: Compressing objects: 100% (108/108), done. remote: Total 6911 (delta 3703), reused 3665 (delta 3665), pack-reused 3138 (from 1) Receiving objects: 100% (6911/6911), 51.14 MiB | 22.24 MiB/s, done. Resolving deltas: 100% (4599/4599), completed with 327 local objects. From https://github.com/nunocoracao/blowfish 7d634c9a..24dfec3d dev -\u003e origin/dev 13ff6f53..96a116a8 main -\u003e origin/main * [new tag] v2.83.0 -\u003e v2.83.0 * [new tag] latest -\u003e latest * [new tag] v2.67.0 -\u003e v2.67.0 * [new tag] v2.68.0 -\u003e v2.68.0 * [new tag] v2.69.0 -\u003e v2.69.0 * [new tag] v2.70.0 -\u003e v2.70.0 * [new tag] v2.71.0 -\u003e v2.71.0 * [new tag] v2.71.1 -\u003e v2.71.1 * [new tag] v2.72.0 -\u003e v2.72.0 * [new tag] v2.72.1 -\u003e v2.72.1 * [new tag] v2.73.0 -\u003e v2.73.0 * [new tag] v2.74.0 -\u003e v2.74.0 * [new tag] v2.75.0 -\u003e v2.75.0 * [new tag] v2.76.0 -\u003e v2.76.0 * [new tag] v2.77.0 -\u003e v2.77.0 * [new tag] v2.77.1 -\u003e v2.77.1 * [new tag] v2.78.0 -\u003e v2.78.0 * [new tag] v2.79.0 -\u003e v2.79.0 * [new tag] v2.80.0 -\u003e v2.80.0 * [new tag] v2.81.0 -\u003e v2.81.0 * [new tag] v2.82.0 -\u003e v2.82.0 Updating f06bcb2a..96a116a8 Fast-forward .github/workflows/create-config-zip.yml | 21 + .github/workflows/firebase-preview.yml | 38 - .github/workflows/firebase-production.yml | 39 - .github/workflows/hugo-version-update.yml | 2 +- README.id.md | 145 + README.ja.md | 179 + README.md | 11 +- README.zh-cn.md | 176 + assets/css/compiled/main.css | 812 +- 〜省略〜 これでアップデート完了です。 微信 支付宝","scraped_at":"2025-07-12T21:17:13.012822406+09:00","word_count":292,"content_hash":"ece87a825ad1716281d1b0148f6c39ef"}
{"url":"https://yamada-tech-memo.netlify.app/posts/https-to-http-api-enabled/","title":"APIへの通信をHTTPS化した","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eHTTPSのサイトからHTTPサイトに通信できないミックスコンテンツによる想定外事象について、APIへの通信もHTTPSで通信することにしました。\u003c/p\u003e\n\u003cp\u003eこのページで手順を記録します。このたぐいの手順は何回か書いているので、忘備録として。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"route53でaレコードをalbに割り当てる\"\u003eRoute53でAレコードをALBに割り当てる\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#route53でaレコードをalbに割り当てる\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003ehogehoge.comドメインにapiというホスト名でAレコードに登録します。\u003c/p\u003e\n\u003cp\u003eそのAレコードをALBに割り当てます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"証明書の作成\"\u003e証明書の作成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#証明書の作成\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eパブリックを選択。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-1.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eパブリック証明書をリクエスト。特に変更する箇所はなく、次へ。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-2.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eRoute53でレコードを作成。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-3.png\" alt=\"alt text\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# HTTPSのサイトからHTTPサイトに通信できないミックスコンテンツによる想定外事象について、APIへの通信もHTTPSで通信することにしました。 このページで手順を記録します。このたぐいの手順は何回か書いているので、忘備録として。 手順# Route53でAレコードをALBに割り当てる# hogehoge.comドメインにapiというホスト名でAレコードに登録します。 そのAレコードをALBに割り当てます。 証明書の作成# パブリックを選択。 パブリック証明書をリクエスト。特に変更する箇所はなく、次へ。 Route53でレコードを作成。 微信 支付宝","scraped_at":"2025-07-12T21:17:15.439510384+09:00","word_count":13,"content_hash":"8779d97e38b4a681d3890666c8c04c21"}
{"url":"https://yamada-tech-memo.netlify.app/posts/react_deploy_netlify/","title":"NetlifyでReactをホスティングしてみた","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eReactで作成したSPAをコンテナとしてECSにデプロイしています。\u003c/p\u003e\n\u003cp\u003eですが、ECSにデプロイする必要ってないんじゃないかと思いまして。。。\u003c/p\u003e\n\u003cp\u003eというのも、バックエンドとして用意しているAPIと通信するのはクライアントとなるブラウザです。なので、ホスティングだけしてくれるサービスを使用すればいいんじゃないかと。\u003c/p\u003e\n\u003cp\u003eというわけで実際にNetlifyにホスティングしてみました。\u003c/p\u003e\n\u003ch2 id=\"reactアプリのビルド\"\u003eReactアプリのビルド\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#reactアプリのビルド\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003enpm ci\u003c/code\u003eからの\u003ccode\u003enpm run build\u003c/code\u003eでビルドします。\u003c/p\u003e\n\u003cp\u003eビルドの成果物は\u003ccode\u003ebuild/\u003c/code\u003eにできあがっています。\u003c/p\u003e\n\u003ch2 id=\"netlifyにデプロイ\"\u003enetlifyにデプロイ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#netlifyにデプロイ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eまずはログイン。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enetlify login\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eデプロイします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enetlify deploy --dir\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003ebuild --site\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003edfb7b87c-42d6-478a-8546-7605babfafbb --prod\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のようにデプロイできます。画面も表示できました！！\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eDeploying to main site URL...\n⠋ Uploading blobs to deploy store...\n\nNetlify Build                                                 \n────────────────────────────────────────────────────────────────\n\n❯ Version\n  @netlify/build 29.41.2\n\n❯ Flags\n  deployId: 67ab0b6a39e50e754d72ac06\n  dir: build\n  open: false\n  prod: true\n  prodIfUnlocked: false\n  site: dfb7b87c-42d6-478a-8546-7605babfafbb\n  skipFunctionsCache: false\n\n❯ Current directory\n  /home/hoge/hoge\n\n❯ Config file\n  No config file was defined: using default values.\n\n❯ Context\n✔ Finished uploading blobs to deploy store\n✔ No cached functions were found\n✔ Finished hashing \n✔ CDN requesting 7 files\n✔ Finished uploading 7 assets\n✔ Deploy is live!\n\nBuild logs:        https://app.netlify.com/sites/hogehoge/deploys/67ab0b6a39e50e754d72ac06\nFunction logs:     https://app.netlify.com/sites/hogehoge/functions\nUnique deploy URL: https://67ab0b6a39e50e754d72ac06--hogehoge.netlify.app\nWebsite URL:       https://hogehoge.netlify.app\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"またしてもhistoryapifallbackが\"\u003eまたしてもhistoryApiFallbackが\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#またしてもhistoryapifallbackが\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e画面が表示できたので、\u003ccode\u003e/login\u003c/code\u003eをリロードすると、、、。\u003c/p\u003e\n\u003cp\u003e「404 NOT FOUND」です。\u003c/p\u003e\n\u003ch2 id=\"_redirectsを用意する\"\u003e\u003ccode\u003e_redirects\u003c/code\u003eを用意する\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#_redirectsを用意する\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNetlifyでもnginxと同様に、historyApiFallbackを考慮する必要がありました。\u003c/p\u003e\n\u003cp\u003e具体的には、\u003ccode\u003e_redirects\u003c/code\u003eというファイルを用意しておいて、ここに以下の1行を書きます。このファイルはビルドした成果物の\u003ccode\u003ebuild/\u003c/code\u003e直下に配置します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e/*    /index.html   200\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eで、改めてNetlifyにデプロイすると、期待した通りの動作になります。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# Reactで作成したSPAをコンテナとしてECSにデプロイしています。 ですが、ECSにデプロイする必要ってないんじゃないかと思いまして。。。 というのも、バックエンドとして用意しているAPIと通信するのはクライアントとなるブラウザです。なので、ホスティングだけしてくれるサービスを使用すればいいんじゃないかと。 というわけで実際にNetlifyにホスティングしてみました。 Reactアプリのビルド# npm ciからのnpm run buildでビルドします。 ビルドの成果物はbuild/にできあがっています。 netlifyにデプロイ# まずはログイン。 netlify login デプロイします。 netlify deploy --dir=build --site=dfb7b87c-42d6-478a-8546-7605babfafbb --prod 以下のようにデプロイできます。画面も表示できました！！ Deploying to main site URL... ⠋ Uploading blobs to deploy store... Netlify Build ──────────────────────────────────────────────────────────────── ❯ Version @netlify/build 29.41.2 ❯ Flags deployId: 67ab0b6a39e50e754d72ac06 dir: build open: false prod: true prodIfUnlocked: false site: dfb7b87c-42d6-478a-8546-7605babfafbb skipFunctionsCache: false ❯ Current directory /home/hoge/hoge ❯ Config file No config file was defined: using default values. ❯ Context ✔ Finished uploading blobs to deploy store ✔ No cached functions were found ✔ Finished hashing ✔ CDN requesting 7 files ✔ Finished uploading 7 assets ✔ Deploy is live! Build logs: https://app.netlify.com/sites/hogehoge/deploys/67ab0b6a39e50e754d72ac06 Function logs: https://app.netlify.com/sites/hogehoge/functions Unique deploy URL: https://67ab0b6a39e50e754d72ac06--hogehoge.netlify.app Website URL: https://hogehoge.netlify.app またしてもhistoryApiFallbackが# 画面が表示できたので、/loginをリロードすると、、、。 「404 NOT FOUND」です。 _redirectsを用意する# Netlifyでもnginxと同様に、historyApiFallbackを考慮する必要がありました。 具体的には、_redirectsというファイルを用意しておいて、ここに以下の1行を書きます。このファイルはビルドした成果物のbuild/直下に配置します。 /* /index.html 200 で、改めてNetlifyにデプロイすると、期待した通りの動作になります。 微信 支付宝","scraped_at":"2025-07-12T21:17:17.72877796+09:00","word_count":130,"content_hash":"76eefe331900f7895ca90795058a0366"}
{"url":"https://yamada-tech-memo.netlify.app/posts/nginx-historyapifallback/","title":"nginxでhistoryApiFallback","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eReactで作成したSPAをECS上のnginxでホスティングしました。\u003c/p\u003e\n\u003cp\u003eそこで、ローカルとホスティングで動作が異なりました。\u003c/p\u003e\n\u003cp\u003e最初の画面が\u003ccode\u003e/login\u003c/code\u003eというURLで表現されています。\u003c/p\u003e\n\u003cp\u003eアドレスバーに\u003ccode\u003e/login\u003c/code\u003eと表示されてまして、ローカルでリロード（Command＋R）すると、同じログイン画面が表示されます。一方、ホスティングしたものは「404 NOT FOUND」が表示されます。\u003c/p\u003e\n\u003cp\u003eローカルと同じようにログイン画面を表示したいので、この事象と対応策について調べることにしました。\u003c/p\u003e\n\u003ch2 id=\"historyapifallbackの実装が必要\"\u003ehistoryApiFallbackの実装が必要\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#historyapifallbackの実装が必要\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eこの事象は「あるある」なようで、historyApiFallbackが必要ということがわかりました。\u003c/p\u003e\n\u003cp\u003eローカルで動作確認するときは、\u003ccode\u003enpm start\u003c/code\u003eで動かしています。このときは\u003ccode\u003ewebpack-dev-server\u003c/code\u003eが起動します。この\u003ccode\u003ewebpack-dev-server\u003c/code\u003eは、historyApiFallback オプションが有効になっており、たとえば\u003ccode\u003e/login\u003c/code\u003eなどのルートにアクセスされた場合でも常に\u003ccode\u003eindex.html\u003c/code\u003eを返すようになっています。ブラウザが受け取るのはアプリケーションのエントリーポイントとなる\u003ccode\u003eindex.html\u003c/code\u003eであり、React Routerなどのクライアント側のルーティングライブラリが正しく動作します。\u003c/p\u003e\n\u003cp\u003e一方、渡しはDockerにnginxを入れて、実装しました。\u003c/p\u003e\n\u003cp\u003enginxは、デフォルトではリクエストされたパスに対応する静的ファイルを探します。\nなので、例えばブラウザで/loginに直接アクセスすると、そのパスに対応するファイルが存在しないため、「404 NOT FOUND」エラーが返されるというわけです。\u003c/p\u003e\n\u003ch2 id=\"historyapifallbackとは\"\u003ehistoryApiFallbackとは\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#historyapifallbackとは\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eで、ここでChat−GPTにhistoryApiFallbackとは何かを改めて聞いてみました。\u003c/p\u003e\n\u003ch3 id=\"目的\"\u003e目的\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#目的\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eQ:historyApiFallbackの目的を教えて。\u003c/p\u003e\n\u003cp\u003eA:存在しないパスへのリクエストがあった場合に、404 エラーを返さず、常に index.html を返すことで、SPA のクライアントサイドルーティングを正しく機能させるための仕組みです。\u003c/p\u003e\n\u003ch3 id=\"利用シーン\"\u003e利用シーン\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#利用シーン\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eQ:どんなときに使用するの？\u003c/p\u003e\n\u003cp\u003eA:直接URLにアクセスしてもアプリが正しく表示されるようにするために使用されます。\u003c/p\u003e\n\u003ch2 id=\"実装\"\u003e実装\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#実装\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003enginxの\u003ccode\u003edefault.conf\u003c/code\u003eを以下のようにします。なお、以下は抜粋です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eserver {\n    listen       8080;\n    listen  [::]:8080;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n        try_files $uri $uri/ /index.html;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eポイントは以下の部分です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003etry_files $uri $uri/ /index.html;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eリクエストされたURIに対してファイルを探す順序を指定しています。まず、リクエストされたURIに対応するファイル \u003ccode\u003e($uri)\u003c/code\u003eを探し、次にディレクトリ\u003ccode\u003e($uri/)\u003c/code\u003eを探し、それらが見つからない場合は\u003ccode\u003eindex.html\u003c/code\u003eを返すという設定です。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# Reactで作成したSPAをECS上のnginxでホスティングしました。 そこで、ローカルとホスティングで動作が異なりました。 最初の画面が/loginというURLで表現されています。 アドレスバーに/loginと表示されてまして、ローカルでリロード（Command＋R）すると、同じログイン画面が表示されます。一方、ホスティングしたものは「404 NOT FOUND」が表示されます。 ローカルと同じようにログイン画面を表示したいので、この事象と対応策について調べることにしました。 historyApiFallbackの実装が必要# この事象は「あるある」なようで、historyApiFallbackが必要ということがわかりました。 ローカルで動作確認するときは、npm startで動かしています。このときはwebpack-dev-serverが起動します。このwebpack-dev-serverは、historyApiFallback オプションが有効になっており、たとえば/loginなどのルートにアクセスされた場合でも常にindex.htmlを返すようになっています。ブラウザが受け取るのはアプリケーションのエントリーポイントとなるindex.htmlであり、React Routerなどのクライアント側のルーティングライブラリが正しく動作します。 一方、渡しはDockerにnginxを入れて、実装しました。 nginxは、デフォルトではリクエストされたパスに対応する静的ファイルを探します。 なので、例えばブラウザで/loginに直接アクセスすると、そのパスに対応するファイルが存在しないため、「404 NOT FOUND」エラーが返されるというわけです。 historyApiFallbackとは# で、ここでChat−GPTにhistoryApiFallbackとは何かを改めて聞いてみました。 目的# Q:historyApiFallbackの目的を教えて。 A:存在しないパスへのリクエストがあった場合に、404 エラーを返さず、常に index.html を返すことで、SPA のクライアントサイドルーティングを正しく機能させるための仕組みです。 利用シーン# Q:どんなときに使用するの？ A:直接URLにアクセスしてもアプリが正しく表示されるようにするために使用されます。 実装# nginxのdefault.confを以下のようにします。なお、以下は抜粋です。 server { listen 8080; listen [::]:8080; server_name localhost; location / { root /usr/share/nginx/html; index index.html index.htm; try_files $uri $uri/ /index.html; } } ポイントは以下の部分です。 try_files $uri $uri/ /index.html; リクエストされたURIに対してファイルを探す順序を指定しています。まず、リクエストされたURIに対応するファイル ($uri)を探し、次にディレクトリ($uri/)を探し、それらが見つからない場合はindex.htmlを返すという設定です。 微信 支付宝","scraped_at":"2025-07-12T21:17:20.227351616+09:00","word_count":64,"content_hash":"b928a86ec1bc68676a686947df35290f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/be-carful-cors/","title":"CORSには気をつけよう","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e画面からのAPIアクセス時に403で返却されることがありました。\u003c/p\u003e\n\u003cp\u003e調べると、CORSが原因だということがわかりました。\u003c/p\u003e\n\u003ch2 id=\"corsとは\"\u003eCORSとは\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#corsとは\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCORSとは「Cross-Origin Resource Sharing（クロスオリジン・リソースシェアリング）」の略で、異なるオリジン（ドメイン、プロトコル、ポートが異なる）間でのリソース共有を安全に行うための仕組みです。\u003c/p\u003e\n\u003cp\u003eChat-Gptに詳しく聞いてみると。。。\u003c/p\u003e\n\u003ch3 id=\"オリジンとは\"\u003eオリジンとは？\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#オリジンとは\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eオリジンは、URL のプロトコル、ホスト、ポートの組み合わせを指します。たとえば、https://example.com と \u003ca href=\"http://example.com\"\u003ehttp://example.com\u003c/a\u003e は、プロトコルが異なるため別のオリジンとなります。\u003c/p\u003e\n\u003ch3 id=\"なぜcorsが必要か\"\u003eなぜCORSが必要か？\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#なぜcorsが必要か\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWebブラウザは、セキュリティ上の理由から、あるオリジン（例: \u003ca href=\"https://frontend.com\"\u003ehttps://frontend.com\u003c/a\u003e）から別のオリジン（例: \u003ca href=\"https://api.backend.com\"\u003ehttps://api.backend.com\u003c/a\u003e）へのリクエストをデフォルトでは制限しています。これは「同一オリジンポリシー」と呼ばれる仕組みです。\nCORS を利用することで、バックエンド側が明示的に「このオリジンからのリクエストは許可する」とブラウザに伝えることができ、クロスオリジンのリクエストを安全に許可することが可能になります。\u003c/p\u003e\n\u003ch2 id=\"対処方法\"\u003e対処方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対処方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e該当の部分です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eapplyCors\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003er\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eEngine\u003c/span\u003e) {\n\t\u003cspan style=\"color:#06b6ef\"\u003er\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eUse\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ecors\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ecors\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eConfig\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eAllowOrigins\u003c/span\u003e:     []\u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;http://localhost:3000\u0026#34;\u003c/span\u003e},\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eAllowMethods\u003c/span\u003e:     []\u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;POST\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;PUT\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;DELETE\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;OPTIONS\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;PATCH\u0026#34;\u003c/span\u003e},\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eAllowHeaders\u003c/span\u003e:     []\u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;Authorization\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Content-Type\u0026#34;\u003c/span\u003e},\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eExposeHeaders\u003c/span\u003e:    []\u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;Content-Length\u0026#34;\u003c/span\u003e},\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eAllowCredentials\u003c/span\u003e: \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eMaxAge\u003c/span\u003e:           \u003cspan style=\"color:#f99b15\"\u003e12\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eHour\u003c/span\u003e,\n\t}))\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下に変更しました。\u003c/p\u003e\n\u003cp\u003eReactのURLが固まってないので、いったん動けば良いということで\u003ccode\u003e*\u003c/code\u003eにしています。URLが確定したら変更しないと。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eapplyCors\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003er\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003egin\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eEngine\u003c/span\u003e) {\n\t\u003cspan style=\"color:#06b6ef\"\u003er\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eUse\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ecors\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003ecors\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eConfig\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eAllowOrigins\u003c/span\u003e:     []\u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e},\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eAllowMethods\u003c/span\u003e:     []\u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;GET\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;POST\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;PUT\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;DELETE\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;OPTIONS\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;PATCH\u0026#34;\u003c/span\u003e},\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eAllowHeaders\u003c/span\u003e:     []\u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;Authorization\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Content-Type\u0026#34;\u003c/span\u003e},\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eExposeHeaders\u003c/span\u003e:    []\u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#48b685\"\u003e\u0026#34;Content-Length\u0026#34;\u003c/span\u003e},\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eAllowCredentials\u003c/span\u003e: \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eMaxAge\u003c/span\u003e:           \u003cspan style=\"color:#f99b15\"\u003e12\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eHour\u003c/span\u003e,\n\t}))\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 画面からのAPIアクセス時に403で返却されることがありました。 調べると、CORSが原因だということがわかりました。 CORSとは# CORSとは「Cross-Origin Resource Sharing（クロスオリジン・リソースシェアリング）」の略で、異なるオリジン（ドメイン、プロトコル、ポートが異なる）間でのリソース共有を安全に行うための仕組みです。 Chat-Gptに詳しく聞いてみると。。。 オリジンとは？# オリジンは、URL のプロトコル、ホスト、ポートの組み合わせを指します。たとえば、https://example.com と http://example.com は、プロトコルが異なるため別のオリジンとなります。 なぜCORSが必要か？# Webブラウザは、セキュリティ上の理由から、あるオリジン（例: https://frontend.com）から別のオリジン（例: https://api.backend.com）へのリクエストをデフォルトでは制限しています。これは「同一オリジンポリシー」と呼ばれる仕組みです。 CORS を利用することで、バックエンド側が明示的に「このオリジンからのリクエストは許可する」とブラウザに伝えることができ、クロスオリジンのリクエストを安全に許可することが可能になります。 対処方法# 該当の部分です。 func applyCors(r *gin.Engine) { r.Use(cors.New(cors.Config{ AllowOrigins: []string{\"http://localhost:3000\"}, AllowMethods: []string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\", \"PATCH\"}, AllowHeaders: []string{\"Authorization\", \"Content-Type\"}, ExposeHeaders: []string{\"Content-Length\"}, AllowCredentials: true, MaxAge: 12 * time.Hour, })) 以下に変更しました。 ReactのURLが固まってないので、いったん動けば良いということで*にしています。URLが確定したら変更しないと。 func applyCors(r *gin.Engine) { r.Use(cors.New(cors.Config{ AllowOrigins: []string{\"*\"}, AllowMethods: []string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\", \"PATCH\"}, AllowHeaders: []string{\"Authorization\", \"Content-Type\"}, ExposeHeaders: []string{\"Content-Length\"}, AllowCredentials: true, MaxAge: 12 * time.Hour, })) 微信 支付宝","scraped_at":"2025-07-12T21:17:22.519373486+09:00","word_count":78,"content_hash":"fbba1ba6185af3662312847d2f79e743"}
{"url":"https://yamada-tech-memo.netlify.app/posts/https-to-http-api-deny/","title":"HTTPSからHTTPのAPIへの通信はブラウザが許してくれない","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eReactのアプリからAPIを呼べません。API側で通信されたというログが出ないのです。\u003c/p\u003e\n\u003cp\u003eこの謎がとけなくてずーっと考えてました。サウナに入ってぼーっと考えていたら、もしかしてHTTPSとHTTPが原因なんじゃないかとひらめきました。帰宅して調べたら、その通りでした。\u003c/p\u003e\n\u003cp\u003e開発環境はHTTPで試験しているので、こういうのに気が付きにくいです。\u003c/p\u003e\n\u003ch2 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eHTTPサイトの表示を許可するにしました。\u003c/p\u003e\n\u003ch2 id=\"方法\"\u003e方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eChromeの場合。\u003c/p\u003e\n\u003cp\u003e設定 ＞ プライバシーとセキュリティ ＞ サイトの設定 ＞安全でないコンテンツ\u003c/p\u003e\n\u003cp\u003eドロップダウンで広げないと見つからない。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"anzen.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e「安全でないコンテンツの表示を許可するサイト」にhttpのURLを追加します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"kyoka.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"恒久対処はhttps\"\u003e恒久対処はHTTPS\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#恒久対処はhttps\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eもちろん、恒久対処はHTTPSでの通信です。\u003c/p\u003e\n\u003cp\u003eインターネットに存在する全てのユーザがこんな設定できないですから。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# ReactのアプリからAPIを呼べません。API側で通信されたというログが出ないのです。 この謎がとけなくてずーっと考えてました。サウナに入ってぼーっと考えていたら、もしかしてHTTPSとHTTPが原因なんじゃないかとひらめきました。帰宅して調べたら、その通りでした。 開発環境はHTTPで試験しているので、こういうのに気が付きにくいです。 対応# HTTPサイトの表示を許可するにしました。 方法# Chromeの場合。 設定 ＞ プライバシーとセキュリティ ＞ サイトの設定 ＞安全でないコンテンツ ドロップダウンで広げないと見つからない。 「安全でないコンテンツの表示を許可するサイト」にhttpのURLを追加します。 恒久対処はHTTPS# もちろん、恒久対処はHTTPSでの通信です。 インターネットに存在する全てのユーザがこんな設定できないですから。 微信 支付宝","scraped_at":"2025-07-12T21:17:24.806866392+09:00","word_count":21,"content_hash":"f49e7e2f71ad47ce2467fe61c514c424"}
{"url":"https://yamada-tech-memo.netlify.app/posts/injection_env_to_react/","title":"コンテナで動くReactアプリに環境変数を注入する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eReactのアプリケーションがあります。\u003c/p\u003e\n\u003cp\u003e接続先のAPIを指定するのに\u003ccode\u003eREACT_APP_API_URL\u003c/code\u003eを```.env``から読み込んでいます。golangと同様に開発環境からECSに載せようとする際に、この環境変数を書き換えたいです。\u003c/p\u003e\n\u003cp\u003egolangだとタスク定義で環境変数を渡せたのですが、Reactだと渡せないのです。\u003c/p\u003e\n\u003cp\u003eどのようにして渡したかを示します。\u003c/p\u003e\n\u003ch2 id=\"方法\"\u003e方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eタスク定義では渡せないので、\u003ccode\u003eDockerfile\u003c/code\u003eで渡します。他に良い方法があるかもしれないので、良い方法があったら教えてほしいです。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eENV\u003c/code\u003eに\u003ccode\u003eREACT_APP_API_URL\u003c/code\u003eを直接いれます。開発環境ではコンテナではなく、直接\u003ccode\u003enpm start\u003c/code\u003eで動作確認するので、以下のようにしても困らないと考えてのことです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan style=\"color:#815ba4\"\u003eENV\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003eREACT_APP_API_URL\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;http://myapi.ap-northeast-1.elb.amazonaws.com:8080\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eCOPY\u003c/span\u003e package.json package-lock.json ./\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eRUN\u003c/span\u003e npm ci\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"複数のapiのurlを用意する場合は\"\u003e複数のAPIのURLを用意する場合は？\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#複数のapiのurlを用意する場合は\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eここからは補足。\u003c/p\u003e\n\u003cp\u003eただ、これだと検証環境のAPIと本番環境のAPIを分けたりできません。\u003c/p\u003e\n\u003cp\u003eとすると、コンテナイメージのビルド時に変数で渡す方法が良いなと考えました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan style=\"color:#815ba4\"\u003eARG\u003c/span\u003e REACT_APP_API_URL\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eENV\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003eREACT_APP_API_URL\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003eREACT_APP_API_URL\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eCOPY\u003c/span\u003e package.json package-lock.json ./\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eRUN\u003c/span\u003e npm ci\u003cspan style=\"color:#ef6155\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eコンテナイメージをビルドする際は以下のように\u003ccode\u003e--build-arg\u003c/code\u003eを使います。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker build --build-arg \u003cspan style=\"color:#ef6155\"\u003eREACT_APP_API_URL\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;http://myapi.ap-northeast-1.elb.amazonaws.com:8080\u0026#34;\u003c/span\u003e -t my-react-app .\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# Reactのアプリケーションがあります。 接続先のAPIを指定するのにREACT_APP_API_URLを```.env``から読み込んでいます。golangと同様に開発環境からECSに載せようとする際に、この環境変数を書き換えたいです。 golangだとタスク定義で環境変数を渡せたのですが、Reactだと渡せないのです。 どのようにして渡したかを示します。 方法# タスク定義では渡せないので、Dockerfileで渡します。他に良い方法があるかもしれないので、良い方法があったら教えてほしいです。 ENVにREACT_APP_API_URLを直接いれます。開発環境ではコンテナではなく、直接npm startで動作確認するので、以下のようにしても困らないと考えてのことです。 ENV REACT_APP_API_URL=\"http://myapi.ap-northeast-1.elb.amazonaws.com:8080\" COPY package.json package-lock.json ./ RUN npm ci 複数のAPIのURLを用意する場合は？# ここからは補足。 ただ、これだと検証環境のAPIと本番環境のAPIを分けたりできません。 とすると、コンテナイメージのビルド時に変数で渡す方法が良いなと考えました。 ARG REACT_APP_API_URL ENV REACT_APP_API_URL=${REACT_APP_API_URL} COPY package.json package-lock.json ./ RUN npm ci コンテナイメージをビルドする際は以下のように--build-argを使います。 docker build --build-arg REACT_APP_API_URL=\"http://myapi.ap-northeast-1.elb.amazonaws.com:8080\" -t my-react-app . 微信 支付宝","scraped_at":"2025-07-12T21:17:25.292225114+09:00","word_count":43,"content_hash":"bd27a5221da850e89ba180d8d373c57c"}
{"url":"https://yamada-tech-memo.netlify.app/posts/injection_env_to_golang/","title":"ECSで動くgolangアプリに環境変数を注入する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003egolangのアプリがあります。データベースのID、パスワードなどの認証情報を\u003ccode\u003e.env\u003c/code\u003eで渡しています。\u003c/p\u003e\n\u003cp\u003e開発環境でテストする際はユーザに\u003ccode\u003etestuser\u003c/code\u003e、パスワードに\u003ccode\u003etestpass\u003c/code\u003eと簡易なものを使用しています。ただ、これだとECSに載せて、インターネットに公開するサービスにしてしまうのは怖いです。\u003c/p\u003e\n\u003cp\u003eそこで、ECSにのせるときに使用するタスク定義で環境変数としてコンテナに注入します。\u003c/p\u003e\n\u003cp\u003eなお、環境変数として渡すユーザやパスワードはパラメータストアやSecretsManagerに暗号化して格納しておいて、それを渡すのが本流です。しかし、ここでは簡易な文字列を渡す定義にしています。\u003c/p\u003e\n\u003ch2 id=\"方法\"\u003e方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eDBへの接続部分では以下のように記述されています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\t\u003cspan style=\"color:#06b6ef\"\u003edsn\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eSprintf\u003c/span\u003e(\n\t\t\u003cspan style=\"color:#48b685\"\u003e\u0026#34;host=%s user=%s password=%s dbname=%s port=%s sslmode=require TimeZone=Asia/Tokyo\u0026#34;\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGetenv\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;DB_HOST\u0026#34;\u003c/span\u003e),\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGetenv\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;DB_USER\u0026#34;\u003c/span\u003e),\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGetenv\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;DB_PASSWORD\u0026#34;\u003c/span\u003e),\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGetenv\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;DB_NAME\u0026#34;\u003c/span\u003e),\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGetenv\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;DB_PORT\u0026#34;\u003c/span\u003e),\n\t)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eで、\u003ccode\u003e.env\u003c/code\u003eは以下のように記述されています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eDB_HOST=localhost\nDB_USER=testuser\nDB_PASSWORD=testpass\nDB_NAME=tesdb\nDB_PORT=5432\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこのままだとECSにのせても動かないです。DB_HOSTはAWSのホスト名になりますので、少なくともここを変えないとです。\u003c/p\u003e\n\u003cp\u003eECSにのせる際はタスク定義を使用します。ここに環境変数として記述します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e      \u003cspan style=\"color:#48b685\"\u003e\u0026#34;environment\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e:\u003c/span\u003e [\n        {\n          \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;DB_NAME\u0026#34;\u003c/span\u003e,\n          \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;proddb\u0026#34;\u003c/span\u003e\n        },\n        {\n          \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;DB_HOST\u0026#34;\u003c/span\u003e,\n          \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;proddb.aaaaaaaaaaa.ap-northeast-1.rds.amazonaws.com\u0026#34;\u003c/span\u003e\n        },\n        {\n          \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;DB_PORT\u0026#34;\u003c/span\u003e,\n          \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;5432\u0026#34;\u003c/span\u003e\n        },\n        {\n          \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;DB_USER\u0026#34;\u003c/span\u003e,\n          \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;produser\u0026#34;\u003c/span\u003e\n        },\n        {\n          \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;DB_PASSWORD\u0026#34;\u003c/span\u003e,\n          \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;prodpass\u0026#34;\u003c/span\u003e\n        }\n      ]\u003cspan style=\"color:#ef6155\"\u003e,\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上はわかりやすいように定数で書いてます。が、SecretsManagerに暗号化して格納して、それを注入するのが良いです。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# golangのアプリがあります。データベースのID、パスワードなどの認証情報を.envで渡しています。 開発環境でテストする際はユーザにtestuser、パスワードにtestpassと簡易なものを使用しています。ただ、これだとECSに載せて、インターネットに公開するサービスにしてしまうのは怖いです。 そこで、ECSにのせるときに使用するタスク定義で環境変数としてコンテナに注入します。 なお、環境変数として渡すユーザやパスワードはパラメータストアやSecretsManagerに暗号化して格納しておいて、それを渡すのが本流です。しかし、ここでは簡易な文字列を渡す定義にしています。 方法# DBへの接続部分では以下のように記述されています。 dsn := fmt.Sprintf( \"host=%s user=%s password=%s dbname=%s port=%s sslmode=require TimeZone=Asia/Tokyo\", os.Getenv(\"DB_HOST\"), os.Getenv(\"DB_USER\"), os.Getenv(\"DB_PASSWORD\"), os.Getenv(\"DB_NAME\"), os.Getenv(\"DB_PORT\"), ) で、.envは以下のように記述されています。 DB_HOST=localhost DB_USER=testuser DB_PASSWORD=testpass DB_NAME=tesdb DB_PORT=5432 このままだとECSにのせても動かないです。DB_HOSTはAWSのホスト名になりますので、少なくともここを変えないとです。 ECSにのせる際はタスク定義を使用します。ここに環境変数として記述します。 \"environment\": [ { \"name\": \"DB_NAME\", \"value\": \"proddb\" }, { \"name\": \"DB_HOST\", \"value\": \"proddb.aaaaaaaaaaa.ap-northeast-1.rds.amazonaws.com\" }, { \"name\": \"DB_PORT\", \"value\": \"5432\" }, { \"name\": \"DB_USER\", \"value\": \"produser\" }, { \"name\": \"DB_PASSWORD\", \"value\": \"prodpass\" } ], 上はわかりやすいように定数で書いてます。が、SecretsManagerに暗号化して格納して、それを注入するのが良いです。 微信 支付宝","scraped_at":"2025-07-12T21:17:26.367777442+09:00","word_count":67,"content_hash":"43285480d7b73a44f8f3cf17a567eb74"}
{"url":"https://yamada-tech-memo.netlify.app/posts/ec2_atatch_role/","title":"EC2にS3だけ操作可能なロールを割り当てる","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e構築したEC2には最小限の権限を割り当てたいです。\u003c/p\u003e\n\u003cp\u003eアクセスキーやシークレットアクセスキーでもできますが、ロールをEC2に割り当てるのがスマートです。\u003c/p\u003e\n\u003ch2 id=\"実装\"\u003e実装\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#実装\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eまずはロールを作成します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_role\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ec2_s3_role\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ec2-s3-role\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eassume_role_policy\u003c/span\u003e = jsonencode({\n    \u003cspan style=\"color:#06b6ef\"\u003eVersion\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;2012-10-17\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eStatement\u003c/span\u003e = [\n      {\n        \u003cspan style=\"color:#06b6ef\"\u003eEffect\u003c/span\u003e    = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Allow\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#06b6ef\"\u003ePrincipal\u003c/span\u003e = {\n          \u003cspan style=\"color:#06b6ef\"\u003eService\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ec2.amazonaws.com\u0026#34;\u003c/span\u003e\n        }\n        \u003cspan style=\"color:#06b6ef\"\u003eAction\u003c/span\u003e    = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;sts:AssumeRole\u0026#34;\u003c/span\u003e\n      }\n    ]\n  })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eS3だけ操作可能なポリシーを定義します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_policy\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;s3_policy\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e        = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;EC2S3Policy\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003edescription\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Policy for EC2 instance to operate only on S3\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003epolicy\u003c/span\u003e = jsonencode({\n    \u003cspan style=\"color:#06b6ef\"\u003eVersion\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;2012-10-17\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#06b6ef\"\u003eStatement\u003c/span\u003e = [\n      {\n        \u003cspan style=\"color:#06b6ef\"\u003eEffect\u003c/span\u003e   = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Allow\u0026#34;\u003c/span\u003e,\n        \u003cspan style=\"color:#06b6ef\"\u003eAction\u003c/span\u003e   = [\n          \u003cspan style=\"color:#48b685\"\u003e\u0026#34;s3:*\u0026#34;\u003c/span\u003e\n        ],\n        \u003cspan style=\"color:#06b6ef\"\u003eResource\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\n      }\n    ]\n  })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eロールにポリシーをアタッチします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_role_policy_attachment\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;attach_s3_policy\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003erole\u003c/span\u003e       = \u003cspan style=\"color:#06b6ef\"\u003eaws_iam_role\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eec2_s3_role\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003epolicy_arn\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003eaws_iam_policy\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003es3_policy\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003earn\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eインスタンスプロファイルを作ります。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_instance_profile\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ec2_s3_instance_profile\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ec2-s3-instance-profile\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003erole\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003eaws_iam_role\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eec2_s3_role\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#06b6ef\"\u003eEC2にプロファイルを割り当てます\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e。\u003c/span\u003e\n\n\u003cspan style=\"color:#ef6155\"\u003e```\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eterraform\u003c/span\u003e\n\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_instance\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;this\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003eami\u003c/span\u003e                     = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ami-0a6fd4c92fc6ed7d5\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003einstance_type\u003c/span\u003e           = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;t3.nano\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003edisable_api_termination\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003emonitoring\u003c/span\u003e              = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n\n\u003cspan style=\"color:#ef6155\"\u003e〜\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e省略\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e〜\u003c/span\u003e\n\n  \u003cspan style=\"color:#06b6ef\"\u003eiam_instance_profile\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003eaws_iam_instance_profile\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eec2_s3_instance_profile\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"ec2で確認\"\u003eEC2で確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ec2で確認\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEC2で確認すると以下のようになります。\u003c/p\u003e\n\u003ch3 id=\"ロール割当前\"\u003eロール割当前\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ロール割当前\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eaws configure list\n      Name                    Value             Type    Location\n      ----                    -----             ----    --------\n   profile                \u0026lt;not set\u0026gt;             None    None\naccess_key                \u0026lt;not set\u0026gt;             None    None\nsecret_key                \u0026lt;not set\u0026gt;             None    None\n    region           ap-northeast-1             imds\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"ロール割当後\"\u003eロール割当後\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ロール割当後\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eaws configure list\n      Name                    Value             Type    Location\n      ----                    -----             ----    --------\n   profile                \u0026lt;not set\u0026gt;             None    None\naccess_key     ****************CN5X         iam-role\nsecret_key     ****************KCNh         iam-role\n    region           ap-northeast-1             imds\n    \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 構築したEC2には最小限の権限を割り当てたいです。 アクセスキーやシークレットアクセスキーでもできますが、ロールをEC2に割り当てるのがスマートです。 実装# まずはロールを作成します。 resource \"aws_iam_role\" \"ec2_s3_role\" { name = \"ec2-s3-role\" assume_role_policy = jsonencode({ Version = \"2012-10-17\" Statement = [ { Effect = \"Allow\" Principal = { Service = \"ec2.amazonaws.com\" } Action = \"sts:AssumeRole\" } ] }) } S3だけ操作可能なポリシーを定義します。 resource \"aws_iam_policy\" \"s3_policy\" { name = \"EC2S3Policy\" description = \"Policy for EC2 instance to operate only on S3\" policy = jsonencode({ Version = \"2012-10-17\", Statement = [ { Effect = \"Allow\", Action = [ \"s3:*\" ], Resource = \"*\" } ] }) } ロールにポリシーをアタッチします。 resource \"aws_iam_role_policy_attachment\" \"attach_s3_policy\" { role = aws_iam_role.ec2_s3_role.name policy_arn = aws_iam_policy.s3_policy.arn } インスタンスプロファイルを作ります。 resource \"aws_iam_instance_profile\" \"ec2_s3_instance_profile\" { name = \"ec2-s3-instance-profile\" role = aws_iam_role.ec2_s3_role.name } EC2にプロファイルを割り当てます。 ```terraform resource \"aws_instance\" \"this\" { ami = \"ami-0a6fd4c92fc6ed7d5\" instance_type = \"t3.nano\" disable_api_termination = false monitoring = true 〜 省略 〜 iam_instance_profile = aws_iam_instance_profile.ec2_s3_instance_profile.name } EC2で確認# EC2で確認すると以下のようになります。 ロール割当前# aws configure list Name Value Type Location ---- ----- ---- -------- profile \u003cnot set\u003e None None access_key \u003cnot set\u003e None None secret_key \u003cnot set\u003e None None region ap-northeast-1 imds ロール割当後# aws configure list Name Value Type Location ---- ----- ---- -------- profile \u003cnot set\u003e None None access_key ****************CN5X iam-role secret_key ****************KCNh iam-role region ap-northeast-1 imds 微信 支付宝","scraped_at":"2025-07-12T21:17:28.859526908+09:00","word_count":192,"content_hash":"09abb9e02326d873570da22dad93c4d0"}
{"url":"https://yamada-tech-memo.netlify.app/posts/dns-apply-alb/","title":"Route53で払い出したドメインをALBに適用する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRoute53で払い出したドメインをALBに適用します。これをやらないと、サーバ証明書の検証エラーになってしまいます。\u003c/p\u003e\n\u003cp\u003eRoute53はネイキッドドメインに対応していて、そのやり方が独特です。普段からこういう作業を実施するわけではないので、いざやろうとすると戸惑います。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRoute53のドメインから右にある「レコードを作成」\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eここからが肝。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e上の画面で実施すること。\u003c/p\u003e\n\u003cp\u003eレコード名：ネイキッドドメインなので空白。\u003c/p\u003e\n\u003cp\u003eレコードタイプ：A\u003c/p\u003e\n\u003cp\u003eエイリアスを有効にする。このエイリアスを有効にするというのに迷いがち。\u003c/p\u003e\n\u003cp\u003e「ALBとCLBのエイリアス」を選択。対象のALBを選択する。\u003c/p\u003e\n\u003cp\u003eルーティングポリシーは「シンプルルーティング」を選択でOKだと思う。\u003c/p\u003e\n\u003cp\u003e全て入力したら、右下の「レコード作成」。\u003c/p\u003e\n\u003ch2 id=\"確認\"\u003e確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#確認\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003edigして2つのIPアドレスが返却されればOKです。\u003c/p\u003e\n\u003cp\u003e適用までに15分くらいかかります。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edig my-project.com\n\n;; ANSWER SECTION:\nmy-project.com.           \u003cspan style=\"color:#f99b15\"\u003e60\u003c/span\u003e      IN      A       54.178.213.177\nmy-project.com.           \u003cspan style=\"color:#f99b15\"\u003e60\u003c/span\u003e      IN      A       13.114.205.150\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# Route53で払い出したドメインをALBに適用します。これをやらないと、サーバ証明書の検証エラーになってしまいます。 Route53はネイキッドドメインに対応していて、そのやり方が独特です。普段からこういう作業を実施するわけではないので、いざやろうとすると戸惑います。 手順# Route53のドメインから右にある「レコードを作成」 ここからが肝。 上の画面で実施すること。 レコード名：ネイキッドドメインなので空白。 レコードタイプ：A エイリアスを有効にする。このエイリアスを有効にするというのに迷いがち。 「ALBとCLBのエイリアス」を選択。対象のALBを選択する。 ルーティングポリシーは「シンプルルーティング」を選択でOKだと思う。 全て入力したら、右下の「レコード作成」。 確認# digして2つのIPアドレスが返却されればOKです。 適用までに15分くらいかかります。 dig my-project.com ;; ANSWER SECTION: my-project.com. 60 IN A 54.178.213.177 my-project.com. 60 IN A 13.114.205.150 微信 支付宝","scraped_at":"2025-07-12T21:17:32.304074489+09:00","word_count":33,"content_hash":"f5d4fad670e48b45b0164d2ce7922bc8"}
{"url":"https://yamada-tech-memo.netlify.app/posts/enable-rds-ssl/","title":"RDSとのSSL通信をやめる","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e開発環境で動かしてたアプリケーションをコンテナ化してECSに載せました。\u003c/p\u003e\n\u003cp\u003egolangで実装されたバックエンドはAPIとして動き、postgresqlのDBと通信します。\u003c/p\u003e\n\u003cp\u003eですが、通信できないのです。セキュリティグループも5432/tcpは許可しているのに。\u003c/p\u003e\n\u003ch2 id=\"原因\"\u003e原因\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#原因\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRDSがSSLを要求している一方、アプリケーション側はSSL通信を無効にしているのが原因でした。\u003c/p\u003e\n\u003cp\u003eログをみると以下のように\u003ccode\u003eno encryption\u003c/code\u003eと出力されています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e[error] failed to initialize database, got error failed to connect to `user=***** database=*****`: 10.11.6.236:5432 (db.cbaimfixitb4.ap-northeast-1.rds.amazonaws.com): server error: FATAL: no pg_hba.conf entry for host \u0026#34;10.11.3.213\u0026#34;, user \u0026#34;*****\u0026#34;, database \u0026#34;*****\u0026#34;, no encryption (SQLSTATE 28000)\npanic: failed to connect database\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003egolangのコードは以下の記述になっています。ポイントは\u003ccode\u003esslmode=disable\u003c/code\u003eです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=Asia/Tokyo\u0026#34;\u003c/span\u003e,\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"考えたこと\"\u003e考えたこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#考えたこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003esslmode\u003c/code\u003eの\u003ccode\u003edisable\u003c/code\u003eを\u003ccode\u003eenable\u003c/code\u003eに変更するのが王道だと思います。\u003c/p\u003e\n\u003cp\u003eただ、開発環境で用意しているDBはSSL設定をしていません。SSLを設定するのは手間です。なので、環境変数として扱って、開発環境は\u003ccode\u003edisable\u003c/code\u003eに、ECSでは\u003ccode\u003eenable\u003c/code\u003eにするのがいいかもと思いました。が、コードの変更は時間がかかりそうです。一方、アプリは急いでECSで動かしたいです。\u003c/p\u003e\n\u003cp\u003e先に進めることを優先して、一時的にRDSのSSLを無効にすることにしました。\u003c/p\u003e\n\u003ch2 id=\"対処方法\"\u003e対処方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対処方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eカスタムパラメータグループを作成し、RDSインスタンスに適用します。\u003c/p\u003e\n\u003cp\u003eまずはカスタムパラメータを作成します。ここでは\u003ccode\u003erds.force_ssl\u003c/code\u003eを「1（有効）」から「0（無効）」に変更します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_db_parameter_group\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;postgres_custom\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e        = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;yamada-custom-postgres-params\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003efamily\u003c/span\u003e      = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;postgres16\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e  # PostgreSQL のバージョン\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#06b6ef\"\u003edescription\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Custom parameter group with rds.force_ssl disabled\u0026#34;\u003c/span\u003e\n\n  \u003cspan style=\"color:#06b6ef\"\u003eparameter\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e         = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;rds.force_ssl\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003evalue\u003c/span\u003e        = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eapply_method\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;pending-reboot\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e  # 変更を反映させるために再起動が必要な場合\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれを適用します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_db_instance\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;db\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003eidentifier\u003c/span\u003e              = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003evar.data\u003cspan style=\"color:#06b6ef\"\u003ebase_name\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e-db\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003edb_name\u003c/span\u003e                 = var.data\u003cspan style=\"color:#06b6ef\"\u003ebase_name\u003c/span\u003e\n  \u003cspan style=\"color:#ef6155\"\u003e〜省略\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eparameter_group_name\u003c/span\u003e    = \u003cspan style=\"color:#06b6ef\"\u003eaws_db_parameter_group\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003epostgres_custom\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"設定前と設定後\"\u003e設定前と設定後\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#設定前と設定後\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eデフォルトの定義でrds.force_sslが1になってます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e作成したカスタムパラメータグループのrds.force_sslが0に変わってます。カスタムパラメータグループはデフォルトがベースになっていて、明示的に変更したところだけが変わります。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 開発環境で動かしてたアプリケーションをコンテナ化してECSに載せました。 golangで実装されたバックエンドはAPIとして動き、postgresqlのDBと通信します。 ですが、通信できないのです。セキュリティグループも5432/tcpは許可しているのに。 原因# RDSがSSLを要求している一方、アプリケーション側はSSL通信を無効にしているのが原因でした。 ログをみると以下のようにno encryptionと出力されています。 [error] failed to initialize database, got error failed to connect to `user=***** database=*****`: 10.11.6.236:5432 (db.cbaimfixitb4.ap-northeast-1.rds.amazonaws.com): server error: FATAL: no pg_hba.conf entry for host \"10.11.3.213\", user \"*****\", database \"*****\", no encryption (SQLSTATE 28000) panic: failed to connect database golangのコードは以下の記述になっています。ポイントはsslmode=disableです。 \"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=Asia/Tokyo\", 考えたこと# sslmodeのdisableをenableに変更するのが王道だと思います。 ただ、開発環境で用意しているDBはSSL設定をしていません。SSLを設定するのは手間です。なので、環境変数として扱って、開発環境はdisableに、ECSではenableにするのがいいかもと思いました。が、コードの変更は時間がかかりそうです。一方、アプリは急いでECSで動かしたいです。 先に進めることを優先して、一時的にRDSのSSLを無効にすることにしました。 対処方法# カスタムパラメータグループを作成し、RDSインスタンスに適用します。 まずはカスタムパラメータを作成します。ここではrds.force_sslを「1（有効）」から「0（無効）」に変更します。 resource \"aws_db_parameter_group\" \"postgres_custom\" { name = \"yamada-custom-postgres-params\" family = \"postgres16\" # PostgreSQL のバージョン description = \"Custom parameter group with rds.force_ssl disabled\" parameter { name = \"rds.force_ssl\" value = \"0\" apply_method = \"pending-reboot\" # 変更を反映させるために再起動が必要な場合 } } これを適用します。 resource \"aws_db_instance\" \"db\" { identifier = \"${var.database_name}-db\" db_name = var.database_name 〜省略 parameter_group_name = aws_db_parameter_group.postgres_custom.name } 設定前と設定後# デフォルトの定義でrds.force_sslが1になってます。 作成したカスタムパラメータグループのrds.force_sslが0に変わってます。カスタムパラメータグループはデフォルトがベースになっていて、明示的に変更したところだけが変わります。 微信 支付宝","scraped_at":"2025-07-12T21:17:34.626485806+09:00","word_count":117,"content_hash":"9b881ce459bf04aa7eb33c147fe14245"}
{"url":"https://yamada-tech-memo.netlify.app/posts/server-certification-apply-alb/","title":"ALBにサーバ証明書を適用する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e発行した証明書をALBに適用します。\u003c/p\u003e\n\u003cp\u003eサーバ証明書発行と同様にterraformで書こうと思ったら、色々と調べないと書けませんでした。ということで、アウトプットしておきます。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003edomainにドメイン名をセット。ここではメインモジュールから渡しています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_acm_certificate\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;acm\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003edomain\u003c/span\u003e = var.\u003cspan style=\"color:#06b6ef\"\u003edomain_name\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eALBのリスナーを設定します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_lb_listener\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;this\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003eload_balancer_arn\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003eaws_lb\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003earn\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eport\u003c/span\u003e              = \u003cspan style=\"color:#f99b15\"\u003e443\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eprotocol\u003c/span\u003e          = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;HTTPS\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003essl_policy\u003c/span\u003e        = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ELBSecurityPolicy-TLS13-1-2-2021-06\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003ecertificate_arn\u003c/span\u003e   = data.\u003cspan style=\"color:#06b6ef\"\u003eaws_acm_certificate\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eacm\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003earn\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003edefault_action\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003etype\u003c/span\u003e             = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;forward\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003etarget_group_arn\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003eaws_lb_target_group\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003earn\u003c/span\u003e\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれでOKです。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 発行した証明書をALBに適用します。 サーバ証明書発行と同様にterraformで書こうと思ったら、色々と調べないと書けませんでした。ということで、アウトプットしておきます。 手順# domainにドメイン名をセット。ここではメインモジュールから渡しています。 data \"aws_acm_certificate\" \"acm\" { domain = var.domain_name } ALBのリスナーを設定します。 resource \"aws_lb_listener\" \"this\" { load_balancer_arn = aws_lb.this.arn port = 443 protocol = \"HTTPS\" ssl_policy = \"ELBSecurityPolicy-TLS13-1-2-2021-06\" certificate_arn = data.aws_acm_certificate.acm.arn default_action { type = \"forward\" target_group_arn = aws_lb_target_group.this.arn } } これでOKです。 微信 支付宝","scraped_at":"2025-07-12T21:17:36.053925361+09:00","word_count":46,"content_hash":"1ef11361fe0d1772b9a6e88bbfeb780c"}
{"url":"https://yamada-tech-memo.netlify.app/posts/acm-publish-server-certification/","title":"ACMでサーバ証明書を発行する手順","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAWSでサーバ証明書を発行しました。\u003c/p\u003e\n\u003cp\u003e何年か前に発行した経験はあるのですが、今回の作成で手順の迷子になりました。\u003c/p\u003e\n\u003cp\u003eまた同じ作業を実施するかもしれないので、手順をまとめます。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e右上にある「証明書をリクエスト」。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eパブリック証明書で次へ。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eFQDNを入れて、DNS検証を選択。キーアルゴリズムは迷ったけど、RSA2048を選択。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"03.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eスタータスが「保留中の検証」になる。中央右にある「Route53でレコードを作成」。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"04.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e作成対象のドメインが選択されているので、迷うことなく「レコードを作成」。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"05.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e上のメッセージの緑部分に「DNSレコードが正常に作成されました」を確認。\u003c/p\u003e\n\u003cp\u003eステータスは「保留中の検証」のまま。このままで15分ぐらい待つ。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"06.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e発行されると、ステータスが発行済になる。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"07.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# AWSでサーバ証明書を発行しました。 何年か前に発行した経験はあるのですが、今回の作成で手順の迷子になりました。 また同じ作業を実施するかもしれないので、手順をまとめます。 手順# 右上にある「証明書をリクエスト」。 パブリック証明書で次へ。 FQDNを入れて、DNS検証を選択。キーアルゴリズムは迷ったけど、RSA2048を選択。 スタータスが「保留中の検証」になる。中央右にある「Route53でレコードを作成」。 作成対象のドメインが選択されているので、迷うことなく「レコードを作成」。 上のメッセージの緑部分に「DNSレコードが正常に作成されました」を確認。 ステータスは「保留中の検証」のまま。このままで15分ぐらい待つ。 発行されると、ステータスが発行済になる。 微信 支付宝","scraped_at":"2025-07-12T21:17:38.053888301+09:00","word_count":15,"content_hash":"3cae56cadad371671c9e146630885518"}
{"url":"https://yamada-tech-memo.netlify.app/posts/inspector-enabled/","title":"SecurityHub：Inspectorを有効にする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSecurityHubからの通知が多いので、本格的に対応することを考えました。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAmazon Inspector Lambda code scanning should be enabled\nThis control checks whether Amazon Inspector Lambda code scanning is enabled. For a standalone account, the control fails if Amazon Inspector Lambda code scanning is disabled in the account. In a multi-account environment, the control fails if the delegated Inspector administrator account and all member accounts don’t have Lambda code scanning enabled.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e翻訳は以下。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAmazon Inspector Lambda code scanning\nAWS のセキュリティサービスである Amazon Inspector は、EC2 やコンテナ、さらには AWS Lambda 関数のコードについても脆弱性やセキュリティ上のリスクを検出する機能を持っています。\nこの中で「Lambda code scanning」は、Lambda 関数のソースコードを解析し、脆弱性や不適切なコードパターンを検知する機能です。\u003c/p\u003e\n\u003cp\u003eスタンドアロンアカウントの場合\n単一のアカウントで運用している場合、Lambda コードスキャンが無効になっているとこのコントロールは「失敗」し、Security Hub に警告が表示されます。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"実装できた\"\u003e実装できた\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#実装できた\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のコードでInspectorを有効化。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_inspector2_enabler\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;this\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003eaccount_ids\u003c/span\u003e    = [data.\u003cspan style=\"color:#06b6ef\"\u003eaws_caller_identity\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ecurrent\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eaccount_id\u003c/span\u003e]\n  \u003cspan style=\"color:#06b6ef\"\u003eresource_types\u003c/span\u003e = [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;LAMBDA_CODE\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;LAMBDA\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ECR\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#34;EC2\u0026#34;\u003c/span\u003e]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# SecurityHubからの通知が多いので、本格的に対応することを考えました。 Amazon Inspector Lambda code scanning should be enabled This control checks whether Amazon Inspector Lambda code scanning is enabled. For a standalone account, the control fails if Amazon Inspector Lambda code scanning is disabled in the account. In a multi-account environment, the control fails if the delegated Inspector administrator account and all member accounts don’t have Lambda code scanning enabled. 翻訳は以下。 Amazon Inspector Lambda code scanning AWS のセキュリティサービスである Amazon Inspector は、EC2 やコンテナ、さらには AWS Lambda 関数のコードについても脆弱性やセキュリティ上のリスクを検出する機能を持っています。 この中で「Lambda code scanning」は、Lambda 関数のソースコードを解析し、脆弱性や不適切なコードパターンを検知する機能です。 スタンドアロンアカウントの場合 単一のアカウントで運用している場合、Lambda コードスキャンが無効になっているとこのコントロールは「失敗」し、Security Hub に警告が表示されます。 実装できた# 以下のコードでInspectorを有効化。 resource \"aws_inspector2_enabler\" \"this\" { account_ids = [data.aws_caller_identity.current.account_id] resource_types = [\"LAMBDA_CODE\", \"LAMBDA\", \"ECR\", \"EC2\"] } 微信 支付宝","scraped_at":"2025-07-12T21:17:40.653605898+09:00","word_count":104,"content_hash":"d0ad781810dbe62b203c5542a0ff8c21"}
{"url":"https://yamada-tech-memo.netlify.app/posts/poc-cloudwatch-sqs/","title":"CloudWatchLogsやCloudWatchAlarmからSQSに連携する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCloudWatchLogsやCloudWatchAlarmから直接SQSに連携できるかを確認してみました。\u003c/p\u003e\n\u003cp\u003eというのも、Lambdaを使わないとできないという記事が多く、SQSに連携する場合にLambdaのコードを管理したくないと思いまして。\u003c/p\u003e\n\u003ch2 id=\"実装できたように見える\"\u003e実装できた（ように見える）\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#実装できたように見える\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e連携はできそう。\u003c/p\u003e\n\u003cp\u003e以下は検証時のリポジトリです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yamadatt/poc-sqs\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eyamadatt/poc-sqs: SQSへの連携を検証\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# CloudWatchLogsやCloudWatchAlarmから直接SQSに連携できるかを確認してみました。 というのも、Lambdaを使わないとできないという記事が多く、SQSに連携する場合にLambdaのコードを管理したくないと思いまして。 実装できた（ように見える）# 連携はできそう。 以下は検証時のリポジトリです。 yamadatt/poc-sqs: SQSへの連携を検証 微信 支付宝","scraped_at":"2025-07-12T21:17:43.142114688+09:00","word_count":10,"content_hash":"7d4f6924351ceb4c307daf30038b51c5"}
{"url":"https://yamada-tech-memo.netlify.app/posts/aws-ses/","title":"AWS SESを構築する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e久しぶりにSESを構築しました。\u003c/p\u003e\n\u003cp\u003e記録しておかないと、忘れてしまいます。構築の記録を残します。\u003c/p\u003e\n\u003ch2 id=\"サンドボックス状態で構築\"\u003eサンドボックス状態で構築\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#サンドボックス状態で構築\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSESは不用意に大量のメールが送信できないように、構築したてはサンドボックスという状態になります。\u003c/p\u003e\n\u003cp\u003e送信先のメールアドレスも限定された状態です。\u003c/p\u003e\n\u003ch2 id=\"構築手順\"\u003e構築手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#構築手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"ドメイン登録\"\u003eドメイン登録\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ドメイン登録\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSESを構築するにはドメインが必要です。Route53でドメインを登録します。\u003c/p\u003e\n\u003cp\u003eRoute53からドメイン登録を選択。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e連絡先を入れて登録します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e登録完了。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"03.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"sesの構築\"\u003eSESの構築\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#sesの構築\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e右上の使用を開始。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"04.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eサンドボックスで使用する送信先のメールアドレスを入力します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"05.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e送信するドメインを入力します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"06.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e配信性能の強化のページは変更しないで次に進みます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"07.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e登録情報を確認して、「使用を開始」。ただ、この「使用を開始」を押してもまだ使えるようになりません。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"08.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"dns設定\"\u003eDNS設定\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#dns設定\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eDNSの設定が必要なので、設定します。\u003c/p\u003e\n\u003cp\u003e以下のようなDKIMレコードとDMARCレコードが表示されます。それぞれ、CNAMEとTXTに気をつけてRoute53に登録します。登録してから使えるようになるまで30分ぐらいはかかったので、それまで待ちます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"09.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"メール送信のテスト\"\u003eメール送信のテスト\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#メール送信のテスト\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eメールを送信できるか確認します。\u003c/p\u003e\n\u003cp\u003eaws-cliを使用してメールを送信してみます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eaws --profile koji --region ap-northeast-1 ses send-email --from mail@xxx.com --to yamadatt@gmail.com --message \u0026#34;Subject={Data=This is a test mail,Charset=utf8},Body={Text={Data=This is a test mail.,Charset=utf8},Html={Data=This is a test mail,Charset=utf8}}\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e届きました！\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"mail.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 久しぶりにSESを構築しました。 記録しておかないと、忘れてしまいます。構築の記録を残します。 サンドボックス状態で構築# SESは不用意に大量のメールが送信できないように、構築したてはサンドボックスという状態になります。 送信先のメールアドレスも限定された状態です。 構築手順# ドメイン登録# SESを構築するにはドメインが必要です。Route53でドメインを登録します。 Route53からドメイン登録を選択。 連絡先を入れて登録します。 登録完了。 SESの構築# 右上の使用を開始。 サンドボックスで使用する送信先のメールアドレスを入力します。 送信するドメインを入力します。 配信性能の強化のページは変更しないで次に進みます。 登録情報を確認して、「使用を開始」。ただ、この「使用を開始」を押してもまだ使えるようになりません。 DNS設定# DNSの設定が必要なので、設定します。 以下のようなDKIMレコードとDMARCレコードが表示されます。それぞれ、CNAMEとTXTに気をつけてRoute53に登録します。登録してから使えるようになるまで30分ぐらいはかかったので、それまで待ちます。 メール送信のテスト# メールを送信できるか確認します。 aws-cliを使用してメールを送信してみます。 aws --profile koji --region ap-northeast-1 ses send-email --from mail@xxx.com --to yamadatt@gmail.com --message \"Subject={Data=This is a test mail,Charset=utf8},Body={Text={Data=This is a test mail.,Charset=utf8},Html={Data=This is a test mail,Charset=utf8}}\" 届きました！ 微信 支付宝","scraped_at":"2025-07-12T21:17:44.931832714+09:00","word_count":52,"content_hash":"1b2608526d9f13a4047650720508ed9a"}
{"url":"https://yamada-tech-memo.netlify.app/posts/golang-api-sample/","title":"実装の考え方を残す。golangでAPIをスピーディーに実装した","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e簡易なAPIをサンプル的に作ってほしいとリクエストがありました。\u003c/p\u003e\n\u003cp\u003e在庫を登録して、在庫を引き当てて売上を計上する。というようなAPIです。\u003c/p\u003e\n\u003cp\u003e細かくいうとAPIは以下のようなイメージでした。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在庫登録\u003c/li\u003e\n\u003cli\u003e登録した在庫確認\u003c/li\u003e\n\u003cli\u003e売上をたてる\u003c/li\u003e\n\u003cli\u003eたてた売上を確認する\u003c/li\u003e\n\u003cli\u003eテーブル初期化する\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e簡易といっても、上記のようにそれなりの処理があります。また、データベースとの連携もありました。\u003c/p\u003e\n\u003ch2 id=\"実装\"\u003e実装\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#実装\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のリポジトリに実装したものをおいておきます。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yamadatt/api-sample\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eyamadatt/api-sample: golangのAPIサンプル\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eどんな考え方で実装したかを記録。\u003c/p\u003e\n\u003cp\u003eサンプルAPIはAWSのAPIGWで最終的には実装する計画ではあるものの、いったんはローカルで動けば良いです。（もしかしたら、ECSでコンテナ化もある）\u003c/p\u003e\n\u003cp\u003eそして、実装はスピードが必要でした。\u003c/p\u003e\n\u003ch3 id=\"言語はgolang\"\u003e言語はgolang\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#言語はgolang\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e言語はgolangを選択しました。理由は慣れているから。\u003c/p\u003e\n\u003cp\u003egolangは標準ライブラリでwebサーバを構築できるし、ハンドラーによる制御も容易だと考えました。\u003c/p\u003e\n\u003ch3 id=\"データベースはsqlite\"\u003eデータベースはSQLite\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#データベースはsqlite\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eデータベースはmysqlやpostgresqlを使うと、環境作るのに時間がかかります。\u003c/p\u003e\n\u003cp\u003e性能は求められないし、動けばいいです。なので、SQLiteを使用することにしました。\u003c/p\u003e\n\u003ch2 id=\"実装の流れ\"\u003e実装の流れ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#実装の流れ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e1つのAPIごとに、以下の流れで実装しました。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGitHubにISSUEをたてる\u003c/li\u003e\n\u003cli\u003eGitHub Copilot Workspaceに書いてもらう\u003c/li\u003e\n\u003cli\u003eコードをpullして、動作確認とデバッグ\u003c/li\u003e\n\u003cli\u003eコードをGitHubにPUSH。上の1に戻る\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eGitHub Copilot Workspaceは本当に便利です。ゼロからコードを書くには適していると思います。\u003c/p\u003e\n\u003cp\u003eですが、動きません。パッケージ管理方法が古かったり、ローカルパッケージの読み込みが正確ではなかったりします。\u003c/p\u003e\n\u003cp\u003eなので、実際に動かしてデバッグする。デバッグしたコードをGitHubにPUSHする。というのを繰り返しました。\u003c/p\u003e\n\u003cp\u003eデバッガーのような作業にはなるのですが、なんとなくの勘所は掴めます。APIへの分岐はmainに書くんだなーとか、データベースの処理はdatabase.goにまとめるんだなーとか、そういう感覚があるとないとでは違うと思うので。\u003c/p\u003e\n\u003cp\u003eなんて勉強しながらやっていたら、実装までに3時間から4時間ぐらいはかかりました。\u003c/p\u003e\n\u003cp\u003eまたClineも試したいこともあり、GitHubCopilotやCline（GPT-4o）も使ってました。\u003c/p\u003e\n\u003ch2 id=\"甘い部分\"\u003e甘い部分\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#甘い部分\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eエラー処理が甘かったり、コードをうまく共通化できていなかったりします。\u003c/p\u003e\n\u003cp\u003eまた、テストを書いたり、CI/CDもやりたいなとは思うので、これは次の課題かな。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# 簡易なAPIをサンプル的に作ってほしいとリクエストがありました。 在庫を登録して、在庫を引き当てて売上を計上する。というようなAPIです。 細かくいうとAPIは以下のようなイメージでした。 在庫登録 登録した在庫確認 売上をたてる たてた売上を確認する テーブル初期化する 簡易といっても、上記のようにそれなりの処理があります。また、データベースとの連携もありました。 実装# 以下のリポジトリに実装したものをおいておきます。 yamadatt/api-sample: golangのAPIサンプル どんな考え方で実装したかを記録。 サンプルAPIはAWSのAPIGWで最終的には実装する計画ではあるものの、いったんはローカルで動けば良いです。（もしかしたら、ECSでコンテナ化もある） そして、実装はスピードが必要でした。 言語はgolang# 言語はgolangを選択しました。理由は慣れているから。 golangは標準ライブラリでwebサーバを構築できるし、ハンドラーによる制御も容易だと考えました。 データベースはSQLite# データベースはmysqlやpostgresqlを使うと、環境作るのに時間がかかります。 性能は求められないし、動けばいいです。なので、SQLiteを使用することにしました。 実装の流れ# 1つのAPIごとに、以下の流れで実装しました。 GitHubにISSUEをたてる GitHub Copilot Workspaceに書いてもらう コードをpullして、動作確認とデバッグ コードをGitHubにPUSH。上の1に戻る GitHub Copilot Workspaceは本当に便利です。ゼロからコードを書くには適していると思います。 ですが、動きません。パッケージ管理方法が古かったり、ローカルパッケージの読み込みが正確ではなかったりします。 なので、実際に動かしてデバッグする。デバッグしたコードをGitHubにPUSHする。というのを繰り返しました。 デバッガーのような作業にはなるのですが、なんとなくの勘所は掴めます。APIへの分岐はmainに書くんだなーとか、データベースの処理はdatabase.goにまとめるんだなーとか、そういう感覚があるとないとでは違うと思うので。 なんて勉強しながらやっていたら、実装までに3時間から4時間ぐらいはかかりました。 またClineも試したいこともあり、GitHubCopilotやCline（GPT-4o）も使ってました。 甘い部分# エラー処理が甘かったり、コードをうまく共通化できていなかったりします。 また、テストを書いたり、CI/CDもやりたいなとは思うので、これは次の課題かな。 微信 支付宝","scraped_at":"2025-07-12T21:17:47.234648148+09:00","word_count":45,"content_hash":"cb95d9e9f1751180825e41a46d8847ef"}
{"url":"https://yamada-tech-memo.netlify.app/posts/nginx-digest-docker/","title":"nginxでダイジェスト認証はコンパイルなどで面倒だから、dockerでしてみるでしょ","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ewebサーバのダイジェスト認証について、その動作を確認するというお題がありました。\u003c/p\u003e\n\u003cp\u003enginxでダイジェスト認証をする場合って、コードをコンパイルするところからしないとなのでとても面倒です。\u003c/p\u003e\n\u003cp\u003eって考えると、やはりコンテナを使いたくなるのが人情です。\u003c/p\u003e\n\u003ch2 id=\"2-やり方\"\u003e2. やり方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-やり方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のリポジトリを用意しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yamadatt/nginx-digest-auth-with-docker\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eyamadatt/nginx-digest-auth-with-docker: dockerのnginxでダイジェスト認証を試す\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e使い方はREADMEに書きました。\u003c/p\u003e\n\u003cp\u003ehtdigestコマンドが必要なので、インストールされてない場合は追加が必要です。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# webサーバのダイジェスト認証について、その動作を確認するというお題がありました。 nginxでダイジェスト認証をする場合って、コードをコンパイルするところからしないとなのでとても面倒です。 って考えると、やはりコンテナを使いたくなるのが人情です。 2. やり方# 以下のリポジトリを用意しました。 yamadatt/nginx-digest-auth-with-docker: dockerのnginxでダイジェスト認証を試す 使い方はREADMEに書きました。 htdigestコマンドが必要なので、インストールされてない場合は追加が必要です。 微信 支付宝","scraped_at":"2025-07-12T21:17:48.479725799+09:00","word_count":14,"content_hash":"3f7656d3a401315efa76fc868b6bec4e"}
{"url":"https://yamada-tech-memo.netlify.app/posts/amazon-linux2023-cron/","title":"悲報：AmzonLinux2023はcronが入ってないからその対策","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAmaozn Linux 2023でcronを設定しようとしました。\u003c/p\u003e\n\u003cp\u003eそしたら、「コマンドが見つかりません」のメッセーが表示されました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ crontab -l\n-bash: crontab: コマンドが見つかりません\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"2-amazon-linux-2023は要インストール\"\u003e2. Amazon Linux 2023は要インストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-amazon-linux-2023は要インストール\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAmazon Linux 2023ではcrontabがデフォルトでは利用できません。ちなみに、Amazon Linux ２だとデフォルトでcrontabを使用できました。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecronie\u003c/code\u003eというのをインストールするとcronが使えます。\u003c/p\u003e\n\u003cp\u003e以下のコマンドでcronieをインストールです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo yum install cronie -y\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれでcrontabを使用できます。\u003c/p\u003e\n\u003ch2 id=\"参考ドキュメント\"\u003e参考ドキュメント\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考ドキュメント\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のURLにcronの記述がありました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.aws.amazon.com/linux/al2023/ug/deprecated-al2023.html#deprecated-cron\"\u003ehttps://docs.aws.amazon.com/linux/al2023/ug/deprecated-al2023.html#deprecated-cron\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ecron\u003c/p\u003e\n\u003cp\u003eThe cronie package was installed by default on the AL2 AMI, providing support for the traditional crontab way of scheduling periodic tasks. In AL2023, cronie is not included by default. Therefore, support for crontab is no longer provided by default.\u003c/p\u003e\n\u003cp\u003eIn AL2023, you can optionally install the cronie package to use classic cron jobs. We recommend that you migrate to systemd timers due to the added functionality provided by systemd.\u003c/p\u003e\n\u003cp\u003eIt is possible that a future version of Amazon Linux, possibly the next major version, will no longer include support for classic cron jobs and complete the transition to systemd timers. We recommend that you migrate away from using cron.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003egoogleに翻訳してもらうと、以下です。要約すると「cronの使用はやめて、systemdを使ってね。」ということです。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ecronie パッケージはデフォルトで AL2 AMI にインストールされ、定期的なタスクをスケジュールする従来の crontab 方法のサポートを提供します。 AL2023 では、cronie はデフォルトで含まれていません。したがって、crontab のサポートはデフォルトでは提供されなくなりました。\u003c/p\u003e\n\u003cp\u003eAL2023 では、オプションで cronie パッケージをインストールして、クラシック cron ジョブを使用できます。 systemd によって提供される追加機能のため、systemd タイマーに移行することをお勧めします。\u003c/p\u003e\n\u003cp\u003eAmazon Linux の将来のバージョン (おそらく次のメジャーバージョン) には、従来の cron ジョブのサポートが含まれなくなり、systemd タイマーへの移行が完了する可能性があります。 cron の使用をやめて移行することをお勧めします。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# Amaozn Linux 2023でcronを設定しようとしました。 そしたら、「コマンドが見つかりません」のメッセーが表示されました。 $ crontab -l -bash: crontab: コマンドが見つかりません 2. Amazon Linux 2023は要インストール# Amazon Linux 2023ではcrontabがデフォルトでは利用できません。ちなみに、Amazon Linux ２だとデフォルトでcrontabを使用できました。 cronieというのをインストールするとcronが使えます。 以下のコマンドでcronieをインストールです。 sudo yum install cronie -y これでcrontabを使用できます。 参考ドキュメント# 以下のURLにcronの記述がありました。 https://docs.aws.amazon.com/linux/al2023/ug/deprecated-al2023.html#deprecated-cron cron The cronie package was installed by default on the AL2 AMI, providing support for the traditional crontab way of scheduling periodic tasks. In AL2023, cronie is not included by default. Therefore, support for crontab is no longer provided by default. In AL2023, you can optionally install the cronie package to use classic cron jobs. We recommend that you migrate to systemd timers due to the added functionality provided by systemd. It is possible that a future version of Amazon Linux, possibly the next major version, will no longer include support for classic cron jobs and complete the transition to systemd timers. We recommend that you migrate away from using cron. googleに翻訳してもらうと、以下です。要約すると「cronの使用はやめて、systemdを使ってね。」ということです。 cronie パッケージはデフォルトで AL2 AMI にインストールされ、定期的なタスクをスケジュールする従来の crontab 方法のサポートを提供します。 AL2023 では、cronie はデフォルトで含まれていません。したがって、crontab のサポートはデフォルトでは提供されなくなりました。 AL2023 では、オプションで cronie パッケージをインストールして、クラシック cron ジョブを使用できます。 systemd によって提供される追加機能のため、systemd タイマーに移行することをお勧めします。 Amazon Linux の将来のバージョン (おそらく次のメジャーバージョン) には、従来の cron ジョブのサポートが含まれなくなり、systemd タイマーへの移行が完了する可能性があります。 cron の使用をやめて移行することをお勧めします。 微信 支付宝","scraped_at":"2025-07-12T21:17:50.779212977+09:00","word_count":176,"content_hash":"6d531d32fbda7556b172fb460af734db"}
{"url":"https://yamada-tech-memo.netlify.app/posts/lychee-is-good/","title":"これが決定版！？デッドリンクのチェックはlycheeが良い","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eドッドリンクのチェックにいくつかのツールを使用してきました。\u003c/p\u003e\n\u003cp\u003e最近見つけたデッドリンクのツールが良かったです。\u003c/p\u003e\n\u003ch2 id=\"2-ツール\"\u003e2. ツール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-ツール\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eツールは以下の\u003ccode\u003elychee\u003c/code\u003eです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/lycheeverse/lychee\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003elycheeverse/lychee: ⚡ Fast, async, stream-based link checker written in Rust. Finds broken URLs and mail addresses inside Markdown, HTML, reStructuredText, websites and more!\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"3-デッドリンクチェックに求めるもの\"\u003e3. デッドリンクチェックに求めるもの\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-デッドリンクチェックに求めるもの\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eこれを使ってみて、デッドリンクチェックに求めるものは以下だと改めて感じました。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDockerで動くこと\u003c/li\u003e\n\u003cli\u003eリンクチェックのスピードが速いこと\u003c/li\u003e\n\u003cli\u003eチェック対象外のURLを指定できること\u003c/li\u003e\n\u003cli\u003emarkdown,htmlに使えること\u003c/li\u003e\n\u003cli\u003e結果をファイルに出力する\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003elychee\u003c/code\u003eは私が求めるものにマッチしています。\u003c/p\u003e\n\u003cp\u003e注意するのは再帰的にリンクをチェックする機能はないことです。例えば、ウェブサイトのルートから各記事のリンクを辿って、リンクをチェックするような機能はないんです。再帰的にチェックしたい場合は別のツールを使うことになります。\u003c/p\u003e\n\u003ch2 id=\"4-自分の使い方\"\u003e4. 自分の使い方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-自分の使い方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003edockerで以下のように動かします。\u003c/p\u003e\n\u003cp\u003e定義ファイルの\u003ccode\u003elychee.toml\u003c/code\u003eにチェック対象外のURLを正規表現で書いて、動かしています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker run --init -it --rm -w /input -v \u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003epwd\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e:/input lycheeverse/lychee . -c lychee.toml\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eデッドリンクが大量に検出される場合は、\u003ccode\u003e-o file_name.txt\u003c/code\u003eのようにファイルに出力しています。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# ドッドリンクのチェックにいくつかのツールを使用してきました。 最近見つけたデッドリンクのツールが良かったです。 2. ツール# ツールは以下のlycheeです。 lycheeverse/lychee: ⚡ Fast, async, stream-based link checker written in Rust. Finds broken URLs and mail addresses inside Markdown, HTML, reStructuredText, websites and more! 3. デッドリンクチェックに求めるもの# これを使ってみて、デッドリンクチェックに求めるものは以下だと改めて感じました。 Dockerで動くこと リンクチェックのスピードが速いこと チェック対象外のURLを指定できること markdown,htmlに使えること 結果をファイルに出力する lycheeは私が求めるものにマッチしています。 注意するのは再帰的にリンクをチェックする機能はないことです。例えば、ウェブサイトのルートから各記事のリンクを辿って、リンクをチェックするような機能はないんです。再帰的にチェックしたい場合は別のツールを使うことになります。 4. 自分の使い方# dockerで以下のように動かします。 定義ファイルのlychee.tomlにチェック対象外のURLを正規表現で書いて、動かしています。 docker run --init -it --rm -w /input -v $(pwd):/input lycheeverse/lychee . -c lychee.toml デッドリンクが大量に検出される場合は、-o file_name.txtのようにファイルに出力しています。 微信 支付宝","scraped_at":"2025-07-12T21:17:52.308242479+09:00","word_count":61,"content_hash":"31d0fc952d881ac7bc4e83fdc56a064c"}
{"url":"https://yamada-tech-memo.netlify.app/posts/amazon-linux2023-openvpn-install/","title":"AmzonLinux2023にOpenVPNをインストール","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAmaozn Linux 2023にOpenVPNを導入しようとしています。\u003c/p\u003e\n\u003cp\u003eですが、思ったように動いてくれません。\u003c/p\u003e\n\u003cp\u003eこれは作業中の記録です。\u003c/p\u003e\n\u003ch2 id=\"2-実施したこと\"\u003e2. 実施したこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-実施したこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"21-openvpnにインストール\"\u003e2.1. openvpnにインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-openvpnにインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003esudo yum -y install openvpn\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eバージョンの確認\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003erpm -q openvpn\nopenvpn-2.6.12-1.amzn2023.0.1.x86_64\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"22-easy-rsaのインストール\"\u003e2.2. easy-rsaのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-easy-rsaのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下を参照して、最新を入れます。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/OpenVPN/easy-rsa/releases\"\u003ehttps://github.com/OpenVPN/easy-rsa/releases\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e3.2.1が最新だったので、これをダウンロード。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget https://github.com/OpenVPN/easy-rsa/releases/download/v3.2.1/EasyRSA-3.2.1.tgz\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e解凍。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003etar -xvzf EasyRSA-3.2.1.tgz \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e解凍したフィアルを移動。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo mv EasyRSA-3.2.1 /usr/local/EasyRSA\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e移動先にcd。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ecd /usr/local/EasyRSA/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"23-初期化\"\u003e2.3. 初期化\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#23-初期化\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下のコマンドで初期化。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e./easyrsa init-pki\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のメッセージが表示。「＊（アスタリスク）」の部分を注意深く参照。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eNotice\n------\n\u003cspan style=\"color:#48b685\"\u003e\u0026#39;init-pki\u0026#39;\u003c/span\u003e complete; you may now create a CA or requests.\n\nYour newly created PKI dir is:\n* /usr/local/EasyRSA/pki\n\nUsing Easy-RSA configuration:\n* undefined\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"24-caの作成\"\u003e2.4. CAの作成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#24-caの作成\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e./easyrsa build-ca\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eパスフレーズを設定する。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eEnter New CA Key Passphrase: \nPassphrase must be at least 4 characters!\n\nEnter New CA Key Passphrase: \n\nConfirm New CA Key Passphrase: \nnnYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter \u0026#39;.\u0026#39;, the field will be left blank.\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCommon Nameの入力を促される。いったんは何も入れずにエンターキーのみ。\u003ccode\u003eBuild-ca completed successfully.\u003c/code\u003eでうまくいったように見える。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e-----\nCommon Name (eg: your user, host, or server name) [Easy-RSA CA]:\n\nNotice\n------\nCA creation complete. Your new CA certificate is at:\n* /usr/local/EasyRSA/pki/ca.crt\n\nCreate an OpenVPN TLS-AUTH|TLS-CRYPT-V1 key now: See \u0026#39;help gen-tls\u0026#39;\n\nBuild-ca completed successfully.\n\n---\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"25-dhパラメータ生成\"\u003e2.5. DHパラメータ生成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#25-dhパラメータ生成\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下のコマンド。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e./easyrsa gen-dh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこんなメッセージが表示。「＊（アスタリスク）」の部分に\u003ccode\u003edh.pem\u003c/code\u003eのパスが表示されるので、メモる。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eDH parameters appear to be ok.\n\nNotice\n------\n\nDH parameters of size 2048 created at:\n* /usr/local/EasyRSA/pki/dh.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"26-サーバ用の秘密鍵と証明書の作成\"\u003e2.6. サーバ用の秘密鍵と証明書の作成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#26-サーバ用の秘密鍵と証明書の作成\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eサーバ用の秘密鍵と証明書の作成、署名をまとめて行います。nopassオプションで「パスフレーズ無し」で作成します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e./easyrsa build-server-full server nopass\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のメッセージ。途中でyesの入力を求められるので、入力する。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e.+..........+..............+...............+.+.....+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*....+..+.+..+..........+......+.....+......+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*............+.....+...+.......+...+..+.......+..+.+..+..........+..................+...+..+.......+.....+................+.....+....+............+.....+......+.......+...+...+......+.....+..........+...+...........+....+...+..+......+......+.........+....+..+...+......+..........+.........+..+......+.......+..+...+.+..+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n3. .+.....+......+..........+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*....+...+.....+.+.....+.+...+...........+.........+.......+.....+.........+....+...+........+.+.........+..+...+....+...+.....+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.............+.....+......+....+...+.....+.+...........+................+...+..+.........+.+.....+...+....+......+..+...+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n-----\n\n4. Notice\n------\nPrivate-Key and Public-Certificate-Request files created.\nYour files are:\n* req: /usr/local/EasyRSA/pki/reqs/server.req\n* key: /usr/local/EasyRSA/pki/private/server.key\n\nYou are about to sign the following certificate:\n\n  Requested CN:     \u0026#39;server\u0026#39;\n  Requested type:   \u0026#39;server\u0026#39;\n  Valid for:        \u0026#39;825\u0026#39; days\n\n\nsubject=\n    commonName                = server\n\nType the word \u0026#39;yes\u0026#39; to continue, or any other input to abort.\n  Confirm requested details: \n\n  Type the word \u0026#39;yes\u0026#39; to continue, or any other input to abort.\n  Confirm requested details: yes\n\nUsing configuration from /usr/local/EasyRSA/pki/368f151b/temp.6.1\nEnter pass phrase for /usr/local/EasyRSA/pki/private/ca.key:\nCheck that the request matches the signature\nSignature ok\nThe Subject\u0026#39;s Distinguished Name is as follows\ncommonName            :ASN.1 12:\u0026#39;server\u0026#39;\nCertificate is to be certified until Apr 24 08:59:48 2027 GMT (825 days)\n\nWrite out database with 1 new entries\nData Base Updated\n\n5. Notice\n------\nInline file created:\n* /usr/local/EasyRSA/pki/inline/private/server.inline\n\n\n6. Notice\n------\nCertificate created at:\n* /usr/local/EasyRSA/pki/issued/server.crt\n\n[ec2-user@ip-10-0-0-9 EasyRSA]$ \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"27-クライアント用秘密鍵証明書の作成\"\u003e2.7. クライアント用秘密鍵/証明書の作成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#27-クライアント用秘密鍵証明書の作成\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eサーバと同じようなメッセージなので、間違えないようにケアする。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e./easyrsa build-client-full client1 nopass\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のメッセージ。途中でyesの入力を求められるので、入力する。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e.+.+..+....+......+.....+............+......+.......+...+......+....................+......+.........+...+............+...+.+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.+...+......+......+.+...+.........+..+.+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.+...+...........+.+.....+...............+.+..+...+.......+.....+.+.....+..........+..+...+.+........+......+.........+.......+..............+..........+.....+......+.+.....+.......+......+.........+...+..............+.+..+.............+...+....................+......+.+...+..+...+......+.+..+...+.......+......+......+...+.....+.+.........+..+.+........+......+.+.....+...+.........+.......+......+.....+.........+...+.......+...+..+....+..+.............+..+.........+.+...+.....+................+...+...+.....+...+.+......+........+......+......+......................+...+........+.+.....+..........+...............+......+.....+...+.+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n7. .....+...........+.......+...+...+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*...+....+.....+.........+.+...+..+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*..+.....+.............+............+.....+...+...+.......+...+...........+.+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n-----\n\n8. Notice\n------\nPrivate-Key and Public-Certificate-Request files created.\nYour files are:\n* req: /usr/local/EasyRSA/pki/reqs/client1.req\n* key: /usr/local/EasyRSA/pki/private/client1.key\n\nYou are about to sign the following certificate:\n\n  Requested CN:     \u0026#39;client1\u0026#39;\n  Requested type:   \u0026#39;client\u0026#39;\n  Valid for:        \u0026#39;825\u0026#39; days\n\n\nsubject=\n    commonName                = client1\n\nType the word \u0026#39;yes\u0026#39; to continue, or any other input to abort.\n  Confirm requested details: yes\n\nUsing configuration from /usr/local/EasyRSA/pki/f60211e9/temp.6.1\nEnter pass phrase for /usr/local/EasyRSA/pki/private/ca.key:\nCheck that the request matches the signature\nSignature ok\nThe Subject\u0026#39;s Distinguished Name is as follows\ncommonName            :ASN.1 12:\u0026#39;client1\u0026#39;\nCertificate is to be certified until Apr 24 09:01:46 2027 GMT (825 days)\n\nWrite out database with 1 new entries\nData Base Updated\n\n9. Notice\n------\nInline file created:\n* /usr/local/EasyRSA/pki/inline/private/client1.inline\n\n\n10. Notice\n------\nCertificate created at:\n* /usr/local/EasyRSA/pki/issued/client1.crt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"28-必要なファイルをコピー\"\u003e2.8. 必要なファイルをコピー\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#28-必要なファイルをコピー\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下でコピーする。sudoしないと権限ないと言われるので、sudoをつける。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo cp pki/ca.crt /etc/openvpn/\nsudo cp pki/issued/server.crt /etc/openvpn/\nsudo cp pki/private/server.key /etc/openvpn/\nsudo cp pki/dh.pem /etc/openvpn/dh2048.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eサーバのコンフィグファイル/etc/openvpn/server.confをひな形からコピーして作成する。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo cp /usr/share/doc/openvpn/sample/sample-config-files/server.conf /etc/openvpn/server.conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-参考\"\u003e3. 参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下の記事を参考にした。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://dev.classmethod.jp/articles/openvpn24-aws/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eOpenVPN 2.4によるVPN接続環境をAWSで構築する | DevelopersIO\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# Amaozn Linux 2023にOpenVPNを導入しようとしています。 ですが、思ったように動いてくれません。 これは作業中の記録です。 2. 実施したこと# 2.1. openvpnにインストール# sudo yum -y install openvpn バージョンの確認 rpm -q openvpn openvpn-2.6.12-1.amzn2023.0.1.x86_64 2.2. easy-rsaのインストール# 以下を参照して、最新を入れます。 https://github.com/OpenVPN/easy-rsa/releases 3.2.1が最新だったので、これをダウンロード。 wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.2.1/EasyRSA-3.2.1.tgz 解凍。 tar -xvzf EasyRSA-3.2.1.tgz 解凍したフィアルを移動。 sudo mv EasyRSA-3.2.1 /usr/local/EasyRSA 移動先にcd。 cd /usr/local/EasyRSA/ 2.3. 初期化# 以下のコマンドで初期化。 ./easyrsa init-pki 以下のメッセージが表示。「＊（アスタリスク）」の部分を注意深く参照。 Notice ------ 'init-pki' complete; you may now create a CA or requests. Your newly created PKI dir is: * /usr/local/EasyRSA/pki Using Easy-RSA configuration: * undefined 2.4. CAの作成# ./easyrsa build-ca パスフレーズを設定する。 Enter New CA Key Passphrase: Passphrase must be at least 4 characters! Enter New CA Key Passphrase: Confirm New CA Key Passphraseou are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. Common Nameの入力を促される。いったんは何も入れずにエンターキーのみ。Build-ca completed successfully.でうまくいったように見える。 ----- Common Name (eg: your user, host, or server name) [Easy-RSA CA]: Notice ------ CA creation complete. Your new CA certificate is at: * /usr/local/EasyRSA/pki/ca.crt Create an OpenVPN TLS-AUTH|TLS-CRYPT-V1 key now: See 'help gen-tls' Build-ca completed successfully. --- 2.5. DHパラメータ生成# 以下のコマンド。 ./easyrsa gen-dh こんなメッセージが表示。「＊（アスタリスク）」の部分にdh.pemのパスが表示されるので、メモる。 DH parameters appear to be ok. Notice ------ DH parameters of size 2048 created at: * /usr/local/EasyRSA/pki/dh.pem 2.6. サーバ用の秘密鍵と証明書の作成# サーバ用の秘密鍵と証明書の作成、署名をまとめて行います。nopassオプションで「パスフレーズ無し」で作成します。 ./easyrsa build-server-full server nopass 以下のメッセージ。途中でyesの入力を求められるので、入力する。otice ------ Private-Key and Public-Certificate-Request files created. Your files are: * req: /usr/local/EasyRSA/pki/reqs/server.req * key: /usr/local/EasyRSA/pki/private/server.key You are about to sign the following certificate: Requested CN: 'server' Requested type: 'server' Valid for: '825' days subject= commonName = server Type the word 'yes' to continue, or any other input to abort. Confirm requested details: Type the word 'yes' to continue, or any other input to abort. Confirm requested details: yes Using configuration from /usr/local/EasyRSA/pki/368f151b/temp.6.1 Enter pass phrase for /usr/local/EasyRSA/pki/private/ca.key: Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows commonName :ASN.1 12:'server' Certificate is to be certified until Apr 24 08:59:48 2027 GMT (825 days) Write out database with 1 new entries Data Base Updated 5. Notice ------ Inline file created: * /usr/local/EasyRSA/pki/inline/private/server.inline 6. Notice ------ Certificate created at: * /usr/local/EasyRSA/pki/issued/server.crt [ec2-user@ip-10-0-0-9 EasyRSA]$ 2.7. クライアント用秘密鍵/証明書の作成# サーバと同じようなメッセージなので、間違えないようにケアする。 ./easyrsa build-client-full client1 nopass 以下のメッセージ。途中でyesの入力を求められるので、入力する。otice ------ Private-Key and Public-Certificate-Request files created. Your files are: * req: /usr/local/EasyRSA/pki/reqs/client1.req * key: /usr/local/EasyRSA/pki/private/client1.key You are about to sign the following certificate: Requested CN: 'client1' Requested type: 'client' Valid for: '825' days subject= commonName = client1 Type the word 'yes' to continue, or any other input to abort. Confirm requested details: yes Using configuration from /usr/local/EasyRSA/pki/f60211e9/temp.6.1 Enter pass phrase for /usr/local/EasyRSA/pki/private/ca.key: Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows commonName :ASN.1 12:'client1' Certificate is to be certified until Apr 24 09:01:46 2027 GMT (825 days) Write out database with 1 new entries Data Base Updated 9. Notice ------ Inline file created: * /usr/local/EasyRSA/pki/inline/private/client1.inline 10. Notice ------ Certificate created at: * /usr/local/EasyRSA/pki/issued/client1.crt 2.8. 必要なファイルをコピー# 以下でコピーする。sudoしないと権限ないと言われるので、sudoをつける。 sudo cp pki/ca.crt /etc/openvpn/ sudo cp pki/issued/server.crt /etc/openvpn/ sudo cp pki/private/server.key /etc/openvpn/ sudo cp pki/dh.pem /etc/openvpn/dh2048.pem サーバのコンフィグファイル/etc/openvpn/server.confをひな形からコピーして作成する。 sudo cp /usr/share/doc/openvpn/sample/sample-config-files/server.conf /etc/openvpn/server.conf 3. 参考# 以下の記事を参考にした。 OpenVPN 2.4によるVPN接続環境をAWSで構築する | DevelopersIO 微信 支付宝","scraped_at":"2025-07-12T21:17:53.965655513+09:00","word_count":547,"content_hash":"59c4ab4c8e6ce00db1607d5639fa3322"}
{"url":"https://yamada-tech-memo.netlify.app/posts/poc-rds-12to16/","title":"RDSのPostgresqlを12から17にバージョンアップできるか試した記録","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRDSのPostgresqlのバージョンは12.19を使用しています。バージョン12は2025年2月末でサポート終了を迎えます。(参考：\u003ca href=\"https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/PostgreSQLReleaseNotes/postgresql-release-calendar.html\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eAmazon RDS for Postgre のリリースカレンダーSQL - Amazon Relational Database Service\u003c/a\u003e)\u003c/p\u003e\n\u003cp\u003eサポート終了となっても使えるのですが、サポート延長費用を支払う必要があります。これがけっこうバカにならない。。。\u003c/p\u003e\n\u003cp\u003e最新バージョンは17.2なので、これにバージョンアップできるのか、そして何か不具合があった場合に戻せるのかを検証しようと考えました。\u003c/p\u003e\n\u003cp\u003e厳密な検証というより、できそうなのか、できなさそうなのかの感覚を掴むためのざっくりとした検証です。\u003c/p\u003e\n\u003ch2 id=\"使用したリポジトリ\"\u003e使用したリポジトリ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#使用したリポジトリ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e検証用に作成したリポジトリです。\u003c/p\u003e\n\u003cp\u003e思考錯誤を繰り返すので、簡単に作って壊せる環境が良いのでterraformで用意しました。\u003c/p\u003e\n\u003cp\u003eパブリックサブネットにRDSを作ってくれます。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yamadatt/-Volumes-git-rds-verup-poc\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eyamadatt/-Volumes-git-rds-verup-poc\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"マネコンからやってみた\"\u003eマネコンからやってみた\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#マネコンからやってみた\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"1219から163にアップデート\"\u003e12.19から16.3にアップデート\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1219から163にアップデート\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e12.19から17.2に直接はあげられないです。一方、16.3ならいけそうなので、16.3にアップします。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e変更のスケジュールは「すぐに適用」を選択します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eステータスが「変更中」のまま、なかなか変わりません。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"03.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eやっと「利用可能」となりました。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"04.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eここまでで約10分でした。長い時間なのか、短い時間なのか。何もデータを入れていないので、それが効いて10分なのかもしれないです。\u003c/p\u003e\n\u003cp\u003eまぁ、目安として。\u003c/p\u003e\n\u003ch3 id=\"terraformでアップデート\"\u003eterraformでアップデート\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#terraformでアップデート\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eterraformでもアップデートできるか確認してみました。\u003c/p\u003e\n\u003cp\u003e残念ながら、terraformでメジャーバージョンはできませんでした。\u003c/p\u003e\n\u003cp\u003e一方、マイナーバージョンならできました。ここで試したのは、\u003ccode\u003e12.19\u003c/code\u003eから\u003ccode\u003e12.22\u003c/code\u003eへのアップデートです。\u003c/p\u003e\n\u003cp\u003e以下はNGだった\u003ccode\u003e12.19\u003c/code\u003eから\u003ccode\u003e16.3\u003c/code\u003eにアップデートできるか確認した記録です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eTerraform will perform the following actions:\n\n  # module.db.aws_db_instance.db will be updated in-place\n  ~ resource \u0026#34;aws_db_instance\u0026#34; \u0026#34;db\u0026#34; {\n      ~ engine_version                        = \u0026#34;12.19\u0026#34; -\u0026gt; \u0026#34;16.3\u0026#34;\n        id                                    = \u0026#34;db-BSJTGVNKYRYUR6VZGB7D2SE5HE\u0026#34;\n        tags                                  = {}\n        # (69 unchanged attributes hidden)\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこのようなメッセージでNGでした。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e│ Error: updating RDS DB Instance (stag-db): operation error RDS: ModifyDBInstance, https response error StatusCode: 400, RequestID: 6bb4a1f2-93f9-42c7-a920-7f902ac05f66, api error InvalidParameterCombination: The AllowMajorVersionUpgrade flag must be present when upgrading to a new major version.\n│ \n│   with module.db.aws_db_instance.db,\n│   on ../modules/db/database.tf line 81, in resource \u0026#34;aws_db_instance\u0026#34; \u0026#34;db\u0026#34;:\n│   81: resource \u0026#34;aws_db_instance\u0026#34; \u0026#34;db\u0026#34; {\n│ \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"切り戻しできるか\"\u003e切り戻しできるか\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#切り戻しできるか\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e16.3から12.19に戻せるかどうか確認します。\u003c/p\u003e\n\u003cp\u003e残念ながら、選択肢に出てこなくて戻せないです。バージョンアップするしかないです。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"05.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"terraformなら戻せるか\"\u003eterraformなら戻せるか\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#terraformなら戻せるか\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eマネコンだったら切り戻せないけど、もしかしてterraformなら戻せるかも。と淡い期待を抱いて試してみました。\u003c/p\u003e\n\u003cp\u003e中央あたりにバージョンが\u003ccode\u003e\u0026#34;16.3\u0026#34; -\u0026gt; \u0026#34;12.19\u0026#34;\u003c/code\u003eと表示されているので、なんとなく戻せそうな気がします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  # module.db.aws_db_instance.db will be updated in-place\n  ~ resource \u0026#34;aws_db_instance\u0026#34; \u0026#34;db\u0026#34; {\n      ~ engine_version                        = \u0026#34;16.3\u0026#34; -\u0026gt; \u0026#34;12.19\u0026#34;\n        id                                    = \u0026#34;db-B3BGYUI76PXOD4ML73QF4DPTJI\u0026#34;\n        tags                                  = {}\n        # (69 unchanged attributes hidden)\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eapplyしてみましたが、エラーでNGでした。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e│ Error: updating RDS DB Instance (stag-db): operation error RDS: ModifyDBInstance, https response error StatusCode: 400, RequestID: a80b4e4a-d743-41df-8bff-7a7bfdd6ff34, api error InvalidParameterCombination: Cannot upgrade postgres from 16.3 to 12.19\n│ \n│   with module.db.aws_db_instance.db,\n│   on ../modules/db/database.tf line 81, in resource \u0026#34;aws_db_instance\u0026#34; \u0026#34;db\u0026#34;:\n│   81: resource \u0026#34;aws_db_instance\u0026#34; \u0026#34;db\u0026#34; {\n│ \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"検証結果\"\u003e検証結果\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#検証結果\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eバージョンアップはできるけど、バージョンダウンはできないというのがわかりました。\u003c/p\u003e\n\u003cp\u003e他にやり方があるのかもしれないと思って、Chat-GPTに聞いてみると以下の回答でした。やはりバージョンダウンはできないようです。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAmazon RDS の PostgreSQL エンジンでは、エンジンのバージョンダウン（ダウングレード）は 直接実行できません。RDS はアップグレードのみをサポートしており、ダウングレードは公式にはサポートされていないため、以下の方法で対応する必要があります。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e利用可能な RDS エンジンのバージョンを AWS CLI で確認することができます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws rds describe-db-engine-versions --engine postgres --query \u003cspan style=\"color:#48b685\"\u003e\u0026#34;DBEngineVersions[*].[EngineVersion]\u0026#34;\u003c/span\u003e --output text\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e私の場合はこんな感じに出力されます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e11.22\n11.22-rds.20240418\n11.22-rds.20240509\n11.22-rds.20240808\n11.22-rds.20241121\n12.15\n12.16\n12.17\n12.18\n12.19\n12.20\n12.21\n12.22\n13.15\n13.16\n13.17\n13.18\n14.12\n14.13\n14.14\n14.15\n15.7\n15.8\n15.9\n15.10\n16.3\n16.4\n16.5\n16.6\n17.1\n17.2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# RDSのPostgresqlのバージョンは12.19を使用しています。バージョン12は2025年2月末でサポート終了を迎えます。(参考：Amazon RDS for Postgre のリリースカレンダーSQL - Amazon Relational Database Service) サポート終了となっても使えるのですが、サポート延長費用を支払う必要があります。これがけっこうバカにならない。。。 最新バージョンは17.2なので、これにバージョンアップできるのか、そして何か不具合があった場合に戻せるのかを検証しようと考えました。 厳密な検証というより、できそうなのか、できなさそうなのかの感覚を掴むためのざっくりとした検証です。 使用したリポジトリ# 検証用に作成したリポジトリです。 思考錯誤を繰り返すので、簡単に作って壊せる環境が良いのでterraformで用意しました。 パブリックサブネットにRDSを作ってくれます。 yamadatt/-Volumes-git-rds-verup-poc マネコンからやってみた# 12.19から16.3にアップデート# 12.19から17.2に直接はあげられないです。一方、16.3ならいけそうなので、16.3にアップします。 変更のスケジュールは「すぐに適用」を選択します。 ステータスが「変更中」のまま、なかなか変わりません。 やっと「利用可能」となりました。 ここまでで約10分でした。長い時間なのか、短い時間なのか。何もデータを入れていないので、それが効いて10分なのかもしれないです。 まぁ、目安として。 terraformでアップデート# terraformでもアップデートできるか確認してみました。 残念ながら、terraformでメジャーバージョンはできませんでした。 一方、マイナーバージョンならできました。ここで試したのは、12.19から12.22へのアップデートです。 以下はNGだった12.19から16.3にアップデートできるか確認した記録です。 Terraform will perform the following actions: # module.db.aws_db_instance.db will be updated in-place ~ resource \"aws_db_instance\" \"db\" { ~ engine_version = \"12.19\" -\u003e \"16.3\" id = \"db-BSJTGVNKYRYUR6VZGB7D2SE5HE\" tags = {} # (69 unchanged attributes hidden) } Plan: 0 to add, 1 to change, 0 to destroy. このようなメッセージでNGでした。 │ Error: updating RDS DB Instance (stag-db): operation error RDS: ModifyDBInstance, https response error StatusCode: 400, RequestID: 6bb4a1f2-93f9-42c7-a920-7f902ac05f66, api error InvalidParameterCombination: The AllowMajorVersionUpgrade flag must be present when upgrading to a new major version. │ │ with module.db.aws_db_instance.db, │ on ../modules/db/database.tf line 81, in resource \"aws_db_instance\" \"db\": │ 81: resource \"aws_db_instance\" \"db\" { │ 切り戻しできるか# 16.3から12.19に戻せるかどうか確認します。 残念ながら、選択肢に出てこなくて戻せないです。バージョンアップするしかないです。 terraformなら戻せるか# マネコンだったら切り戻せないけど、もしかしてterraformなら戻せるかも。と淡い期待を抱いて試してみました。 中央あたりにバージョンが\"16.3\" -\u003e \"12.19\"と表示されているので、なんとなく戻せそうな気がします。 Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols: ~ update in-place Terraform will perform the following actions: # module.db.aws_db_instance.db will be updated in-place ~ resource \"aws_db_instance\" \"db\" { ~ engine_version = \"16.3\" -\u003e \"12.19\" id = \"db-B3BGYUI76PXOD4ML73QF4DPTJI\" tags = {} # (69 unchanged attributes hidden) } Plan: 0 to add, 1 to change, 0 to destroy. applyしてみましたが、エラーでNGでした。 │ Error: updating RDS DB Instance (stag-db): operation error RDS: ModifyDBInstance, https response error StatusCode: 400, RequestID: a80b4e4a-d743-41df-8bff-7a7bfdd6ff34, api error InvalidParameterCombination: Cannot upgrade postgres from 16.3 to 12.19 │ │ with module.db.aws_db_instance.db, │ on ../modules/db/database.tf line 81, in resource \"aws_db_instance\" \"db\": │ 81: resource \"aws_db_instance\" \"db\" { │ 検証結果# バージョンアップはできるけど、バージョンダウンはできないというのがわかりました。 他にやり方があるのかもしれないと思って、Chat-GPTに聞いてみると以下の回答でした。やはりバージョンダウンはできないようです。 Amazon RDS の PostgreSQL エンジンでは、エンジンのバージョンダウン（ダウングレード）は 直接実行できません。RDS はアップグレードのみをサポートしており、ダウングレードは公式にはサポートされていないため、以下の方法で対応する必要があります。 参考# 利用可能な RDS エンジンのバージョンを AWS CLI で確認することができます。 aws rds describe-db-engine-versions --engine postgres --query \"DBEngineVersions[*].[EngineVersion]\" --output text 私の場合はこんな感じに出力されます。 11.22 11.22-rds.20240418 11.22-rds.20240509 11.22-rds.20240808 11.22-rds.20241121 12.15 12.16 12.17 12.18 12.19 12.20 12.21 12.22 13.15 13.16 13.17 13.18 14.12 14.13 14.14 14.15 15.7 15.8 15.9 15.10 16.3 16.4 16.5 16.6 17.1 17.2 微信 支付宝","scraped_at":"2025-07-12T21:17:56.337580777+09:00","word_count":316,"content_hash":"9bfe7f5f15456a76166322df4bd59b48"}
{"url":"https://yamada-tech-memo.netlify.app/posts/m4-mac-mini-setup/","title":"M4 Mac miniを購入。セットアップした記録","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e2025年に突入し、気が大きくなりました。気が大きくなった勢いでM4のMac miniを購入しました。\u003c/p\u003e\n\u003cp\u003e写真はデスク下にマウントしたM4のMac mini。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./20250107225113.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eこれまではM1のMacbookAirを使用していたので、M1からM4へと3世代のジャンプアップです。そして、メモリが16GBというのも大きいです。\u003c/p\u003e\n\u003cp\u003eこのスペックで約9万5千という価格なので、年末年始の気が大きくなっている時に、購入しない理由はありませんでした。\u003c/p\u003e\n\u003cp\u003eというわけで、M4 Mac miniを設定した記録です。\u003c/p\u003e\n\u003ch2 id=\"インストール\"\u003eインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#インストール\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のアプリをインストール。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eChrome\n\u003cul\u003e\n\u003cli\u003eいわずと知れたブラウザ\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003egoogle日本語入力\n\u003cul\u003e\n\u003cli\u003emacのIMEに慣れないのでM1時代から使っている\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eVisual Studio Code\n\u003cul\u003e\n\u003cli\u003e定番のエディタ。プラグインは以下をインストール。\n\u003cul\u003e\n\u003cli\u003eGitHub Copilot\u003c/li\u003e\n\u003cli\u003eGo\u003c/li\u003e\n\u003cli\u003eJapanese Language Pack\u003c/li\u003e\n\u003cli\u003eMarkdown All in One\u003c/li\u003e\n\u003cli\u003eMarp for VS Code\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eslack\n\u003cul\u003e\n\u003cli\u003eチャットツール。自宅で使用している。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/eczarny/spectacle\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eSpectacle\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eウインドウを整列してくれるアプリ。2022年のリリースを最後にアーカイブされていました。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mos.caldis.me/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eMOS\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eマウスホイールのスクロールを「ナチュラル」にしてくれるアプリ。下にスクロールしたら、ウインドウのスクロールも下にして欲しいので。必須のアプリ。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ghostty.org/download\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eGhotty\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eターミナルエミュレータ。terraformを作っている会社から2024年末にリリースされて話題になったため使ってみた。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTermius\n\u003cul\u003e\n\u003cli\u003eSSHクライアント。App Storeからインストール。M1で使用していた「Zen Term」をインストールできなかったので、代替で入れた。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://iina.io/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eIINA\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eメディアプレイヤー。H265を再生できるので重宝している。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSpotify\n\u003cul\u003e\n\u003cli\u003e音楽配信のサブスク。MacBookAirは購入した時点で導入されていた。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eToDo\n\u003cul\u003e\n\u003cli\u003eマイクロソフトのToDo。AppStoreからインストール。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMonosnap\n\u003cul\u003e\n\u003cli\u003eスクリーンショットを取得するアプリ。AppStoreからインストール。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ehomebrew（Homebrew 4.4.14）\n\u003cul\u003e\n\u003cli\u003eコマンドラインでインストールするために必要。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003egit(git version 2.39.5 (Apple Git-154))\n\u003cul\u003e\n\u003cli\u003ehomebrewでインストール\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003egolang(go version go1.23.4 darwin/arm64)\n\u003cul\u003e\n\u003cli\u003ehomebrewでインストール\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eclipy\n\u003cul\u003e\n\u003cli\u003eコピー履歴管理。homebrewでインストール\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"設定変更\"\u003e設定変更\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#設定変更\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下の設定を変更。\u003c/p\u003e\n\u003ch3 id=\"キーマップの変更\"\u003eキーマップの変更\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#キーマップの変更\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003ecntlキーとcommandキーを入れ替え。Windowsのキー配置に慣れているので、これをやらないと気持ち悪い。\u003c/p\u003e\n\u003ch3 id=\"githubの秘密鍵配置\"\u003eGitHubの秘密鍵配置\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#githubの秘密鍵配置\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eLinuxからGitHubの秘密鍵をコピーして配置。\u003ccode\u003essh -T github.com\u003c/code\u003eで動作確認。\u003c/p\u003e\n\u003ch3 id=\"llの導入\"\u003ellの導入\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#llの導入\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eLinuxで\u003ccode\u003ell\u003c/code\u003eをする癖がついているので、Macにも導入。エイリアスに\u003ccode\u003els -l\u003c/code\u003eを設定。\u003c/p\u003e\n\u003ch3 id=\"ホットコーナー\"\u003eホットコーナー\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ホットコーナー\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eホットコーナーで右下をスリープに。設定 \u0026gt; デスクトップとDock \u0026gt; ホットコーナーで設定。\u003c/p\u003e\n\u003ch3 id=\"ds_storeや_xxxを作らないようにする\"\u003e\u003ccode\u003e.DS_Store\u003c/code\u003eや\u003ccode\u003e._xxx\u003c/code\u003eを作らないようにする。\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ds_storeや_xxxを作らないようにする\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下のコマンド。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edefaults write com.apple.desktopservices DSDontWriteNetworkStores True\nkillall Finder\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 2025年に突入し、気が大きくなりました。気が大きくなった勢いでM4のMac miniを購入しました。 写真はデスク下にマウントしたM4のMac mini。 これまではM1のMacbookAirを使用していたので、M1からM4へと3世代のジャンプアップです。そして、メモリが16GBというのも大きいです。 このスペックで約9万5千という価格なので、年末年始の気が大きくなっている時に、購入しない理由はありませんでした。 というわけで、M4 Mac miniを設定した記録です。 インストール# 以下のアプリをインストール。 Chrome いわずと知れたブラウザ google日本語入力 macのIMEに慣れないのでM1時代から使っている Visual Studio Code 定番のエディタ。プラグインは以下をインストール。 GitHub Copilot Go Japanese Language Pack Markdown All in One Marp for VS Code slack チャットツール。自宅で使用している。 Spectacle ウインドウを整列してくれるアプリ。2022年のリリースを最後にアーカイブされていました。 MOS マウスホイールのスクロールを「ナチュラル」にしてくれるアプリ。下にスクロールしたら、ウインドウのスクロールも下にして欲しいので。必須のアプリ。 Ghotty ターミナルエミュレータ。terraformを作っている会社から2024年末にリリースされて話題になったため使ってみた。 Termius SSHクライアント。App Storeからインストール。M1で使用していた「Zen Term」をインストールできなかったので、代替で入れた。 IINA メディアプレイヤー。H265を再生できるので重宝している。 Spotify 音楽配信のサブスク。MacBookAirは購入した時点で導入されていた。 ToDo マイクロソフトのToDo。AppStoreからインストール。 Monosnap スクリーンショットを取得するアプリ。AppStoreからインストール。 homebrew（Homebrew 4.4.14） コマンドラインでインストールするために必要。 git(git version 2.39.5 (Apple Git-154)) homebrewでインストール golang(go version go1.23.4 darwin/arm64) homebrewでインストール clipy コピー履歴管理。homebrewでインストール 設定変更# 以下の設定を変更。 キーマップの変更# cntlキーとcommandキーを入れ替え。Windowsのキー配置に慣れているので、これをやらないと気持ち悪い。 GitHubの秘密鍵配置# LinuxからGitHubの秘密鍵をコピーして配置。ssh -T github.comで動作確認。 llの導入# Linuxでllをする癖がついているので、Macにも導入。エイリアスにls -lを設定。 ホットコーナー# ホットコーナーで右下をスリープに。設定 \u003e デスクトップとDock \u003e ホットコーナーで設定。 .DS_Storeや._xxxを作らないようにする。# 以下のコマンド。 defaults write com.apple.desktopservices DSDontWriteNetworkStores True killall Finder 微信 支付宝","scraped_at":"2025-07-12T21:17:58.788492895+09:00","word_count":98,"content_hash":"b844e241cd5cc6c29c1afe5b9a6afbb3"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/aws-root-mfa/","title":"AWSのルートユーザのMFAを設定する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAWSのまネコンにrootでログインしようとすると、MFAを設定するようにと警告が出るようになりました。\u003c/p\u003e\n\u003cp\u003eどうやら、rootでログインするにはMFAしないといけなくなったようです。\u003c/p\u003e\n\u003ch2 id=\"方法\"\u003e方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eということで、MFAを設定します。\u003c/p\u003e\n\u003cp\u003e以前からGoogleAuthenticatorにGitHubを登録していますので、AWSも同様にGoogleAuthenticatorに登録します。\u003c/p\u003e\n\u003ch3 id=\"mfaの選択\"\u003eMFAの選択\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#mfaの選択\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eGoogleAuthenticatorを使用したいので、中央の選択肢「Authenticator app」を選択します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"qrコードを読ませる\"\u003eQRコードを読ませる\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#qrコードを読ませる\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e②の\u003ccode\u003eShow QR code\u003c/code\u003eをクリックして、QRコードを表示します。GoogleAuthenticatorでそのQRコードを読み込みます。\u003c/p\u003e\n\u003cp\u003e③のMFA Codeの1と2にGoogleAuthenticatorで表示された番号を入力します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"完了\"\u003e完了\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#完了\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eこの画面に遷移すれば完了です。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./03.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# AWSのまネコンにrootでログインしようとすると、MFAを設定するようにと警告が出るようになりました。 どうやら、rootでログインするにはMFAしないといけなくなったようです。 方法# ということで、MFAを設定します。 以前からGoogleAuthenticatorにGitHubを登録していますので、AWSも同様にGoogleAuthenticatorに登録します。 MFAの選択# GoogleAuthenticatorを使用したいので、中央の選択肢「Authenticator app」を選択します。 QRコードを読ませる# ②のShow QR codeをクリックして、QRコードを表示します。GoogleAuthenticatorでそのQRコードを読み込みます。 ③のMFA Codeの1と2にGoogleAuthenticatorで表示された番号を入力します。 完了# この画面に遷移すれば完了です。 微信 支付宝","scraped_at":"2025-07-12T21:17:59.987579641+09:00","word_count":19,"content_hash":"c965ed3bd423b9ce2cd123a828460e4b"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/aws-cli-make-kms-key/","title":"KMSのキーをAWS-CLIから操作する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e検証でKMSのキーを作り、暗号化したいです。\u003c/p\u003e\n\u003cp\u003eマネコンで画面を切り替えて作るのが面倒ですし、アプリをその都度つくるのも手間です。\u003c/p\u003e\n\u003cp\u003eなので、AWS-CLIでやってみました。\u003c/p\u003e\n\u003ch2 id=\"2-方法\"\u003e2. 方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"21-キーを作成する\"\u003e2.1. キーを作成する\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-キーを作成する\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下のコマンドで作成します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws kms create-key --description \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u0026lt;key_description\u0026gt;\u0026#34;\u003c/span\u003e --tags \u0026lt;tags\u0026gt; --alias \u0026lt;alias_name\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e具体的には以下のように記述します。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e--alias\u003c/code\u003eでエイリアスを入力しておかないと、一覧で何のキーかわからなくなります。なので、エイリアスの入力はmustだと思います。また、\u003ccode\u003e--tags\u003c/code\u003eは便宜上入れておいたほうがいい程度です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws kms create-key --description \u003cspan style=\"color:#48b685\"\u003e\u0026#34;My Custom Key\u0026#34;\u003c/span\u003e --tags \u003cspan style=\"color:#ef6155\"\u003eKey\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003eenv,Value\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003estag --alias my-custom-key-alias\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"22-作ったkmsのキーで暗号化\"\u003e2.2. 作ったKMSのキーで暗号化\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-作ったkmsのキーで暗号化\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下で暗号化します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws kms encrypt --key-id \u0026lt;KMS_KEY_ARN\u0026gt; --plaintext \u0026lt;SECRET_VALUE\u0026gt; --output text --query CiphertextBlob\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e具体的には以下です。\u003ccode\u003epassword\u003c/code\u003eという文字列を暗号化しようとしています。\u003c/p\u003e\n\u003cp\u003eなお、ARNはボヤかしてます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws kms encrypt --key-id arn:aws:kms:ap-northeast-1:123456789012:key/653e48ee-38e1-478f-8c6b-ac92b5c52700 --plaintext password  --output text --query CiphertextBlob\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上記の出力結果は以下です。パッと見ても何の文字列かわかりません。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eAQICAHiYg12Xb/sRfQG/hRwvTC5hopbu6K32E5WzOz6mMwMW1QFlob9APF/ojVWFC32QmfpfAAAAZDBiBgkqhkiG9w0BBwagVTBTAgEAME4GCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM7DHbSkGv5TiMeMfvAgEQgCG3fzOE1mMxaxW7eU2GXyy+/PK3rqEKAh+nt+mIMmRBu1s=\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"23-kmsのキーで復号\"\u003e2.3. KMSのキーで復号\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#23-kmsのキーで復号\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003ch4 id=\"231-文字列をファイルに書く\"\u003e2.3.1. 文字列をファイルに書く\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#231-文字列をファイルに書く\"\u003e#\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003e/\u003c/code\u003eのようなエスケープ文字もあるので、暗号化された文字列をファイルに書きます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eecho \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u0026lt;encrypted_string\u0026gt;\u0026#34;\u003c/span\u003e \u0026gt; encrypted_data.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"232-kmsキーのarnを取得する\"\u003e2.3.2. KMSキーのARNを取得する\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#232-kmsキーのarnを取得する\"\u003e#\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e\u0026lt;key_id\u0026gt; には、使用したKMSキーのIDまたはエイリアスを指定します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws kms describe-key --key-id \u0026lt;key_id\u0026gt; --query \u003cspan style=\"color:#48b685\"\u003e\u0026#34;KeyMetadata.Arn\u0026#34;\u003c/span\u003e --output text\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"233-aws-kms-decrypt-コマンドを使って復号する\"\u003e2.3.3. aws kms decrypt コマンドを使って復号する\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#233-aws-kms-decrypt-コマンドを使って復号する\"\u003e#\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e\u0026lt;key_arn\u0026gt; はKMSキーのARNを指定します。これで復号します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws kms decrypt --ciphertext-blob fileb://encrypted_data.txt --key-id \u0026lt;key_arn\u0026gt; --query Plaintext --output text | base64 --decode\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# 検証でKMSのキーを作り、暗号化したいです。 マネコンで画面を切り替えて作るのが面倒ですし、アプリをその都度つくるのも手間です。 なので、AWS-CLIでやってみました。 2. 方法# 2.1. キーを作成する# 以下のコマンドで作成します。 aws kms create-key --description \"\u003ckey_description\u003e\" --tags \u003ctags\u003e --alias \u003calias_name\u003e 具体的には以下のように記述します。 --aliasでエイリアスを入力しておかないと、一覧で何のキーかわからなくなります。なので、エイリアスの入力はmustだと思います。また、--tagsは便宜上入れておいたほうがいい程度です。 aws kms create-key --description \"My Custom Key\" --tags Key=env,Value=stag --alias my-custom-key-alias 2.2. 作ったKMSのキーで暗号化# 以下で暗号化します。 aws kms encrypt --key-id \u003cKMS_KEY_ARN\u003e --plaintext \u003cSECRET_VALUE\u003e --output text --query CiphertextBlob 具体的には以下です。passwordという文字列を暗号化しようとしています。 なお、ARNはボヤかしてます。 aws kms encrypt --key-id arn:aws:kms:ap-northeast-1:123456789012:key/653e48ee-38e1-478f-8c6b-ac92b5c52700 --plaintext password --output text --query CiphertextBlob 上記の出力結果は以下です。パッと見ても何の文字列かわかりません。 AQICAHiYg12Xb/sRfQG/hRwvTC5hopbu6K32E5WzOz6mMwMW1QFlob9APF/ojVWFC32QmfpfAAAAZDBiBgkqhkiG9w0BBwagVTBTAgEAME4GCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM7DHbSkGv5TiMeMfvAgEQgCG3fzOE1mMxaxW7eU2GXyy+/PK3rqEKAh+nt+mIMmRBu1s= 2.3. KMSのキーで復号# 2.3.1. 文字列をファイルに書く# /のようなエスケープ文字もあるので、暗号化された文字列をファイルに書きます。 echo \"\u003cencrypted_string\u003e\" \u003e encrypted_data.txt 2.3.2. KMSキーのARNを取得する# \u003ckey_id\u003e には、使用したKMSキーのIDまたはエイリアスを指定します。 aws kms describe-key --key-id \u003ckey_id\u003e --query \"KeyMetadata.Arn\" --output text 2.3.3. aws kms decrypt コマンドを使って復号する# \u003ckey_arn\u003e はKMSキーのARNを指定します。これで復号します。 aws kms decrypt --ciphertext-blob fileb://encrypted_data.txt --key-id \u003ckey_arn\u003e --query Plaintext --output text | base64 --decode 微信 支付宝","scraped_at":"2025-07-12T21:18:02.33274148+09:00","word_count":106,"content_hash":"b71429be7bc6b4cb689ec16f9e5d793b"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/loudfrotn_sub_index/","title":"CloudFrontのサブディレクトリへのアクセスにindex.htmlを返したい。terraformで。","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCloudFrontとS3でHugoのサイトをホスティングしたいです。\u003c/p\u003e\n\u003cp\u003eサブディレクトリにindex.htmlはあるのですが、Hugoで生成されるhrefにはディレクトリまで書かれた状態で、index.htmlまで記述されません。\u003c/p\u003e\n\u003cp\u003eなので、いざリンクをクリックすると、404 NOT FOUNDの扱いになってしまいます。ルートディレクトリはindex.htmlを返すので、同じようにサブディレクトリでもindex.htmlを返してくれればいいのにと思います。\u003c/p\u003e\n\u003cp\u003eapacheやnginxだと、何もしないでもでindex.htmlを返却するような定義がconfigで定義されています。一方、CloudFrontはCloudFront Functionsを実装しないと実現できません。\u003c/p\u003e\n\u003ch2 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCloudFront Functionsを実装して、サブディレクトリでもindex.htmlを返すようにします。\u003c/p\u003e\n\u003cp\u003eコードは以下のページのをそのまま使用します。AWSが提供しているコードなので、心配ないはず！\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/aws-samples/amazon-cloudfront-functions/blob/main/url-rewrite-single-page-apps/index.js\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eamazon-cloudfront-functions/url-rewrite-single-page-apps/index.js at main · aws-samples/amazon-cloudfront-functions\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eterraformの\u003ccode\u003edefault_cache_behavior\u003c/code\u003eの中に\u003ccode\u003efunction_association\u003c/code\u003eを追記します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-hcl\" data-lang=\"hcl\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_cloudfront_distribution\u0026#34; \u0026#34;doc_cfront\u0026#34;\u003c/span\u003e {\n\n\u003cspan style=\"color:#ef6155\"\u003e~~\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e省略\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e~~\u003c/span\u003e\n\n  \u003cspan style=\"color:#815ba4\"\u003edefault_cache_behavior\u003c/span\u003e {\n  \n  \u003cspan style=\"color:#ef6155\"\u003e~~\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e省略\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e~~\u003c/span\u003e\n\n    \u003cspan style=\"color:#815ba4\"\u003efunction_association\u003c/span\u003e {\n      event_type   \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;viewer-request\u0026#34;\u003c/span\u003e\n      function_arn \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eaws_cloudfront_function\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003emain\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003earn\u003c/span\u003e\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eそしたら、\u003ccode\u003eaws_cloudfront_function\u003c/code\u003eを追記します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-hcl\" data-lang=\"hcl\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_cloudfront_function\u0026#34; \u0026#34;main\u0026#34;\u003c/span\u003e {\n  name    \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;function\u0026#34;\u003c/span\u003e\n  runtime \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;cloudfront-js-1.0\u0026#34;\u003c/span\u003e\n  comment \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;default directory index\u0026#34;\u003c/span\u003e\n  publish \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#fec418\"\u003etrue\u003c/span\u003e\n  code    \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003efile\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;./CloudFront_Functions/function.js\u0026#34;\u003c/span\u003e)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# CloudFrontとS3でHugoのサイトをホスティングしたいです。 サブディレクトリにindex.htmlはあるのですが、Hugoで生成されるhrefにはディレクトリまで書かれた状態で、index.htmlまで記述されません。 なので、いざリンクをクリックすると、404 NOT FOUNDの扱いになってしまいます。ルートディレクトリはindex.htmlを返すので、同じようにサブディレクトリでもindex.htmlを返してくれればいいのにと思います。 apacheやnginxだと、何もしないでもでindex.htmlを返却するような定義がconfigで定義されています。一方、CloudFrontはCloudFront Functionsを実装しないと実現できません。 対応# CloudFront Functionsを実装して、サブディレクトリでもindex.htmlを返すようにします。 コードは以下のページのをそのまま使用します。AWSが提供しているコードなので、心配ないはず！ amazon-cloudfront-functions/url-rewrite-single-page-apps/index.js at main · aws-samples/amazon-cloudfront-functions terraformのdefault_cache_behaviorの中にfunction_associationを追記します。 resource \"aws_cloudfront_distribution\" \"doc_cfront\" { ~~省略~~ default_cache_behavior { ~~省略~~ function_association { event_type = \"viewer-request\" function_arn = aws_cloudfront_function.main.arn } } } そしたら、aws_cloudfront_functionを追記します。 resource \"aws_cloudfront_function\" \"main\" { name = \"function\" runtime = \"cloudfront-js-1.0\" comment = \"default directory index\" publish = true code = file(\"./CloudFront_Functions/function.js\") } 微信 支付宝","scraped_at":"2025-07-12T21:18:04.620764383+09:00","word_count":62,"content_hash":"4e706819a6a28269324af6bd5e9a28aa"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/cloudfrotn_s3_acl/","title":"CloudFrontのログをS3に書き出すにはACLの設定が必要","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eホスティングとして、S3に格納しているファイルをhttpsで配信したいです。そんなとき、CloudFrontを使用します。\u003c/p\u003e\n\u003cp\u003eで、どんなアクセスがあったかを知るためにアクセスログを取得したいわけですが、CloudFrontもALBと同じようにS3バケットを作成してそこにログを書き出します。\u003c/p\u003e\n\u003cp\u003eなのですが、ACLのエラーが出るのです。\u003c/p\u003e\n\u003cp\u003eあるあるっぽいのですが、記録に残します。\u003c/p\u003e\n\u003ch2 id=\"事象\"\u003e事象\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#事象\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようにS3バケット作って、CloudFrontのログ定義に入れます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-hcl\" data-lang=\"hcl\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_s3_bucket\u0026#34; \u0026#34;CloudFront_log\u0026#34;\u003c/span\u003e {\n  bucket        \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elocal\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003elog_bucket_name\u003c/span\u003e\n  force_destroy \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#fec418\"\u003etrue\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_cloudfront_distribution\u0026#34; \u0026#34;doc_cfront\u0026#34;\u003c/span\u003e {\n\u003cspan style=\"color:#ef6155\"\u003e~~~\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e省略\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e~~~\u003c/span\u003e\n\n  \u003cspan style=\"color:#815ba4\"\u003elogging_config\u003c/span\u003e {\n    bucket          \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eaws_s3_bucket\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003eCloudFront_log\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003ebucket_domain_name\u003c/span\u003e\n    prefix          \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;cloudfront-logs/\u0026#34;\u003c/span\u003e\n    include_cookies \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#fec418\"\u003efalse\u003c/span\u003e\n  }\n\u003cspan style=\"color:#ef6155\"\u003e~~~\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e省略\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e~~~\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eapplyすると、以下のメッセージが出力されます。「CloudFrontのログに指定したS3バケットがACLアクセスを有効にしていない」という意味です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e│ Error: creating CloudFront Distribution: InvalidArgument: The S3 bucket that you specified for CloudFront logs does not enable ACL access: documents-cloud-front-log.s3.amazonaws.com\n│ \tstatus code: 400, request id: 0bf2109e-5795-45d9-8ce5-7f5e95fb1c95\n│\n│   with aws_cloudfront_distribution._doc_cfront,\n│   on main.tf line 69, in resource “aws_cloudfront_distribution” “ars_doc_cfront”:\n│   69: resource “aws_cloudfront_distribution” “doc_cfront” {\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"対処方法\"\u003e対処方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対処方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAWS公式をみると、アクセスログを設定してね。とあります。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html#AccessLogsBucketAndFileOwnership\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003e標準ログ (アクセスログ) の設定および使用 - Amazon CloudFront\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003epublicにするよう必要はないので、privateで設定。\u003c/p\u003e\n\u003cp\u003eterraformのドキュメントをほぼコピペします。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_acl#with-private-acl\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eaws_s3_bucket_acl | Resources | hashicorp/aws | Terraform | Terraform Registry\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e結果として、以下を追加しました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-hcl\" data-lang=\"hcl\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_s3_bucket_ownership_controls\u0026#34; \u0026#34;CloudFront_log\u0026#34;\u003c/span\u003e {\n  bucket \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eaws_s3_bucket\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003eCloudFront_log\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003eid\u003c/span\u003e\n  \u003cspan style=\"color:#815ba4\"\u003erule\u003c/span\u003e {\n    object_ownership \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;BucketOwnerPreferred\u0026#34;\u003c/span\u003e\n  }\n}\n\n\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_s3_bucket_acl\u0026#34; \u0026#34;CloudFront_log\u0026#34;\u003c/span\u003e {\n  depends_on \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#815ba4\"\u003eaws_s3_bucket_ownership_controls\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003eCloudFront_log\u003c/span\u003e]\n\n  bucket \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eaws_s3_bucket\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003eCloudFront_log\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003eid\u003c/span\u003e\n  acl    \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;private\u0026#34;\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003es3を確認すると、以下のように出力されているのが確認できます。gzファイルを解凍して確認すると、期待したとおりのログが入ってました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ aws --profile xxx s3 ls s3://cloud-front-log/cloudfront-logs/\n2024-07-27 21:22:20       \u003cspan style=\"color:#f99b15\"\u003e3195\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-12.10086366.gz\n2024-07-27 21:42:20       \u003cspan style=\"color:#f99b15\"\u003e2224\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-12.a60f052e.gz\n2024-07-27 21:07:20      \u003cspan style=\"color:#f99b15\"\u003e12400\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-12.ac5df982.gz\n2024-07-27 21:47:20       \u003cspan style=\"color:#f99b15\"\u003e1568\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-12.ca9f6635.gz\n2024-07-27 22:27:20        \u003cspan style=\"color:#f99b15\"\u003e593\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-13.060aeea4.gz\n2024-07-27 22:42:21       \u003cspan style=\"color:#f99b15\"\u003e3509\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-13.20977b26.gz\n2024-07-27 22:32:20       \u003cspan style=\"color:#f99b15\"\u003e3403\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-13.33c2aa9f.gz\n2024-07-27 22:22:21       \u003cspan style=\"color:#f99b15\"\u003e3402\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-13.559055fc.gz\n2024-07-27 22:12:21       \u003cspan style=\"color:#f99b15\"\u003e1590\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-13.60d0d01c.gz\n2024-07-27 22:47:21       \u003cspan style=\"color:#f99b15\"\u003e2044\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-13.9670f633.gz\n2024-07-27 22:17:21       \u003cspan style=\"color:#f99b15\"\u003e5846\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-13.c315ff4e.gz\n2024-07-28 06:48:28        \u003cspan style=\"color:#f99b15\"\u003e599\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-21.2be44196.gz\n2024-07-28 06:38:28       \u003cspan style=\"color:#f99b15\"\u003e1597\u003c/span\u003e ELGI4X5XXXXK.2024-07-27-21.9f14b772.gz\n2024-07-28 13:18:29       \u003cspan style=\"color:#f99b15\"\u003e1667\u003c/span\u003e ELGI4X5XXXXK.2024-07-28-04.2872c2dc.gz\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# ホスティングとして、S3に格納しているファイルをhttpsで配信したいです。そんなとき、CloudFrontを使用します。 で、どんなアクセスがあったかを知るためにアクセスログを取得したいわけですが、CloudFrontもALBと同じようにS3バケットを作成してそこにログを書き出します。 なのですが、ACLのエラーが出るのです。 あるあるっぽいのですが、記録に残します。 事象# 以下のようにS3バケット作って、CloudFrontのログ定義に入れます。 resource \"aws_s3_bucket\" \"CloudFront_log\" { bucket = local.log_bucket_name force_destroy = true } resource \"aws_cloudfront_distribution\" \"doc_cfront\" { ~~~省略~~~ logging_config { bucket = aws_s3_bucket.CloudFront_log.bucket_domain_name prefix = \"cloudfront-logs/\" include_cookies = false } ~~~省略~~~ } applyすると、以下のメッセージが出力されます。「CloudFrontのログに指定したS3バケットがACLアクセスを有効にしていない」という意味です。 │ Error: creating CloudFront Distribution: InvalidArgument: The S3 bucket that you specified for CloudFront logs does not enable ACL access: documents-cloud-front-log.s3.amazonaws.com │ status code: 400, request id: 0bf2109e-5795-45d9-8ce5-7f5e95fb1c95 │ │ with aws_cloudfront_distribution._doc_cfront, │ on main.tf line 69, in resource “aws_cloudfront_distribution” “ars_doc_cfront”: │ 69: resource “aws_cloudfront_distribution” “doc_cfront” { 対処方法# AWS公式をみると、アクセスログを設定してね。とあります。 標準ログ (アクセスログ) の設定および使用 - Amazon CloudFront publicにするよう必要はないので、privateで設定。 terraformのドキュメントをほぼコピペします。 aws_s3_bucket_acl | Resources | hashicorp/aws | Terraform | Terraform Registry 結果として、以下を追加しました。 resource \"aws_s3_bucket_ownership_controls\" \"CloudFront_log\" { bucket = aws_s3_bucket.CloudFront_log.id rule { object_ownership = \"BucketOwnerPreferred\" } } resource \"aws_s3_bucket_acl\" \"CloudFront_log\" { depends_on = [aws_s3_bucket_ownership_controls.CloudFront_log] bucket = aws_s3_bucket.CloudFront_log.id acl = \"private\" } s3を確認すると、以下のように出力されているのが確認できます。gzファイルを解凍して確認すると、期待したとおりのログが入ってました。 $ aws --profile xxx s3 ls s3://cloud-front-log/cloudfront-logs/ 2024-07-27 21:22:20 3195 ELGI4X5XXXXK.2024-07-27-12.10086366.gz 2024-07-27 21:42:20 2224 ELGI4X5XXXXK.2024-07-27-12.a60f052e.gz 2024-07-27 21:07:20 12400 ELGI4X5XXXXK.2024-07-27-12.ac5df982.gz 2024-07-27 21:47:20 1568 ELGI4X5XXXXK.2024-07-27-12.ca9f6635.gz 2024-07-27 22:27:20 593 ELGI4X5XXXXK.2024-07-27-13.060aeea4.gz 2024-07-27 22:42:21 3509 ELGI4X5XXXXK.2024-07-27-13.20977b26.gz 2024-07-27 22:32:20 3403 ELGI4X5XXXXK.2024-07-27-13.33c2aa9f.gz 2024-07-27 22:22:21 3402 ELGI4X5XXXXK.2024-07-27-13.559055fc.gz 2024-07-27 22:12:21 1590 ELGI4X5XXXXK.2024-07-27-13.60d0d01c.gz 2024-07-27 22:47:21 2044 ELGI4X5XXXXK.2024-07-27-13.9670f633.gz 2024-07-27 22:17:21 5846 ELGI4X5XXXXK.2024-07-27-13.c315ff4e.gz 2024-07-28 06:48:28 599 ELGI4X5XXXXK.2024-07-27-21.2be44196.gz 2024-07-28 06:38:28 1597 ELGI4X5XXXXK.2024-07-27-21.9f14b772.gz 2024-07-28 13:18:29 1667 ELGI4X5XXXXK.2024-07-28-04.2872c2dc.gz 微信 支付宝","scraped_at":"2025-07-12T21:18:05.678923505+09:00","word_count":200,"content_hash":"174a5b1b9fbea97a85ef730c56face6f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/alb_log_analyse-at-local/","title":"ALBのログをKibanaを使用してローカルでざっくりと分析する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eALBのログはAthenaで分析するのが便利で楽です。\u003c/p\u003e\n\u003cp\u003eしかし、マネコンを見せたくないという場合もありまして、その場合はS3からアクセスログをダウンロードして解析することになります。\u003c/p\u003e\n\u003ch2 id=\"やり方\"\u003eやり方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やり方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"ダウンロード\"\u003eダウンロード\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ダウンロード\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下でダウンロードします。ポイントは、オプションの\u003ccode\u003e--recursive\u003c/code\u003eを使用することです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws --profile profile-name s3 cp s3://alb-logs/AWSLogs/999999999999/ . --recursive\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"解凍\"\u003e解凍\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#解凍\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003es3に格納されているログは圧縮されています。そのため、解凍します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003efind ./ -type f -name \u003cspan style=\"color:#48b685\"\u003e\u0026#34;*.gz\u0026#34;\u003c/span\u003e -exec gunzip \u003cspan style=\"color:#5bc4bf\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#f99b15\"\u003e\\;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"１つのファイルに集約\"\u003e１つのファイルに集約\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#１つのファイルに集約\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e後段のkibanaにアップロードするため、解答したファイルを1つのファイルに集約します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003efind ./ -type f -name \u003cspan style=\"color:#48b685\"\u003e\u0026#34;*.log\u0026#34;\u003c/span\u003e | xargs cat\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"kibanaを使う\"\u003eKibanaを使う\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#kibanaを使う\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eELKスタックを使います。\u003c/p\u003e\n\u003cp\u003eELKスタックは以下のdockerで動くのを使うのが便利です。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/deviantony/docker-elk\"\u003ehttps://github.com/deviantony/docker-elk\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"アップロードサイズを1gbに変更\"\u003eアップロードサイズを1GBに変更\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#アップロードサイズを1gbに変更\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eアップロードできるファイルサイズが小さいので、これを1GBに増やします。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"ファイルのアップロード\"\u003eファイルのアップロード\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ファイルのアップロード\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"分析\"\u003e分析\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#分析\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下のようにグラフ化されます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"03.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# ALBのログはAthenaで分析するのが便利で楽です。 しかし、マネコンを見せたくないという場合もありまして、その場合はS3からアクセスログをダウンロードして解析することになります。 やり方# ダウンロード# 以下でダウンロードします。ポイントは、オプションの--recursiveを使用することです。 aws --profile profile-name s3 cp s3://alb-logs/AWSLogs/999999999999/ . --recursive 解凍# s3に格納されているログは圧縮されています。そのため、解凍します。 find ./ -type f -name \"*.gz\" -exec gunzip {} \\; １つのファイルに集約# 後段のkibanaにアップロードするため、解答したファイルを1つのファイルに集約します。 find ./ -type f -name \"*.log\" | xargs cat Kibanaを使う# ELKスタックを使います。 ELKスタックは以下のdockerで動くのを使うのが便利です。 https://github.com/deviantony/docker-elk アップロードサイズを1GBに変更# アップロードできるファイルサイズが小さいので、これを1GBに増やします。 ファイルのアップロード# 分析# 以下のようにグラフ化されます。 微信 支付宝","scraped_at":"2025-07-12T21:18:06.094294187+09:00","word_count":48,"content_hash":"086a52cc3c4c86e7c5f263aafea6fb4f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/alb_log_analyse/","title":"ALBのログをAthenaで分析する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e特異なアクセス数があり（なんらかの攻撃だと疑ったりして。。。）、ALBのログを分析したくてやってみました。\u003c/p\u003e\n\u003ch2 id=\"やり方\"\u003eやり方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やり方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eログをローカルにダウンロードするのもいいのですが、クラウドっぽくAthenaで実施しました。\u003c/p\u003e\n\u003cp\u003eALBのログは圧縮された状態でS3に保管されてます。ただ、Athenaだと圧縮されているファイルだろうがお構いなしに分析してくれます。便利な世の中です。\u003c/p\u003e\n\u003ch3 id=\"テーブル作成\"\u003eテーブル作成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#テーブル作成\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eまずはテーブルを作ります。\u003c/p\u003e\n\u003cp\u003eネット上にある古い記事だと、最新のカラムに対応していませんでした。なので、ちゃんとAWSのドキュメントを参照します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"color:#815ba4\"\u003eCREATE\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eEXTERNAL\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eTABLE\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eIF\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eNOT\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eEXISTS\u003c/span\u003e alb_access_logs (\n            \u003cspan style=\"color:#815ba4\"\u003etype\u003c/span\u003e string,\n            time string,\n            elb string,\n            client_ip string,\n            client_port int,\n            target_ip string,\n            target_port int,\n            request_processing_time double,\n            target_processing_time double,\n            response_processing_time double,\n            elb_status_code int,\n            target_status_code string,\n            received_bytes bigint,\n            sent_bytes bigint,\n            request_verb string,\n            request_url string,\n            request_proto string,\n            user_agent string,\n            ssl_cipher string,\n            ssl_protocol string,\n            target_group_arn string,\n            trace_id string,\n            domain_name string,\n            chosen_cert_arn string,\n            matched_rule_priority string,\n            request_creation_time string,\n            actions_executed string,\n            redirect_url string,\n            lambda_error_reason string,\n            target_port_list string,\n            target_status_code_list string,\n            classification string,\n            classification_reason string,\n            conn_trace_id string\n            )\n            \u003cspan style=\"color:#815ba4\"\u003eROW\u003c/span\u003e FORMAT SERDE \u003cspan style=\"color:#48b685\"\u003e\u0026#39;org.apache.hadoop.hive.serde2.RegexSerDe\u0026#39;\u003c/span\u003e\n            \u003cspan style=\"color:#815ba4\"\u003eWITH\u003c/span\u003e SERDEPROPERTIES (\n            \u003cspan style=\"color:#48b685\"\u003e\u0026#39;serialization.format\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e,\n            \u003cspan style=\"color:#48b685\"\u003e\u0026#39;input.regex\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \n        \u003cspan style=\"color:#48b685\"\u003e\u0026#39;([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*):([0-9]*) ([^ ]*)[:-]([0-9]*) ([-.0-9]*) ([-.0-9]*) ([-.0-9]*) (|[-0-9]*) (-|[-0-9]*) ([-0-9]*) ([-0-9]*) \\\u0026#34;([^ ]*) (.*) (- |[^ ]*)\\\u0026#34; \\\u0026#34;([^\\\u0026#34;]*)\\\u0026#34; ([A-Z0-9-_]+) ([A-Za-z0-9.-]*) ([^ ]*) \\\u0026#34;([^\\\u0026#34;]*)\\\u0026#34; \\\u0026#34;([^\\\u0026#34;]*)\\\u0026#34; \\\u0026#34;([^\\\u0026#34;]*)\\\u0026#34; ([-.0-9]*) ([^ ]*) \\\u0026#34;([^\\\u0026#34;]*)\\\u0026#34; \\\u0026#34;([^\\\u0026#34;]*)\\\u0026#34; \\\u0026#34;([^ ]*)\\\u0026#34; \\\u0026#34;([^\\s]+?)\\\u0026#34; \\\u0026#34;([^\\s]+)\\\u0026#34; \\\u0026#34;([^ ]*)\\\u0026#34; \\\u0026#34;([^ ]*)\\\u0026#34; ?([^ ]*)?( .*)?\u0026#39;\u003c/span\u003e)\n            \u003cspan style=\"color:#815ba4\"\u003eLOCATION\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;s3://alb-logs/AWSLogs/9999999999999/elasticloadbalancing/ap-northeast-1/\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eなお、以下に書いているそのものを使用してます。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.aws.amazon.com/ja_jp/athena/latest/ug/application-load-balancer-logs.html\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eApplication Load Balancer ログのクエリ - Amazon Athena\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e実際に動かしたのは以下のクエリです。\u003c/p\u003e\n\u003ch3 id=\"動作確認\"\u003e動作確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#動作確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eちゃんと動くかを確認します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"color:#815ba4\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eFROM\u003c/span\u003e \nalb_access_logs\n\u003cspan style=\"color:#815ba4\"\u003elimit\u003c/span\u003e \u003cspan style=\"color:#f99b15\"\u003e10\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"アクセス数の多いipアドレスを上位から表示する\"\u003eアクセス数の多いIPアドレスを上位から表示する\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#アクセス数の多いipアドレスを上位から表示する\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e上位から表示します。なお、タイムゾーンはUTCなので、差分の9時間は考慮が必要です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"color:#815ba4\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003edistinct\u003c/span\u003e client_ip, \u003cspan style=\"color:#815ba4\"\u003ecount\u003c/span\u003e() \u003cspan style=\"color:#815ba4\"\u003eas\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003ecount\u003c/span\u003e \n\u003cspan style=\"color:#815ba4\"\u003eFROM\u003c/span\u003e alb_access_logs \n\u003cspan style=\"color:#815ba4\"\u003eWHERE\u003c/span\u003e parse_datetime(time,\u003cspan style=\"color:#48b685\"\u003e\u0026#39;yyyy-MM-dd\u0026#39;\u0026#39;T\u0026#39;\u0026#39;HH:mm:ss.SSSSSS\u0026#39;\u0026#39;Z\u0026#39;\u003c/span\u003e)\n    \u003cspan style=\"color:#815ba4\"\u003eBETWEEN\u003c/span\u003e parse_datetime(\u003cspan style=\"color:#48b685\"\u003e\u0026#39;2024-07-13-00:00:00\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#48b685\"\u003e\u0026#39;yyyy-MM-dd-HH:mm:ss\u0026#39;\u003c/span\u003e) \n    \u003cspan style=\"color:#815ba4\"\u003eAND\u003c/span\u003e     parse_datetime(\u003cspan style=\"color:#48b685\"\u003e\u0026#39;2024-07-14-00:00:00\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#48b685\"\u003e\u0026#39;yyyy-MM-dd-HH:mm:ss\u0026#39;\u003c/span\u003e) \n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.css\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.js\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.png\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.jpg\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#815ba4\"\u003eGROUP\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eBY\u003c/span\u003e client_ip \n\u003cspan style=\"color:#815ba4\"\u003eORDER\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eBY\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003ecount\u003c/span\u003e() \u003cspan style=\"color:#815ba4\"\u003eDESC\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"cssなどを除外して件数を表示\"\u003eCSSなどを除外して件数を表示\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#cssなどを除外して件数を表示\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eHTTPリクエストにはCSS、JS、画像ファイルがあるのでそれらは除外します。\u003c/p\u003e\n\u003cp\u003eちなみにでいうと、IPアドレスでアクセスしてきたり、\u003ccode\u003e.env\u003c/code\u003eを探していたり、SSLしか対応していないのに80番でアクセスしてきたり。いろいろとやられているのがわかりました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"color:#815ba4\"\u003eSELECT\u003c/span\u003e request_url,\u003cspan style=\"color:#815ba4\"\u003ecount\u003c/span\u003e(request_url) \u003cspan style=\"color:#815ba4\"\u003eas\u003c/span\u003e url\n\u003cspan style=\"color:#815ba4\"\u003eFROM\u003c/span\u003e alb_access_logs\n\u003cspan style=\"color:#815ba4\"\u003eWHERE\u003c/span\u003e parse_datetime(time,\u003cspan style=\"color:#48b685\"\u003e\u0026#39;yyyy-MM-dd\u0026#39;\u0026#39;T\u0026#39;\u0026#39;HH:mm:ss.SSSSSS\u0026#39;\u0026#39;Z\u0026#39;\u003c/span\u003e)\n    \u003cspan style=\"color:#815ba4\"\u003eBETWEEN\u003c/span\u003e parse_datetime(\u003cspan style=\"color:#48b685\"\u003e\u0026#39;2024-07-13-00:00:00\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#48b685\"\u003e\u0026#39;yyyy-MM-dd-HH:mm:ss\u0026#39;\u003c/span\u003e) \n    \u003cspan style=\"color:#815ba4\"\u003eAND\u003c/span\u003e     parse_datetime(\u003cspan style=\"color:#48b685\"\u003e\u0026#39;2024-07-14-00:00:00\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#48b685\"\u003e\u0026#39;yyyy-MM-dd-HH:mm:ss\u0026#39;\u003c/span\u003e) \n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.css\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.js\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.png\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.jpg\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#815ba4\"\u003egroup\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eby\u003c/span\u003e request_url\n\u003cspan style=\"color:#815ba4\"\u003eorder\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eby\u003c/span\u003e url \u003cspan style=\"color:#815ba4\"\u003edesc\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"特定のipドレスのログを出力\"\u003e特定のIPドレスのログを出力\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#特定のipドレスのログを出力\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"color:#815ba4\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e\n\u003cspan style=\"color:#815ba4\"\u003eFROM\u003c/span\u003e alb_access_logs\n\u003cspan style=\"color:#815ba4\"\u003eWHERE\u003c/span\u003e parse_datetime(time,\u003cspan style=\"color:#48b685\"\u003e\u0026#39;yyyy-MM-dd\u0026#39;\u0026#39;T\u0026#39;\u0026#39;HH:mm:ss.SSSSSS\u0026#39;\u0026#39;Z\u0026#39;\u003c/span\u003e)\n    \u003cspan style=\"color:#815ba4\"\u003eBETWEEN\u003c/span\u003e parse_datetime(\u003cspan style=\"color:#48b685\"\u003e\u0026#39;2024-07-13-00:00:00\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#48b685\"\u003e\u0026#39;yyyy-MM-dd-HH:mm:ss\u0026#39;\u003c/span\u003e) \n    \u003cspan style=\"color:#815ba4\"\u003eAND\u003c/span\u003e     parse_datetime(\u003cspan style=\"color:#48b685\"\u003e\u0026#39;2024-07-14-00:00:00\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#48b685\"\u003e\u0026#39;yyyy-MM-dd-HH:mm:ss\u0026#39;\u003c/span\u003e) \n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.css\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.js\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.png\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.jpg\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e client_ip \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;216.144.248.27\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"タイムゾーンをjstにする\"\u003eタイムゾーンをJSTにする\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#タイムゾーンをjstにする\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSELECTのwhere句でJST指定しているけど、表示はUTCなのでややこしい。\u003c/p\u003e\n\u003cp\u003e何か他にうまい方法があるのかも。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan style=\"color:#815ba4\"\u003eSELECT\u003c/span\u003e time\n\u003cspan style=\"color:#815ba4\"\u003eFROM\u003c/span\u003e alb_access_logs\n\u003cspan style=\"color:#815ba4\"\u003eWHERE\u003c/span\u003e \n parse_datetime(time,\u003cspan style=\"color:#48b685\"\u003e\u0026#39;yyyy-MM-dd\u0026#39;\u0026#39;T\u0026#39;\u0026#39;HH:mm:ss.SSSSSS\u0026#39;\u0026#39;Z\u0026#39;\u003c/span\u003e)  \u003cspan style=\"color:#815ba4\"\u003eAT\u003c/span\u003e TIME \u003cspan style=\"color:#815ba4\"\u003eZONE\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;Asia/Tokyo\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#815ba4\"\u003ebetween\u003c/span\u003e\n\u003cspan style=\"color:#815ba4\"\u003eTIMESTAMP\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;2024-07-13 19:00:00 Asia/Tokyo\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e\n\u003cspan style=\"color:#815ba4\"\u003eTIMESTAMP\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;2024-07-13 22:00:00 Asia/Tokyo\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.css\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.js\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.png\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#815ba4\"\u003eand\u003c/span\u003e request_url \u003cspan style=\"color:#815ba4\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003elike\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#39;%.jpg\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#815ba4\"\u003eorder\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eby\u003c/span\u003e time\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 特異なアクセス数があり（なんらかの攻撃だと疑ったりして。。。）、ALBのログを分析したくてやってみました。 やり方# ログをローカルにダウンロードするのもいいのですが、クラウドっぽくAthenaで実施しました。 ALBのログは圧縮された状態でS3に保管されてます。ただ、Athenaだと圧縮されているファイルだろうがお構いなしに分析してくれます。便利な世の中です。 テーブル作成# まずはテーブルを作ります。 ネット上にある古い記事だと、最新のカラムに対応していませんでした。なので、ちゃんとAWSのドキュメントを参照します。 CREATE EXTERNAL TABLE IF NOT EXISTS alb_access_logs ( type string, time string, elb string, client_ip string, client_port int, target_ip string, target_port int, request_processing_time double, target_processing_time double, response_processing_time double, elb_status_code int, target_status_code string, received_bytes bigint, sent_bytes bigint, request_verb string, request_url string, request_proto string, user_agent string, ssl_cipher string, ssl_protocol string, target_group_arn string, trace_id string, domain_name string, chosen_cert_arn string, matched_rule_priority string, request_creation_time string, actions_executed string, redirect_url string, lambda_error_reason string, target_port_list string, target_status_code_list string, classification string, classification_reason string, conn_trace_id string ) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe' WITH SERDEPROPERTIES ( 'serialization.format' = '1', 'input.regex' = '([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*):([0-9]*) ([^ ]*)[:-]([0-9]*) ([-.0-9]*) ([-.0-9]*) ([-.0-9]*) (|[-0-9]*) (-|[-0-9]*) ([-0-9]*) ([-0-9]*) \\\"([^ ]*) (.*) (- |[^ ]*)\\\" \\\"([^\\\"]*)\\\" ([A-Z0-9-_]+) ([A-Za-z0-9.-]*) ([^ ]*) \\\"([^\\\"]*)\\\" \\\"([^\\\"]*)\\\" \\\"([^\\\"]*)\\\" ([-.0-9]*) ([^ ]*) \\\"([^\\\"]*)\\\" \\\"([^\\\"]*)\\\" \\\"([^ ]*)\\\" \\\"([^\\s]+?)\\\" \\\"([^\\s]+)\\\" \\\"([^ ]*)\\\" \\\"([^ ]*)\\\" ?([^ ]*)?( .*)?') LOCATION 's3://alb-logs/AWSLogs/9999999999999/elasticloadbalancing/ap-northeast-1/' なお、以下に書いているそのものを使用してます。 Application Load Balancer ログのクエリ - Amazon Athena 実際に動かしたのは以下のクエリです。 動作確認# ちゃんと動くかを確認します。 SELECT * FROM alb_access_logs limit 10 アクセス数の多いIPアドレスを上位から表示する# 上位から表示します。なお、タイムゾーンはUTCなので、差分の9時間は考慮が必要です。 SELECT distinct client_ip, count() as count FROM alb_access_logs WHERE parse_datetime(time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z') BETWEEN parse_datetime('2024-07-13-00:00:00','yyyy-MM-dd-HH:mm:ss') AND parse_datetime('2024-07-14-00:00:00','yyyy-MM-dd-HH:mm:ss') and request_url not like '%.css' and request_url not like '%.js' and request_url not like '%.png' and request_url not like '%.jpg' GROUP BY client_ip ORDER BY count() DESC CSSなどを除外して件数を表示# HTTPリクエストにはCSS、JS、画像ファイルがあるのでそれらは除外します。 ちなみにでいうと、IPアドレスでアクセスしてきたり、.envを探していたり、SSLしか対応していないのに80番でアクセスしてきたり。いろいろとやられているのがわかりました。 SELECT request_url,count(request_url) as url FROM alb_access_logs WHERE parse_datetime(time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z') BETWEEN parse_datetime('2024-07-13-00:00:00','yyyy-MM-dd-HH:mm:ss') AND parse_datetime('2024-07-14-00:00:00','yyyy-MM-dd-HH:mm:ss') and request_url not like '%.css' and request_url not like '%.js' and request_url not like '%.png' and request_url not like '%.jpg' group by request_url order by url desc 特定のIPドレスのログを出力# SELECT * FROM alb_access_logs WHERE parse_datetime(time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z') BETWEEN parse_datetime('2024-07-13-00:00:00','yyyy-MM-dd-HH:mm:ss') AND parse_datetime('2024-07-14-00:00:00','yyyy-MM-dd-HH:mm:ss') and request_url not like '%.css' and request_url not like '%.js' and request_url not like '%.png' and request_url not like '%.jpg' and client_ip = '216.144.248.27' タイムゾーンをJSTにする# SELECTのwhere句でJST指定しているけど、表示はUTCなのでややこしい。 何か他にうまい方法があるのかも。 SELECT time FROM alb_access_logs WHERE parse_datetime(time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z') AT TIME ZONE 'Asia/Tokyo' between TIMESTAMP '2024-07-13 19:00:00 Asia/Tokyo' and TIMESTAMP '2024-07-13 22:00:00 Asia/Tokyo' and request_url not like '%.css' and request_url not like '%.js' and request_url not like '%.png' and request_url not like '%.jpg' order by time 微信 支付宝","scraped_at":"2025-07-12T21:18:09.390717296+09:00","word_count":331,"content_hash":"0350db87b05c6de4e41bbad507b02617"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/get-ec2-windows-memory-uesed/","title":"EC2で実装してるWindowsサーバからメモリ使用率をCloudWatchで取得する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEC2でWindwosを実装しています。\u003c/p\u003e\n\u003cp\u003e性能情報を取得したいのですが、デフォルトだとCPUの情報ぐらいしか使用できないです。\u003c/p\u003e\n\u003cp\u003eメモリの使用率はひと手間かけないといけないのです。\u003c/p\u003e\n\u003ch2 id=\"やったこと\"\u003eやったこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やったこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のページを参考にしました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.serverworks.co.jp/ec2_windows_memory_cloudwatch\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eWindows Server 2022 で メモリ使用率を CloudWatch メトリクスに出してみる。 - サーバーワークスエンジニアブログ\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eこの記事を読めばわかるのですが、自分の記録です。\u003c/p\u003e\n\u003cp\u003e作業の流れは以下です。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIAM Roleに\u003ccode\u003eCloudWatchAgentServer\u003c/code\u003eポリシーをアタッチ\u003c/li\u003e\n\u003cli\u003eCloudWatch AgentをWindowsにインストール\u003c/li\u003e\n\u003cli\u003eCloudWatch Agentの設定ファイルを作成\u003c/li\u003e\n\u003cli\u003eCloudWatch Agentを起動\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e困るのは、最初の作業であるポリシーのアタッチです。terraformの書き方に悩みました。\u003c/p\u003e\n\u003cp\u003e以下でポリシーをロールにアタッチします。\u003ccode\u003eAmazonSSMManagedInstanceCore\u003c/code\u003eと\u003ccode\u003eCloudWatchAgentServerPolicy\u003c/code\u003eをアタッチしてます。（AmazonSSMManagedInstanceCoreは不要かも）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-hcl\" data-lang=\"hcl\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_role\u0026#34; \u0026#34;ec2_role\u0026#34;\u003c/span\u003e {\n  name \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;${var.name_prefix}-ec2-role\u0026#34;\u003c/span\u003e\n\n  assume_role_policy \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003ejsonencode\u003c/span\u003e({\n    Version \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;2012-10-17\u0026#34;\u003c/span\u003e,\n    Statement \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e [\n      {\n        Effect \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Allow\u0026#34;\u003c/span\u003e,\n        Principal \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e {\n          Service \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ec2.amazonaws.com\u0026#34;\u003c/span\u003e\n        },\n        Action \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;sts:AssumeRole\u0026#34;\u003c/span\u003e\n      }\n    ]\n  })\n}\n\n\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_role_policy_attachment\u0026#34; \u0026#34;ssm_policy_attachment\u0026#34;\u003c/span\u003e {\n  role       \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eaws_iam_role\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003eec2_role\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003ename\u003c/span\u003e\n  policy_arn \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\u0026#34;\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_role_policy_attachment\u0026#34; \u0026#34;cloudwatch_agent_policy_attachment\u0026#34;\u003c/span\u003e {\n  role       \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eaws_iam_role\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003eec2_role\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003ename\u003c/span\u003e\n  policy_arn \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy\u0026#34;\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_instance_profile\u0026#34; \u0026#34;ec2_instance_profile\u0026#34;\u003c/span\u003e {\n  name \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;${var.name_prefix}-ec2-instance-profile\u0026#34;\u003c/span\u003e\n  role \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eaws_iam_role\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003eec2_role\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003ename\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上のロールをEC2の\u003ccode\u003eiam_instance_profile\u003c/code\u003eに割り当てます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-hcl\" data-lang=\"hcl\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_instance\u0026#34; \u0026#34;windows\u0026#34;\u003c/span\u003e {\n  iam_instance_profile \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003eaws_iam_instance_profile\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003eec2_instance_profile\u003c/span\u003e.\u003cspan style=\"color:#815ba4\"\u003ename\u003c/span\u003e\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"見え方\"\u003e見え方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#見え方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCloudWatchからMetricsを選択。その後にCWAgentをクリック。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eこんな感じのグラフが表示されます。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# EC2でWindwosを実装しています。 性能情報を取得したいのですが、デフォルトだとCPUの情報ぐらいしか使用できないです。 メモリの使用率はひと手間かけないといけないのです。 やったこと# 以下のページを参考にしました。 Windows Server 2022 で メモリ使用率を CloudWatch メトリクスに出してみる。 - サーバーワークスエンジニアブログ この記事を読めばわかるのですが、自分の記録です。 作業の流れは以下です。 IAM RoleにCloudWatchAgentServerポリシーをアタッチ CloudWatch AgentをWindowsにインストール CloudWatch Agentの設定ファイルを作成 CloudWatch Agentを起動 困るのは、最初の作業であるポリシーのアタッチです。terraformの書き方に悩みました。 以下でポリシーをロールにアタッチします。AmazonSSMManagedInstanceCoreとCloudWatchAgentServerPolicyをアタッチしてます。（AmazonSSMManagedInstanceCoreは不要かも） resource \"aws_iam_role\" \"ec2_role\" { name = \"${var.name_prefix}-ec2-role\" assume_role_policy = jsonencode({ Version = \"2012-10-17\", Statement = [ { Effect = \"Allow\", Principal = { Service = \"ec2.amazonaws.com\" }, Action = \"sts:AssumeRole\" } ] }) } resource \"aws_iam_role_policy_attachment\" \"ssm_policy_attachment\" { role = aws_iam_role.ec2_role.name policy_arn = \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\" } resource \"aws_iam_role_policy_attachment\" \"cloudwatch_agent_policy_attachment\" { role = aws_iam_role.ec2_role.name policy_arn = \"arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy\" } resource \"aws_iam_instance_profile\" \"ec2_instance_profile\" { name = \"${var.name_prefix}-ec2-instance-profile\" role = aws_iam_role.ec2_role.name } 上のロールをEC2のiam_instance_profileに割り当てます。 resource \"aws_instance\" \"windows\" { iam_instance_profile = aws_iam_instance_profile.ec2_instance_profile.name } 見え方# CloudWatchからMetricsを選択。その後にCWAgentをクリック。 こんな感じのグラフが表示されます。 微信 支付宝","scraped_at":"2025-07-12T21:18:11.837377809+09:00","word_count":108,"content_hash":"f2051fe1145893d3d74232e3d2febaa1"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/study-firelens/","title":"firelens、firehoseを素振りした記録","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003efirelensとfirehoseを素振りしました。その記録です。\u003c/p\u003e\n\u003cp\u003e成果物は以下のリポジトリに置いてます。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yamadatt/aws-ecs-firelens\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eyamadatt/aws-ecs-firelens: firelensとfirehoseの素振り\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"参考にした記事\"\u003e参考にした記事\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考にした記事\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e先人たちの記事に感謝。\u003c/p\u003e\n\u003ch3 id=\"firelens\"\u003efirelens\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#firelens\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://tech.nri-net.com/entry/aws_firelens_output_ecs_logs_to_s3_cloudwatch\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eAWS FireLensを使ってECSコンテナのログをS3とCloudWatch logsに出力する - NRIネットコムBlog\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://engineering.dena.com/blog/2022/08/firelens/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eAWS ECS on Fargate + FireLens で大きなログが扱いやすくなった話 | BLOG - DeNA Engineering\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zenn.dev/shelfy/articles/c6ee49ff14d3bf\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eFluent Bit の低レイヤーに飛び込んでみて、わかったこと\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"firehose\"\u003efirehose\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#firehose\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://qiita.com/__yamakawa/items/12f3b15df3e5df7df12a\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eWEBサービスのログの保管、監視環境をTerraformで構築する【AWS】 #AWS - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# firelensとfirehoseを素振りしました。その記録です。 成果物は以下のリポジトリに置いてます。 yamadatt/aws-ecs-firelens: firelensとfirehoseの素振り 参考にした記事# 先人たちの記事に感謝。 firelens# AWS FireLensを使ってECSコンテナのログをS3とCloudWatch logsに出力する - NRIネットコムBlog AWS ECS on Fargate + FireLens で大きなログが扱いやすくなった話 | BLOG - DeNA Engineering Fluent Bit の低レイヤーに飛び込んでみて、わかったこと firehose# WEBサービスのログの保管、監視環境をTerraformで構築する【AWS】 #AWS - Qiita 微信 支付宝","scraped_at":"2025-07-12T21:18:12.552683086+09:00","word_count":35,"content_hash":"125b1dd7d4de659fd66fa8fcb5e856eb"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/s3-delete-force/","title":"terraformのdestroy時、S3バケットにファイルが残っていても削除する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAWSで動作確認をすることが多いです。\u003c/p\u003e\n\u003cp\u003eスピーディーに検証したくてterraformで構築することが多いです。その際、S3の削除に困ることがあります。\u003c/p\u003e\n\u003cp\u003eS3バケットにファイルが残っていると、削除できないんですよね。\u003c/p\u003e\n\u003ch2 id=\"2-やり方\"\u003e2. やり方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-やり方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のように\u003ccode\u003eforce_destroy = true\u003c/code\u003eを記述するだけです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_s3_bucket\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;this\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003ebucket\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;alb-logs\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eforce_destroy\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# AWSで動作確認をすることが多いです。 スピーディーに検証したくてterraformで構築することが多いです。その際、S3の削除に困ることがあります。 S3バケットにファイルが残っていると、削除できないんですよね。 2. やり方# 以下のようにforce_destroy = trueを記述するだけです。 resource \"aws_s3_bucket\" \"this\" { bucket = \"alb-logs\" force_destroy = true } 微信 支付宝","scraped_at":"2025-07-12T21:18:13.186157018+09:00","word_count":23,"content_hash":"f46f73f546118796b47fdbb88eb05b9d"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/rds-change-instance-type/","title":"RDSのインスタンスタイプを変更する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRDSのインスタンスタイプ変更って、簡単にできるのかを知りたくなりました。\u003c/p\u003e\n\u003cp\u003eこういうのを肌感覚で知っておくのは大事かなと思って。\u003c/p\u003e\n\u003ch2 id=\"得た肌感覚\"\u003e得た肌感覚\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#得た肌感覚\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eスペック変更は簡単。\u003c/p\u003e\n\u003cp\u003eスペック変更のときはDBにアクセスできるのかな？\u003c/p\u003e\n\u003cp\u003e後で調べようと思います。\u003c/p\u003e\n\u003ch2 id=\"スペックアップ\"\u003eスペックアップ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#スペックアップ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようにスペックをアップしました。約6分でインスタンスタイプが変更されました。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e変更前：db.t3.micro\u003c/li\u003e\n\u003cli\u003e変更後：db.t3.small\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"スペックダウン\"\u003eスペックダウン\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#スペックダウン\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようにスペックをダウンしました。約6分でインスタンスタイプが変更されました。変更の時間はスペックアップとスペックダウンで変わりませんでした。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e変更前：db.t3.small\u003c/li\u003e\n\u003cli\u003e変更後：db.t3.micro\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# RDSのインスタンスタイプ変更って、簡単にできるのかを知りたくなりました。 こういうのを肌感覚で知っておくのは大事かなと思って。 得た肌感覚# スペック変更は簡単。 スペック変更のときはDBにアクセスできるのかな？ 後で調べようと思います。 スペックアップ# 以下のようにスペックをアップしました。約6分でインスタンスタイプが変更されました。 変更前：db.t3.micro 変更後：db.t3.small スペックダウン# 以下のようにスペックをダウンしました。約6分でインスタンスタイプが変更されました。変更の時間はスペックアップとスペックダウンで変わりませんでした。 変更前：db.t3.small 変更後：db.t3.micro 微信 支付宝","scraped_at":"2025-07-12T21:18:16.710949032+09:00","word_count":17,"content_hash":"8bf0584950bbb02c31ae39c359e1bbfd"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/rds-gp2-to-gp3/","title":"RDSのストレージタイプをgp2からgp3に変更する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e少しでもコストを削減したく、RDSのストレージをgp2から効率の良いgp3に変更しました。\u003c/p\u003e\n\u003ch2 id=\"更新手順\"\u003e更新手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#更新手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eマネコンの設定変更画面からgp3に変更します。\u003c/p\u003e\n\u003cp\u003e変更の確認で以下のように「変更のサマリー」でストレージだけ変更されていればOKです。\u003c/p\u003e\n\u003cp\u003e20GBのストレージ変更で約20分でした。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 少しでもコストを削減したく、RDSのストレージをgp2から効率の良いgp3に変更しました。 更新手順# マネコンの設定変更画面からgp3に変更します。 変更の確認で以下のように「変更のサマリー」でストレージだけ変更されていればOKです。 20GBのストレージ変更で約20分でした。 微信 支付宝","scraped_at":"2025-07-12T21:18:17.338292477+09:00","word_count":8,"content_hash":"391f4a635d267bb21cf6196b2f16a272"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/rds-update-ca/","title":"RDSのCAを更新する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRDSで使用しているCA証明書の有効期限が2024年8月23日で切れます。\u003c/p\u003e\n\u003cp\u003eというわけで、証明書の更新をした記録です。\u003c/p\u003e\n\u003ch2 id=\"更新手順\"\u003e更新手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#更新手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e画像はテストなので、DB識別子は適当です。\u003c/p\u003e\n\u003cp\u003e対象のDBを選択して「今すぐアップデートを適用」を押します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eCAを選択します。特別な要件がなければ、デフォルトを選択します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eデータベースを再起動する必要がないということを確認して、「確認」ボタンを押します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"03.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eステータスが変更中となります。5分もかからずに、更新完了です。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"04.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# RDSで使用しているCA証明書の有効期限が2024年8月23日で切れます。 というわけで、証明書の更新をした記録です。 更新手順# 画像はテストなので、DB識別子は適当です。 対象のDBを選択して「今すぐアップデートを適用」を押します。 CAを選択します。特別な要件がなければ、デフォルトを選択します。 データベースを再起動する必要がないということを確認して、「確認」ボタンを押します。 ステータスが変更中となります。5分もかからずに、更新完了です。 微信 支付宝","scraped_at":"2025-07-12T21:18:17.772588121+09:00","word_count":11,"content_hash":"d60c28dc1a38ee000d24ab2d84934ca9"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/ubuntu2204-smart/","title":"Ubuntu22.04でS.M.A.R.Tを使いディスク状況を確認する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ePrometheusとGrafanaの環境を改めて構築しようとして、S.M.A.R.Tで情報取得ができませんでした。\u003c/p\u003e\n\u003cp\u003e次回も同じように悩みそうだったので、記録します。\u003c/p\u003e\n\u003ch2 id=\"2-やり方\"\u003e2. やり方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-やり方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下でパッケージをインストールします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt install smartmontools\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e確認対象のディスクを調べます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003esudo fdisk -l\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下が表示されて、\u003ccode\u003e/dev/nvme0n1\u003c/code\u003eとわかります。なお、使用しているのは、NVMEのSSDです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eディスク /dev/nvme0n1: 931.51 GiB, \u003cspan style=\"color:#f99b15\"\u003e1000204886016\u003c/span\u003e バイト, \u003cspan style=\"color:#f99b15\"\u003e1953525168\u003c/span\u003e セクタ\nDisk model: CT1000P2SSD8\n単位: セクタ \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e * \u003cspan style=\"color:#ef6155\"\u003e512\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f99b15\"\u003e512\u003c/span\u003e バイト\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\nセクタサイズ \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e論理 / 物理\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e512\u003c/span\u003e バイト / \u003cspan style=\"color:#f99b15\"\u003e512\u003c/span\u003e バイト\nI/O サイズ \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e最小 / 推奨\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e512\u003c/span\u003e バイト / \u003cspan style=\"color:#f99b15\"\u003e512\u003c/span\u003e バイト\nディスクラベルのタイプ: gpt\nディスク識別子: 47FCC7D8-B40C-4E8F-B742-FDF477595379\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e情報を取得できます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo smartctl -a /dev/nvme0n1\nsmartctl 7.2 2020-12-30 r5155 \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003ex86_64-linux-5.15.0-56-generic\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003elocal build\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\nCopyright \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eC\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e 2002-20, Bruce Allen, Christian Franke, www.smartmontools.org\n\n\u003cspan style=\"color:#5bc4bf\"\u003e===\u003c/span\u003e START OF INFORMATION \u003cspan style=\"color:#ef6155\"\u003eSECTION\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e===\u003c/span\u003e\nModel Number:                       CT1000P2SSD8\nSerial Number:                      2221E634A078\nFirmware Version:                   P2CR048\nPCI Vendor/Subsystem ID:            0xc0a9\nIEEE OUI Identifier:                0x00a075\nTotal NVM Capacity:                 1,000,204,886,016 \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e1.00 TB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\nUnallocated NVM Capacity:           \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\nController ID:                      \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e\nNVMe Version:                       1.3\nNumber of Namespaces:               \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e\nNamespace \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e Size/Capacity:          1,000,204,886,016 \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e1.00 TB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\nNamespace \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e Formatted LBA Size:     \u003cspan style=\"color:#f99b15\"\u003e512\u003c/span\u003e\nNamespace \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e IEEE EUI-64:            00a075 \u003cspan style=\"color:#f99b15\"\u003e6400000155\u003c/span\u003e\nLocal Time is:                      Mon Jan \u003cspan style=\"color:#f99b15\"\u003e16\u003c/span\u003e 16:16:37 \u003cspan style=\"color:#f99b15\"\u003e2023\u003c/span\u003e JST\nFirmware Updates \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e0x12\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e:            \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e Slot, no Reset required\nOptional Admin Commands \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e0x0017\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e:   Security Format Frmw_DL Self_Test\nOptional NVM Commands \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e0x005e\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e:     Wr_Unc DS_Mngmt Wr_Zero Sav/Sel_Feat Timestmp\nLog Page Attributes \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e0x0e\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e:         Cmd_Eff_Lg Ext_Get_Lg Telmtry_Lg\nMaximum Data Transfer Size:         \u003cspan style=\"color:#f99b15\"\u003e64\u003c/span\u003e Pages\nWarning  Comp. Temp. Threshold:     \u003cspan style=\"color:#f99b15\"\u003e70\u003c/span\u003e Celsius\nCritical Comp. Temp. Threshold:     \u003cspan style=\"color:#f99b15\"\u003e85\u003c/span\u003e Celsius\n\nSupported Power States\nSt Op     Max   Active     Idle   RL RT WL WT  Ent_Lat  Ex_Lat\n \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e +     3.50W       -        -    \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e        \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e       \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\n \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e +     1.90W       -        -    \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e        \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e       \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\n \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e +     1.50W       -        -    \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e        \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e       \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\n \u003cspan style=\"color:#f99b15\"\u003e3\u003c/span\u003e -   0.0700W       -        -    \u003cspan style=\"color:#f99b15\"\u003e3\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e3\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e3\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e3\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e5000\u003c/span\u003e    \u003cspan style=\"color:#f99b15\"\u003e1900\u003c/span\u003e\n \u003cspan style=\"color:#f99b15\"\u003e4\u003c/span\u003e -   0.0020W       -        -    \u003cspan style=\"color:#f99b15\"\u003e4\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e4\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e4\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e4\u003c/span\u003e    \u003cspan style=\"color:#f99b15\"\u003e13000\u003c/span\u003e  \u003cspan style=\"color:#f99b15\"\u003e100000\u003c/span\u003e\n\nSupported LBA Sizes \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eNSID 0x1\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\nId Fmt  Data  Metadt  Rel_Perf\n \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e +     \u003cspan style=\"color:#f99b15\"\u003e512\u003c/span\u003e       \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e         \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e\n \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e -    \u003cspan style=\"color:#f99b15\"\u003e4096\u003c/span\u003e       \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e         \u003cspan style=\"color:#ef6155\"\u003e0\u003c/span\u003e\n\n\u003cspan style=\"color:#5bc4bf\"\u003e===\u003c/span\u003e START OF SMART DATA \u003cspan style=\"color:#ef6155\"\u003eSECTION\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e===\u003c/span\u003e\nSMART overall-health self-assessment test result: PASSED\n\nSMART/Health Information \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eNVMe Log 0x02\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\nCritical Warning:                   0x00\nTemperature:                        \u003cspan style=\"color:#f99b15\"\u003e40\u003c/span\u003e Celsius\nAvailable Spare:                    100%\nAvailable Spare Threshold:          5%\nPercentage Used:                    3%\nData Units Read:                    43,751,888 \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e22.4 TB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\nData Units Written:                 54,651,876 \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e27.9 TB\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\nHost Read Commands:                 184,247,657\nHost Write Commands:                184,829,601\nController Busy Time:               2,048\nPower Cycles:                       \u003cspan style=\"color:#f99b15\"\u003e97\u003c/span\u003e\nPower On Hours:                     4,254\nUnsafe Shutdowns:                   \u003cspan style=\"color:#f99b15\"\u003e35\u003c/span\u003e\nMedia and Data Integrity Errors:    \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\nError Information Log Entries:      166,207\nWarning  Comp. Temperature Time:    \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\nCritical Comp. Temperature Time:    \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\nTemperature Sensor 1:               \u003cspan style=\"color:#f99b15\"\u003e52\u003c/span\u003e Celsius\n\nError Information \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eNVMe Log 0x01, \u003cspan style=\"color:#f99b15\"\u003e16\u003c/span\u003e of \u003cspan style=\"color:#f99b15\"\u003e16\u003c/span\u003e entries\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\nNum   ErrCount  SQId   CmdId  Status  PELoc          LBA  NSID    VS\n  \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166207\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0xc012  0x4004      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n  \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166206\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0xc011  0x4004      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n  \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166205\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0x601b  0x4004      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n  \u003cspan style=\"color:#f99b15\"\u003e3\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166204\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0x601a  0x4004      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n  \u003cspan style=\"color:#f99b15\"\u003e4\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166203\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0x0000  0x4004      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n  \u003cspan style=\"color:#f99b15\"\u003e5\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166202\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0xf003  0x4004      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n  \u003cspan style=\"color:#f99b15\"\u003e6\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166201\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0xe001  0x4004      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n  \u003cspan style=\"color:#f99b15\"\u003e7\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166200\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0xe000  0x4004      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n  \u003cspan style=\"color:#f99b15\"\u003e8\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166199\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0xb010  0x4004      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n  \u003cspan style=\"color:#f99b15\"\u003e9\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166198\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0xa013  0x4004      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n \u003cspan style=\"color:#f99b15\"\u003e10\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166197\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0xc003  0x4005      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n \u003cspan style=\"color:#f99b15\"\u003e11\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166196\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0xc002  0x4005      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n \u003cspan style=\"color:#f99b15\"\u003e12\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166195\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0x401b  0x4005      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n \u003cspan style=\"color:#f99b15\"\u003e13\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166194\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0x401a  0x4005      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n \u003cspan style=\"color:#f99b15\"\u003e14\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166193\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0x9011  0x4005      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n \u003cspan style=\"color:#f99b15\"\u003e15\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e166192\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  0x9010  0x4005      -            \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e     -\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"使用したexporter\"\u003e使用したExporter\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#使用したexporter\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下を使用しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/matusnovak/prometheus-smartctl\"\u003ehttps://github.com/matusnovak/prometheus-smartctl\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e使っていないけど、以下のNVMeに特化したExporterを使用するのでもいいのかも。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/fritchie/nvme_exporter\"\u003ehttps://github.com/fritchie/nvme_exporter\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# PrometheusとGrafanaの環境を改めて構築しようとして、S.M.A.R.Tで情報取得ができませんでした。 次回も同じように悩みそうだったので、記録します。 2. やり方# 以下でパッケージをインストールします。 sudo apt install smartmontools 確認対象のディスクを調べます。 sudo fdisk -l 以下が表示されて、/dev/nvme0n1とわかります。なお、使用しているのは、NVMEのSSDです。 ディスク /dev/nvme0n1: 931.51 GiB, 1000204886016 バイト, 1953525168 セクタ Disk model: CT1000P2SSD8 単位: セクタ (1 * 512 = 512 バイト) セクタサイズ (論理 / 物理): 512 バイト / 512 バイト I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト ディスクラベルのタイプ: gpt ディスク識別子: 47FCC7D8-B40C-4E8F-B742-FDF477595379 情報を取得できます。 sudo smartctl -a /dev/nvme0n1 smartctl 7.2 2020-12-30 r5155 [x86_64-linux-5.15.0-56-generic] (local build) Copyright (C) 2002-20, Bruce Allen, Christian Franke, www.smartmontools.org === START OF INFORMATION SECTION === Model Number: CT1000P2SSD8 Serial Number: 2221E634A078 Firmware Version: P2CR048 PCI Vendor/Subsystem ID: 0xc0a9 IEEE OUI Identifier: 0x00a075 Total NVM Capacity: 1,000,204,886,016 [1.00 TB] Unallocated NVM Capacity: 0 Controller ID: 1 NVMe Version: 1.3 Number of Namespaces: 1 Namespace 1 Size/Capacity: 1,000,204,886,016 [1.00 TB] Namespace 1 Formatted LBA Size: 512 Namespace 1 IEEE EUI-64: 00a075 6400000155 Local Time is: Mon Jan 16 16:16:37 2023 JST Firmware Updates (0x12): 1 Slot, no Reset required Optional Admin Commands (0x0017): Security Format Frmw_DL Self_Test Optional NVM Commands (0x005e): Wr_Unc DS_Mngmt Wr_Zero Sav/Sel_Feat Timestmp Log Page Attributes (0x0e): Cmd_Eff_Lg Ext_Get_Lg Telmtry_Lg Maximum Data Transfer Size: 64 Pages Warning Comp. Temp. Threshold: 70 Celsius Critical Comp. Temp. Threshold: 85 Celsius Supported Power States St Op Max Active Idle RL RT WL WT Ent_Lat Ex_Lat 0 + 3.50W - - 0 0 0 0 0 0 1 + 1.90W - - 1 1 1 1 0 0 2 + 1.50W - - 2 2 2 2 0 0 3 - 0.0700W - - 3 3 3 3 5000 1900 4 - 0.0020W - - 4 4 4 4 13000 100000 Supported LBA Sizes (NSID 0x1) Id Fmt Data Metadt Rel_Perf 0 + 512 0 1 1 - 4096 0 0 === START OF SMART DATA SECTION === SMART overall-health self-assessment test result: PASSED SMART/Health Information (NVMe Log 0x02) Critical Warning: 0x00 Temperature: 40 Celsius Available Spare: 100% Available Spare Threshold: 5% Percentage Used: 3% Data Units Read: 43,751,888 [22.4 TB] Data Units Written: 54,651,876 [27.9 TB] Host Read Commands: 184,247,657 Host Write Commands: 184,829,601 Controller Busy Time: 2,048 Power Cycles: 97 Power On Hours: 4,254 Unsafe Shutdowns: 35 Media and Data Integrity Errors: 0 Error Information Log Entries: 166,207 Warning Comp. Temperature Time: 0 Critical Comp. Temperature Time: 0 Temperature Sensor 1: 52 Celsius Error Information (NVMe Log 0x01, 16 of 16 entries) Num ErrCount SQId CmdId Status PELoc LBA NSID VS 0 166207 0 0xc012 0x4004 - 0 0 - 1 166206 0 0xc011 0x4004 - 0 0 - 2 166205 0 0x601b 0x4004 - 0 0 - 3 166204 0 0x601a 0x4004 - 0 0 - 4 166203 0 0x0000 0x4004 - 0 0 - 5 166202 0 0xf003 0x4004 - 0 0 - 6 166201 0 0xe001 0x4004 - 0 0 - 7 166200 0 0xe000 0x4004 - 0 0 - 8 166199 0 0xb010 0x4004 - 0 0 - 9 166198 0 0xa013 0x4004 - 0 0 - 10 166197 0 0xc003 0x4005 - 0 0 - 11 166196 0 0xc002 0x4005 - 0 0 - 12 166195 0 0x401b 0x4005 - 0 0 - 13 166194 0 0x401a 0x4005 - 0 0 - 14 166193 0 0x9011 0x4005 - 0 0 - 15 166192 0 0x9010 0x4005 - 0 0 - 使用したExporter# 以下を使用しました。 https://github.com/matusnovak/prometheus-smartctl 参考# 使っていないけど、以下のNVMeに特化したExporterを使用するのでもいいのかも。 https://github.com/fritchie/nvme_exporter 微信 支付宝","scraped_at":"2025-07-12T21:18:20.413828754+09:00","word_count":551,"content_hash":"6fd55a7b852b97ca50fc81a58d33aca0"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/secrets-manager-delte-requires-7days/","title":"SecretsManagerを削除するのは最低7日かかる","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003cp\u003e知らなかったので、記録しておきます。\u003c/p\u003e\n\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSecretsManagerの使用料が高いので、パラメータストアを使用するようにしました。\u003c/p\u003e\n\u003cp\u003eそこで、SecrtesManagerのキーを削除しました。\u003c/p\u003e\n\u003ch2 id=\"削除には7日かかる\"\u003e削除には7日かかる\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#削除には7日かかる\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSecretsManagerのキーを削除するには最低7日かかります。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"使用料\"\u003e使用料\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#使用料\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e日々の使用料は、0.013ドルから0ドルになりました。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"知らなかったので、記録しておきます。 背景# SecretsManagerの使用料が高いので、パラメータストアを使用するようにしました。 そこで、SecrtesManagerのキーを削除しました。 削除には7日かかる# SecretsManagerのキーを削除するには最低7日かかります。 使用料# 日々の使用料は、0.013ドルから0ドルになりました。 微信 支付宝","scraped_at":"2025-07-12T21:18:22.12164199+09:00","word_count":10,"content_hash":"de5c844a2b4998a5378fea4f53a874fa"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/whisper-chat-gpt-4o/","title":"whisperとchat-gpt4oを連携してラジオ文字起こし","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e2024年5月13日にchat-gpt4oがリリースされました。\u003c/p\u003e\n\u003cp\u003eラジオ番組の文字起こしをしたく、whisperとchat-gpt4oを連携してやってみたら、思いの外良かったので記録します。\u003c/p\u003e\n\u003ch2 id=\"2-やり方\"\u003e2. やり方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-やり方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e流れは以下のような感じです。\u003c/p\u003e\n\u003cp\u003ewhisperで文字起こし → chat-gpt4oで校正\u003c/p\u003e\n\u003ch3 id=\"whisperで文字起こし\"\u003ewhisperで文字起こし\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#whisperで文字起こし\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003ewhisperは2パターンあります。1つはAPI使用する方法、もう1つはGitHubのコードを使って自宅で文字起こしする方法です。\u003c/p\u003e\n\u003cp\u003e両者を比較すると、smallだと文字起こしの精度はほぼ変わらないです。\u003c/p\u003e\n\u003cp\u003eコストでいうと、APIは1時間の音声で0.7ドルぐらいです。1ドル155円で計算すると、100円ちょっとです。ただ、自宅だと電気代はかかりますが、ほぼ無視していいぐらいの料金です。\u003c/p\u003e\n\u003cp\u003eまた、自宅のGPUを使用できるので、文字起こしスピードは速いです。\u003c/p\u003e\n\u003cp\u003e上記から、文字起こしは自宅で実施します。\u003c/p\u003e\n\u003ch3 id=\"chat-gpt4oの校正\"\u003echat-gpt4oの校正\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#chat-gpt4oの校正\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWhisperで出力した文字を校正します。\u003c/p\u003e\n\u003cp\u003e校正のスピードが速いし、料金も安いです。60分の文字起こしした文字数は2万字ぐらいで、だいたい0.3ドルぐらいです。\u003c/p\u003e\n\u003ch2 id=\"文字起こしと校正\"\u003e文字起こしと校正\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#文字起こしと校正\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e校正前と校正後で比較します。\u003c/p\u003e\n\u003cp\u003e文意で改行してくれたりして、校正すごいです。\u003c/p\u003e\n\u003cp\u003eピックアップすると下表のようになります。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e校正前\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e校正後\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e国政選挙に気密日\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e国政選挙に官房機密費使用疑惑\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e可愛しの自宅を固く捜索した際\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e河井氏の自宅を捜索した際\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e中国新聞がスクープとして放置ました\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e中国新聞がスクープとして報じました。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e疑いが不常\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e疑いが浮上\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e自民党の破罰によるパーティー券裏金事件\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e自民党の派閥によるパーティー券裏金事件\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"文字はある程度で区切る\"\u003e文字はある程度で区切る\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#文字はある程度で区切る\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようにChat-GPTから「テキストは非常に長いため、一度に校正するのが難しいです。」と反応あり。ある程度短くしてテキストを渡す。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eこのように、文意を通しつつ文章全体を整えました。\n申し訳ありませんが、提供いただいたテキストは非常に長いため、一度に校正するのが難しいです。いただいた分を一部ずつ校正させていただきますので、適宜追加してください。まず、最初の部分から始めます：\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"校正前文字起こしした内容\"\u003e校正前（文字起こしした内容）\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#校正前文字起こしした内容\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e総理2800 スガッチ500に続き 国政選挙に気密日\n中国新聞の記者たちが追った 自民党の裏金問題\n2019年の参院選 広島選挙区をめくり\n可愛勝雪元ホーム大臣が 地元の議員や公演会関係者ら100人に対し\n現金をばらまいていたことが判明した 大規模買収事件\nこの事件では検察当局が 可愛しの自宅を固く捜索した際\n当時の安倍政権の幹部4人から 現金合わせて6700万円を受け取った\n疑いを示すメモが応集されていたことを 地元の中国新聞がスクープとして放置\nました メモには総理2800 スガッチ500 幹事長3300\nあまり100などと書いてありこれらの資金が 買収に使われた疑いが不常\nこの報道は大きな話題となり 中国新聞の取材版は2023年度の\n新聞労連ジャーナリズム対象を受賞しました その後も中国新聞はこの問題を追求\nし続け他の選挙区でも現金が配られていた 実態や国政選挙に官房機密費が使われていた\n疑惑などを報じています 自民党の破罰によるパーティー券裏金事件を\n巡る政治と金の問題が国会でも議論される中 今夜はこの問題を取材し続ける\n中国新聞記者の報告をお送りします では今夜のゲストご紹介します\nスタジオにお越しいただきました 中国新聞社東京市社編集部記者の中川\nまさはるさんですどうぞよろしくお願いいたします\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"校正後\"\u003e校正後\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#校正後\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e総理2800 スガッチ500に続き 国政選挙に官房機密費使用疑惑\n\n中国新聞の記者たちが追った 自民党の裏金問題。2019年の参院選、広島選挙区をめぐり、元法務大臣の河井克行氏が地元の議員や後援会関係者など約100人に現金をばらまいていたことが判明した大規模買収事件。この事件では、検察当局が河井氏の自宅を捜索した際、当時の安倍政権の幹部4人から現金合計6700万円を受け取った疑いを示すメモが押収されていたことを、中国新聞がスクープとして報じました。\n\nメモには「総理2800」「スガッチ500」「幹事長3300」「あまり100」などと書かれており、これらの資金が買収に使われた疑いが浮上。この報道は大きな話題となり、中国新聞の取材班は2023年度の新聞労連ジャーナリズム大賞を受賞しました。その後も中国新聞はこの問題を追い続け、他の選挙区でも現金が配られていた実態や国政選挙に官房機密費が使われていた疑惑などを報じています。\n\n自民党の派閥によるパーティー券裏金事件を巡る政治と金の問題が国会でも議論される中、今夜はこの問題を取材し続ける中国新聞記者の報告をお送りします。さて、今夜のゲストをご紹介します。スタジオにお越しいただきました、中国新聞社東京支社編集部記者の中川正治さんです。どうぞよろしくお願いいたします。\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"使ったコード\"\u003e使ったコード\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#使ったコード\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e使用したコードは以下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#5bc4bf\"\u003eimport\u003c/span\u003e (\n\t\u003cspan style=\"color:#48b685\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#48b685\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#48b685\"\u003e\u0026#34;os\u0026#34;\u003c/span\u003e\n\n\t\u003cspan style=\"color:#06b6ef\"\u003eopenai\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;github.com/sashabaranov/go-openai\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emain\u003c/span\u003e() {\n\n\t\u003cspan style=\"color:#06b6ef\"\u003eclient\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eopenai\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eNewClient\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;api-key\u0026#34;\u003c/span\u003e)\n\n\t\u003cspan style=\"color:#06b6ef\"\u003eorder\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e`whisperでラジオを書き起こしました。複数回に分割して書き起こし文書を伝えるので、文意が通るように校正してください。\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\t---\t`\u003c/span\u003e\n\n\t\u003cspan style=\"color:#776e71\"\u003e// ファイルを読み込んでcontentに格納する\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#06b6ef\"\u003econtent\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eReadFile\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;2024-05-17_Session_time_1_free.txt\u0026#34;\u003c/span\u003e)\n\t\u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#06b6ef\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;Failed to read file: %v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e)\n\t\t\u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e\n\t}\n\n\t\u003cspan style=\"color:#776e71\"\u003e// 文字数が多いと校正しきれないと言われるので、文字を分割して渡す\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#06b6ef\"\u003echunks\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003esplitContent\u003c/span\u003e(string(\u003cspan style=\"color:#06b6ef\"\u003econtent\u003c/span\u003e), \u003cspan style=\"color:#f99b15\"\u003e4500\u003c/span\u003e)\n\n\t\u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003echunk\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echunks\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eresp\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eCreateChatCompletion\u003c/span\u003e(\n\t\t\t\u003cspan style=\"color:#06b6ef\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eBackground\u003c/span\u003e(),\n\t\t\t\u003cspan style=\"color:#06b6ef\"\u003eopenai\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eChatCompletionRequest\u003c/span\u003e{\n\t\t\t\t\u003cspan style=\"color:#06b6ef\"\u003eModel\u003c/span\u003e: \u003cspan style=\"color:#06b6ef\"\u003eopenai\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eGPT4o20240513\u003c/span\u003e,\n\t\t\t\t\u003cspan style=\"color:#06b6ef\"\u003eMessages\u003c/span\u003e: []\u003cspan style=\"color:#06b6ef\"\u003eopenai\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eChatCompletionMessage\u003c/span\u003e{\n\t\t\t\t\t{\n\t\t\t\t\t\t\u003cspan style=\"color:#06b6ef\"\u003eRole\u003c/span\u003e:    \u003cspan style=\"color:#06b6ef\"\u003eopenai\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eChatMessageRoleUser\u003c/span\u003e,\n\t\t\t\t\t\t\u003cspan style=\"color:#06b6ef\"\u003eContent\u003c/span\u003e: \u003cspan style=\"color:#06b6ef\"\u003eorder\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echunk\u003c/span\u003e,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t)\n\n\t\t\u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n\t\t\t\u003cspan style=\"color:#06b6ef\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;ChatCompletion error: %v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e\n\t\t}\n\t\t\u003cspan style=\"color:#776e71\"\u003e// 出力結果をファイルに出力する\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#06b6ef\"\u003efileName\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;output.txt\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#776e71\"\u003e// Replace \u0026#34;output.txt\u0026#34; with the actual file name\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#06b6ef\"\u003efile\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eOpenFile\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003efileName\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eO_APPEND\u003c/span\u003e|\u003cspan style=\"color:#06b6ef\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eO_CREATE\u003c/span\u003e|\u003cspan style=\"color:#06b6ef\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eO_WRONLY\u003c/span\u003e, \u003cspan style=\"color:#f99b15\"\u003e0644\u003c/span\u003e)\n\t\t\u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n\t\t\t\u003cspan style=\"color:#06b6ef\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;Failed to open file: %v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e\n\t\t}\n\t\t\u003cspan style=\"color:#815ba4\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003efile\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eClose\u003c/span\u003e()\n\t\t\u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003efile\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eWriteString\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003eresp\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eChoices\u003c/span\u003e[\u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e].\u003cspan style=\"color:#06b6ef\"\u003eMessage\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eContent\u003c/span\u003e); \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003enil\u003c/span\u003e {\n\t\t\t\u003cspan style=\"color:#06b6ef\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;Failed to write file: %v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eerr\u003c/span\u003e)\n\t\t\t\u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e\n\t\t}\n\n\n\t}\n\n}\n\n\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003esplitContent\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003econtent\u003c/span\u003e \u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003echunkSize\u003c/span\u003e \u003cspan style=\"color:#fec418\"\u003eint\u003c/span\u003e) []\u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e {\n\t\u003cspan style=\"color:#815ba4\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echunks\u003c/span\u003e []\u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e\n\t\u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#06b6ef\"\u003ei\u003c/span\u003e \u0026lt; len(\u003cspan style=\"color:#06b6ef\"\u003econtent\u003c/span\u003e); \u003cspan style=\"color:#06b6ef\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echunkSize\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eend\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echunkSize\u003c/span\u003e\n\t\t\u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eend\u003c/span\u003e \u0026gt; len(\u003cspan style=\"color:#06b6ef\"\u003econtent\u003c/span\u003e) {\n\t\t\t\u003cspan style=\"color:#06b6ef\"\u003eend\u003c/span\u003e = len(\u003cspan style=\"color:#06b6ef\"\u003econtent\u003c/span\u003e)\n\t\t}\n\t\t\u003cspan style=\"color:#06b6ef\"\u003echunks\u003c/span\u003e = append(\u003cspan style=\"color:#06b6ef\"\u003echunks\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003econtent\u003c/span\u003e[\u003cspan style=\"color:#06b6ef\"\u003ei\u003c/span\u003e:\u003cspan style=\"color:#06b6ef\"\u003eend\u003c/span\u003e])\n\t}\n\t\u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echunks\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# 2024年5月13日にchat-gpt4oがリリースされました。 ラジオ番組の文字起こしをしたく、whisperとchat-gpt4oを連携してやってみたら、思いの外良かったので記録します。 2. やり方# 流れは以下のような感じです。 whisperで文字起こし → chat-gpt4oで校正 whisperで文字起こし# whisperは2パターンあります。1つはAPI使用する方法、もう1つはGitHubのコードを使って自宅で文字起こしする方法です。 両者を比較すると、smallだと文字起こしの精度はほぼ変わらないです。 コストでいうと、APIは1時間の音声で0.7ドルぐらいです。1ドル155円で計算すると、100円ちょっとです。ただ、自宅だと電気代はかかりますが、ほぼ無視していいぐらいの料金です。 また、自宅のGPUを使用できるので、文字起こしスピードは速いです。 上記から、文字起こしは自宅で実施します。 chat-gpt4oの校正# Whisperで出力した文字を校正します。 校正のスピードが速いし、料金も安いです。60分の文字起こしした文字数は2万字ぐらいで、だいたい0.3ドルぐらいです。 文字起こしと校正# 校正前と校正後で比較します。 文意で改行してくれたりして、校正すごいです。 ピックアップすると下表のようになります。 校正前 校正後 国政選挙に気密日 国政選挙に官房機密費使用疑惑 可愛しの自宅を固く捜索した際 河井氏の自宅を捜索した際 中国新聞がスクープとして放置ました 中国新聞がスクープとして報じました。 疑いが不常 疑いが浮上 自民党の破罰によるパーティー券裏金事件 自民党の派閥によるパーティー券裏金事件 文字はある程度で区切る# 以下のようにChat-GPTから「テキストは非常に長いため、一度に校正するのが難しいです。」と反応あり。ある程度短くしてテキストを渡す。 このように、文意を通しつつ文章全体を整えました。 申し訳ありませんが、提供いただいたテキストは非常に長いため、一度に校正するのが難しいです。いただいた分を一部ずつ校正させていただきますので、適宜追加してください。まず、最初の部分から始めます： 校正前（文字起こしした内容）# 総理2800 スガッチ500に続き 国政選挙に気密日 中国新聞の記者たちが追った 自民党の裏金問題 2019年の参院選 広島選挙区をめくり 可愛勝雪元ホーム大臣が 地元の議員や公演会関係者ら100人に対し 現金をばらまいていたことが判明した 大規模買収事件 この事件では検察当局が 可愛しの自宅を固く捜索した際 当時の安倍政権の幹部4人から 現金合わせて6700万円を受け取った 疑いを示すメモが応集されていたことを 地元の中国新聞がスクープとして放置 ました メモには総理2800 スガッチ500 幹事長3300 あまり100などと書いてありこれらの資金が 買収に使われた疑いが不常 この報道は大きな話題となり 中国新聞の取材版は2023年度の 新聞労連ジャーナリズム対象を受賞しました その後も中国新聞はこの問題を追求 し続け他の選挙区でも現金が配られていた 実態や国政選挙に官房機密費が使われていた 疑惑などを報じています 自民党の破罰によるパーティー券裏金事件を 巡る政治と金の問題が国会でも議論される中 今夜はこの問題を取材し続ける 中国新聞記者の報告をお送りします では今夜のゲストご紹介します スタジオにお越しいただきました 中国新聞社東京市社編集部記者の中川 まさはるさんですどうぞよろしくお願いいたします 校正後# 総理2800 スガッチ500に続き 国政選挙に官房機密費使用疑惑 中国新聞の記者たちが追った 自民党の裏金問題。2019年の参院選、広島選挙区をめぐり、元法務大臣の河井克行氏が地元の議員や後援会関係者など約100人に現金をばらまいていたことが判明した大規模買収事件。この事件では、検察当局が河井氏の自宅を捜索した際、当時の安倍政権の幹部4人から現金合計6700万円を受け取った疑いを示すメモが押収されていたことを、中国新聞がスクープとして報じました。 メモには「総理2800」「スガッチ500」「幹事長3300」「あまり100」などと書かれており、これらの資金が買収に使われた疑いが浮上。この報道は大きな話題となり、中国新聞の取材班は2023年度の新聞労連ジャーナリズム大賞を受賞しました。その後も中国新聞はこの問題を追い続け、他の選挙区でも現金が配られていた実態や国政選挙に官房機密費が使われていた疑惑などを報じています。 自民党の派閥によるパーティー券裏金事件を巡る政治と金の問題が国会でも議論される中、今夜はこの問題を取材し続ける中国新聞記者の報告をお送りします。さて、今夜のゲストをご紹介します。スタジオにお越しいただきました、中国新聞社東京支社編集部記者の中川正治さんです。どうぞよろしくお願いいたします。 使ったコード# 使用したコードは以下。 package main import ( \"context\" \"fmt\" \"os\" openai \"github.com/sashabaranov/go-openai\" ) func main() { client := openai.NewClient(\"api-key\") order := `whisperでラジオを書き起こしました。複数回に分割して書き起こし文書を伝えるので、文意が通るように校正してください。 --- ` // ファイルを読み込んでcontentに格納する content, err := os.ReadFile(\"2024-05-17_Session_time_1_free.txt\") if err != nil { fmt.Printf(\"Failed to read file: %v\\n\", err) return } // 文字数が多いと校正しきれないと言われるので、文字を分割して渡す chunks := splitContent(string(content), 4500) for _, chunk := range chunks { resp, err := client.CreateChatCompletion( context.Background(), openai.ChatCompletionRequest{ Model: openai.GPT4o20240513, Messages: []openai.ChatCompletionMessage{ { Role: openai.ChatMessageRoleUser, Content: order + chunk, }, }, }, ) if err != nil { fmt.Printf(\"ChatCompletion error: %v\\n\", err) return } // 出力結果をファイルに出力する fileName := \"output.txt\" // Replace \"output.txt\" with the actual file name file, err := os.OpenFile(fileName, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644) if err != nil { fmt.Printf(\"Failed to open file: %v\\n\", err) return } defer file.Close() if _, err := file.WriteString(resp.Choices[0].Message.Content); err != nil { fmt.Printf(\"Failed to write file: %v\\n\", err) return } } } func splitContent(content string, chunkSize int) []string { var chunks []string for i := 0; i \u003c len(content); i += chunkSize { end := i + chunkSize if end \u003e len(content) { end = len(content) } chunks = append(chunks, content[i:end]) } return chunks } 微信 支付宝","scraped_at":"2025-07-12T21:18:25.995330741+09:00","word_count":271,"content_hash":"677a41f5e459f49c5fd3dcbbad57f718"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/terraform-target/","title":"terraformで特定のモジュールのみplanやapplyする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eterraformで複数人が作業をしていると、他者のコードの待たずにapplyしたいことがあります。\u003c/p\u003e\n\u003ch2 id=\"2-対応\"\u003e2. 対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のように入力する。\u003ccode\u003e-target=\u003c/code\u003eでモジュールを指定します。\u003c/p\u003e\n\u003cp\u003eコマンドは\u003ccode\u003eplan\u003c/code\u003eしているもの。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eterraform plan -target\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003emodule.sg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# terraformで複数人が作業をしていると、他者のコードの待たずにapplyしたいことがあります。 2. 対応# 以下のように入力する。-target=でモジュールを指定します。 コマンドはplanしているもの。 terraform plan -target=module.sg 微信 支付宝","scraped_at":"2025-07-12T21:18:27.267353296+09:00","word_count":12,"content_hash":"8a1da35b12c12a559274d31654cd8026"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/acm-update/","title":"terraformで証明書の更新","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e証明書が期限切れ。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"2-証明書のインポート\"\u003e2. 証明書のインポート\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-証明書のインポート\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eインポート完了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"03.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"3-terraform\"\u003e3. terraform\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-terraform\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e定義は変更せずにplanする。更新した証明書のIDで書き換わるように出力される。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  \u003cspan style=\"color:#776e71\"\u003e# module.alb.aws_lb_listener.mars_g_a will be updated in-place\u003c/span\u003e\n  ~ resource \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_lb_listener\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;mars_g_a\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e\n      ~ \u003cspan style=\"color:#ef6155\"\u003ecertificate_arn\u003c/span\u003e   \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;arn:aws:acm:ap-northeast-1:816196381588:certificate/0d2cba6f-99e6-42e0-804b-759143f398b9\u0026#34;\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#48b685\"\u003e\u0026#34;arn:aws:acm:ap-northeast-1:816196381588:certificate/ae9215c0-8ca7-4eb4-b8cb-ae01ccfa3991\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#ef6155\"\u003eid\u003c/span\u003e                \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;arn:aws:elasticloadbalancing:ap-northeast-1:816196381588:listener/app/prod-alb/533bc8372061e4db/573022dc39b58e29\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#ef6155\"\u003etags\u003c/span\u003e              \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e{}\u003c/span\u003e\n        \u003cspan style=\"color:#776e71\"\u003e# (6 unchanged attributes hidden)\u003c/span\u003e\n\n        \u003cspan style=\"color:#776e71\"\u003e# (1 unchanged block hidden)\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e\n\n  \u003cspan style=\"color:#776e71\"\u003e# module.alb.aws_lb_listener.mars_g_c will be updated in-place\u003c/span\u003e\n  ~ resource \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_lb_listener\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;mars_g_c\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e\n      ~ \u003cspan style=\"color:#ef6155\"\u003ecertificate_arn\u003c/span\u003e   \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;arn:aws:acm:ap-northeast-1:816196381588:certificate/0d2cba6f-99e6-42e0-804b-759143f398b9\u0026#34;\u003c/span\u003e -\u0026gt; \u003cspan style=\"color:#48b685\"\u003e\u0026#34;arn:aws:acm:ap-northeast-1:816196381588:certificate/ae9215c0-8ca7-4eb4-b8cb-ae01ccfa3991\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#ef6155\"\u003eid\u003c/span\u003e                \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;arn:aws:elasticloadbalancing:ap-northeast-1:816196381588:listener/app/prod-alb/533bc8372061e4db/07ff77665a336830\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#ef6155\"\u003etags\u003c/span\u003e              \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e{}\u003c/span\u003e\n        \u003cspan style=\"color:#776e71\"\u003e# (6 unchanged attributes hidden)\u003c/span\u003e\n\n        \u003cspan style=\"color:#776e71\"\u003e# (1 unchanged block hidden)\u003c/span\u003e\n    \u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e\n\nPlan: \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e to add, \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e to change, \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e to destroy.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# 証明書が期限切れ。 2. 証明書のインポート# インポート完了 3. terraform# 定義は変更せずにplanする。更新した証明書のIDで書き換わるように出力される。 Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols: ~ update in-place Terraform will perform the following actions: # module.alb.aws_lb_listener.mars_g_a will be updated in-place ~ resource \"aws_lb_listener\" \"mars_g_a\" { ~ certificate_arn = \"arn:aws:acm:ap-northeast-1:816196381588:certificate/0d2cba6f-99e6-42e0-804b-759143f398b9\" -\u003e \"arn:aws:acm:ap-northeast-1:816196381588:certificate/ae9215c0-8ca7-4eb4-b8cb-ae01ccfa3991\" id = \"arn:aws:elasticloadbalancing:ap-northeast-1:816196381588:listener/app/prod-alb/533bc8372061e4db/573022dc39b58e29\" tags = {} # (6 unchanged attributes hidden) # (1 unchanged block hidden) } # module.alb.aws_lb_listener.mars_g_c will be updated in-place ~ resource \"aws_lb_listener\" \"mars_g_c\" { ~ certificate_arn = \"arn:aws:acm:ap-northeast-1:816196381588:certificate/0d2cba6f-99e6-42e0-804b-759143f398b9\" -\u003e \"arn:aws:acm:ap-northeast-1:816196381588:certificate/ae9215c0-8ca7-4eb4-b8cb-ae01ccfa3991\" id = \"arn:aws:elasticloadbalancing:ap-northeast-1:816196381588:listener/app/prod-alb/533bc8372061e4db/07ff77665a336830\" tags = {} # (6 unchanged attributes hidden) # (1 unchanged block hidden) } Plan: 0 to add, 2 to change, 0 to destroy. 微信 支付宝","scraped_at":"2025-07-12T21:18:28.986794971+09:00","word_count":117,"content_hash":"25793d57df5158f76b60f3ba3773a32b"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/git-japanese-display/","title":"gitで日本語ファイルを表示する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003egitのデフォルトだと日本語ファイル名が表示されません。\u003c/p\u003e\n\u003cp\u003eたとえば。\u003c/p\u003e\n\u003cp\u003eファイルリストだと以下のように\u003ccode\u003e日本語のファイル.md\u003c/code\u003eが表示されます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ ll\n合計 \u003cspan style=\"color:#f99b15\"\u003e12\u003c/span\u003e\ndrwxrwxr-x  \u003cspan style=\"color:#f99b15\"\u003e3\u003c/span\u003e yamadatt yamadatt \u003cspan style=\"color:#f99b15\"\u003e4096\u003c/span\u003e  5月  \u003cspan style=\"color:#f99b15\"\u003e6\u003c/span\u003e 11:46 ./\ndrwxrwxr-x \u003cspan style=\"color:#f99b15\"\u003e22\u003c/span\u003e yamadatt yamadatt \u003cspan style=\"color:#f99b15\"\u003e4096\u003c/span\u003e  5月  \u003cspan style=\"color:#f99b15\"\u003e6\u003c/span\u003e 11:45 ../\ndrwxrwxr-x  \u003cspan style=\"color:#f99b15\"\u003e7\u003c/span\u003e yamadatt yamadatt \u003cspan style=\"color:#f99b15\"\u003e4096\u003c/span\u003e  5月  \u003cspan style=\"color:#f99b15\"\u003e6\u003c/span\u003e 11:46 .git/\n-rw-rw-r--  \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e yamadatt yamadatt    \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  5月  \u003cspan style=\"color:#f99b15\"\u003e6\u003c/span\u003e 11:46 日本語のファイル.md\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eしかし、\u003ccode\u003egit\u003c/code\u003eだと表示されないのです。以下のようにエスケープしたような表示になります。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ git status\nブランチ master\n\nNo commits yet\n\n追跡されていないファイル:\n  \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003euse \u003cspan style=\"color:#48b685\"\u003e\u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34;\u003c/span\u003e to include in what will be committed\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n\t\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\\346\\227\\245\\346\\234\\254\\350\\252\\236\\343\\201\\256\\343\\203\\225\\343\\202\\241\\343\\202\\244\\343\\203\\253.md\u0026#34;\u003c/span\u003e\n\nnothing added to commit but untracked files present \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003euse \u003cspan style=\"color:#48b685\"\u003e\u0026#34;git add\u0026#34;\u003c/span\u003e to track\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"2-対応\"\u003e2. 対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003econfigを変更して対応します。\u003c/p\u003e\n\u003cp\u003eこのリポジトリだけ日本語表示したいので、\u003ccode\u003e--local\u003c/code\u003eを付与して以下のコマンドを入れます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit config --local core.quotepath false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eそうすると、期待したとおりに日本語が表示されます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ git status\nブランチ master\n\nNo commits yet\n\n追跡されていないファイル:\n  \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003euse \u003cspan style=\"color:#48b685\"\u003e\u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34;\u003c/span\u003e to include in what will be committed\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n\t日本語のファイル.md\n\nnothing added to commit but untracked files present \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003euse \u003cspan style=\"color:#48b685\"\u003e\u0026#34;git add\u0026#34;\u003c/span\u003e to track\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれを使用すれば、以下のようにパイプで他のコマンドに渡すことができます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit diff --name-only | xargs -n1 ./blogsync push \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# gitのデフォルトだと日本語ファイル名が表示されません。 たとえば。 ファイルリストだと以下のように日本語のファイル.mdが表示されます。 $ ll 合計 12 drwxrwxr-x 3 yamadatt yamadatt 4096 5月 6 11:46 ./ drwxrwxr-x 22 yamadatt yamadatt 4096 5月 6 11:45 ../ drwxrwxr-x 7 yamadatt yamadatt 4096 5月 6 11:46 .git/ -rw-rw-r-- 1 yamadatt yamadatt 0 5月 6 11:46 日本語のファイル.md しかし、gitだと表示されないのです。以下のようにエスケープしたような表示になります。 $ git status ブランチ master No commits yet 追跡されていないファイル: (use \"git add \u003cfile\u003e...\" to include in what will be committed) \"\\346\\227\\245\\346\\234\\254\\350\\252\\236\\343\\201\\256\\343\\203\\225\\343\\202\\241\\343\\202\\244\\343\\203\\253.md\" nothing added to commit but untracked files present (use \"git add\" to track) 2. 対応# configを変更して対応します。 このリポジトリだけ日本語表示したいので、--localを付与して以下のコマンドを入れます。 git config --local core.quotepath false そうすると、期待したとおりに日本語が表示されます。 $ git status ブランチ master No commits yet 追跡されていないファイル: (use \"git add \u003cfile\u003e...\" to include in what will be committed) 日本語のファイル.md nothing added to commit but untracked files present (use \"git add\" to track) これを使用すれば、以下のようにパイプで他のコマンドに渡すことができます。 git diff --name-only | xargs -n1 ./blogsync push 微信 支付宝","scraped_at":"2025-07-12T21:18:30.573676882+09:00","word_count":135,"content_hash":"f16a65dfe4f8e52dce0a0778f3fab5f2"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/grep-recursive/","title":"再帰的にgrepで文字列検索・文字列置換","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003egrepで何かを検索したいときにいつもググってしまいがちです。\u003c/p\u003e\n\u003cp\u003eここでは、再帰的にファイルをgrepしたいとき、どのようにやるかを整理します。\u003c/p\u003e\n\u003ch2 id=\"2-grep\"\u003e2. grep\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-grep\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようなコマンドです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egrep -r \u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003eキーワード\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e --include\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#39;*.{拡張子}\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e起点となるディレクトリのパス\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e具体例は以下です。outputディレクトリ以下のmarkdownファイルを検索します。検索キーワードは正規表現を使用して、行頭がimageで始まるものです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egrep -r ^image: --include\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#39;*.md\u0026#39;\u003c/span\u003e  content/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-文字列置換\"\u003e3. 文字列置換\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-文字列置換\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようにsedを使います。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egrep -lr \u003cspan style=\"color:#48b685\"\u003e\u0026#34;/images/doc/params.webp\u0026#34;\u003c/span\u003e --include\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#39;*.md\u0026#39;\u003c/span\u003e content/ | xargs sed -e s@/images/doc/params.webp@/images/avatar.png@g\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e簡単な解説\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egrep -lr\u003c/code\u003e・・・ファイル名だけ出力する\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esed -e\u003c/code\u003e・・・文字列置換\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@\u003c/code\u003e・・・置換対象と置換後の文字区切り。置換対象にパスの区切りである\u003ccode\u003e/\u003c/code\u003eを入れているため\u003ccode\u003e@\u003c/code\u003eで区切っている。区切りはなんでも良い。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"4-参考\"\u003e4. 参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://blog.y-yuki.net/entry/2020/05/30/230000\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eLinux - 再帰的なgrep - 覚えたら書く\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# grepで何かを検索したいときにいつもググってしまいがちです。 ここでは、再帰的にファイルをgrepしたいとき、どのようにやるかを整理します。 2. grep# 以下のようなコマンドです。 grep -r {キーワード} --include='*.{拡張子}' {起点となるディレクトリのパス} 具体例は以下です。outputディレクトリ以下のmarkdownファイルを検索します。検索キーワードは正規表現を使用して、行頭がimageで始まるものです。 grep -r ^image: --include='*.md' content/ 3. 文字列置換# 以下のようにsedを使います。 grep -lr \"/images/doc/params.webp\" --include='*.md' content/ | xargs sed -e s@/images/doc/params.webp@/images/avatar.png@g 簡単な解説 grep -lr・・・ファイル名だけ出力する sed -e・・・文字列置換 @・・・置換対象と置換後の文字区切り。置換対象にパスの区切りである/を入れているため@で区切っている。区切りはなんでも良い。 4. 参考# Linux - 再帰的なgrep - 覚えたら書く 微信 支付宝","scraped_at":"2025-07-12T21:18:31.875240197+09:00","word_count":46,"content_hash":"e616076098912929b80eda4bee18d689"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/reduce-aws-config-fee/","title":"AWS Configの使用料を削減した","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAWSの使用料が増えてきました。\u003c/p\u003e\n\u003cp\u003e以下のように\u003c/p\u003e\n\u003cp\u003e2024年1月は600ドル弱だった利用料が、2024年4月に800ドルにまで上昇しています。約200ドルも上昇しています。\u003c/p\u003e\n\u003cp\u003e円安が進行してます。1ドルが160円で計算すると、約3万2千円を追加で支払っていることになります。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"monthly.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"2-コスト上昇の直接的な原因\"\u003e2. コスト上昇の直接的な原因\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-コスト上昇の直接的な原因\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eコスト上昇の直接的な原因はAWS Configのサービス利用料が増えていることです。\u003c/p\u003e\n\u003cp\u003e2024年1月は8.08ドルだったのが、2024年4月は143.54ドルになっています。\u003c/p\u003e\n\u003cp\u003eCofigがRDSの次に使用しているサービスにになっています。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"monthly_detail.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"3-configが増えた理由\"\u003e3. configが増えた理由\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-configが増えた理由\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eアプリがECSで動かしています。アプリのコンテナーがUp、Downを繰り返し、NICの割当と解放を繰り返したことが原因です。\u003c/p\u003e\n\u003cp\u003eIPアドレスを割り当てたりするので、構成変更と捉えられてcofnigに記録したと推測しています。\u003c/p\u003e\n\u003cp\u003eアプリがUp、Downを繰り返したのは以下の2つの理由がありました。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eアプリケーションの変更\u003c/li\u003e\n\u003cli\u003eRDSを夜間に落とす運用への変更\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eアプリケーションが起動する際、データベースへの接続を確認しデータベースへの接続を確立できなければ例外で落ちるようになりました。この変更をキャッチアップできていませんでした。\u003c/p\u003e\n\u003cp\u003eそして、まだサービスを開始していないことから、2月頃に使用料金を抑えるためにデータベースを夜間に落として、朝起動するという運用に変更しました。もう少し言うと、ここではアプリは落とさないでRDSだけを落とすようにしていました。\u003c/p\u003e\n\u003cp\u003eということで、夜間にRDSを落とす運用に変更したことで、この時間帯にアプリケーションのUp、Downが繰り返されConfigに記録されて、使用料が増加したのです。\u003c/p\u003e\n\u003cp\u003e高い授業料です。。。涙。\u003c/p\u003e\n\u003ch2 id=\"4-対策\"\u003e4. 対策\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-対策\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRDSの夜間停止運用を止めました。（2024年5月1日に実施）\u003c/p\u003e\n\u003cp\u003e5月中旬に移行を計画しており、移行の準備作業もあるので細かい削減をするよりconfigの使用料を抑えようと考えました。\u003c/p\u003e\n\u003ch2 id=\"5-対策した結果\"\u003e5. 対策した結果\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#5-対策した結果\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のように5月2日はそれまであったConfigの使用料が大きく減りました。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"aws_config_fee.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eしばらく様子をみてみようと思います。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# AWSの使用料が増えてきました。 以下のように 2024年1月は600ドル弱だった利用料が、2024年4月に800ドルにまで上昇しています。約200ドルも上昇しています。 円安が進行してます。1ドルが160円で計算すると、約3万2千円を追加で支払っていることになります。 2. コスト上昇の直接的な原因# コスト上昇の直接的な原因はAWS Configのサービス利用料が増えていることです。 2024年1月は8.08ドルだったのが、2024年4月は143.54ドルになっています。 CofigがRDSの次に使用しているサービスにになっています。 3. configが増えた理由# アプリがECSで動かしています。アプリのコンテナーがUp、Downを繰り返し、NICの割当と解放を繰り返したことが原因です。 IPアドレスを割り当てたりするので、構成変更と捉えられてcofnigに記録したと推測しています。 アプリがUp、Downを繰り返したのは以下の2つの理由がありました。 アプリケーションの変更 RDSを夜間に落とす運用への変更 アプリケーションが起動する際、データベースへの接続を確認しデータベースへの接続を確立できなければ例外で落ちるようになりました。この変更をキャッチアップできていませんでした。 そして、まだサービスを開始していないことから、2月頃に使用料金を抑えるためにデータベースを夜間に落として、朝起動するという運用に変更しました。もう少し言うと、ここではアプリは落とさないでRDSだけを落とすようにしていました。 ということで、夜間にRDSを落とす運用に変更したことで、この時間帯にアプリケーションのUp、Downが繰り返されConfigに記録されて、使用料が増加したのです。 高い授業料です。。。涙。 4. 対策# RDSの夜間停止運用を止めました。（2024年5月1日に実施） 5月中旬に移行を計画しており、移行の準備作業もあるので細かい削減をするよりconfigの使用料を抑えようと考えました。 5. 対策した結果# 以下のように5月2日はそれまであったConfigの使用料が大きく減りました。 しばらく様子をみてみようと思います。 微信 支付宝","scraped_at":"2025-07-12T21:18:34.366543049+09:00","word_count":33,"content_hash":"3b2150c9f443cc72dc84e88156ba6b6c"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/terraform-sensitive-display/","title":"terraformのsensitiveの内容を表示するには","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eterraformでIAMユーザを作成し、アクセスキーとシークレットアクセスキーを表示しようとしました。\u003c/p\u003e\n\u003cp\u003eでも、エラーになるんですよね。\u003c/p\u003e\n\u003cp\u003eそれに対応した記録です。\u003c/p\u003e\n\u003ch2 id=\"2-事象\"\u003e2. 事象\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-事象\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eterraform planしたら、以下のようにエラーが表示されました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e To reduce the risk of accidentally exporting sensitive data that was intended to be only internal, Terraform\n│ requires that any root module output containing sensitive data be explicitly marked as sensitive, to confirm\n│ your intent.\n│\n│ If you \u003cspan style=\"color:#815ba4\"\u003edo\u003c/span\u003e intend to export this data, annotate the output value as sensitive by adding the following argument:\n│     \u003cspan style=\"color:#ef6155\"\u003esensitive\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e true\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のようなコードにしていました。アクセスキーとパスワードはそのまま表示されるのですが、シークレットアクセスキーが表示されません。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eapp_user_access_key\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e”\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003evalue\u003c/span\u003e = \u003cspan style=\"color:#ef6155\"\u003e“$\u003c/span\u003e{\u003cspan style=\"color:#06b6ef\"\u003eaws_iam_access_key\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eapli_s3put\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e}\u003cspan style=\"color:#ef6155\"\u003e”\u003c/span\u003e\n  }\n\u003cspan style=\"color:#815ba4\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eapp_user_secret_access_key\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e”\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003evalue\u003c/span\u003e = \u003cspan style=\"color:#ef6155\"\u003e“$\u003c/span\u003e{\u003cspan style=\"color:#06b6ef\"\u003eaws_iam_access_key\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eapli_s3put\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003esecret\u003c/span\u003e}\u003cspan style=\"color:#ef6155\"\u003e”\u003c/span\u003e\n  }\n\u003cspan style=\"color:#815ba4\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003epassword\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e”\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003evalue\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003eaws_iam_user_login_profile\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eapli_s3put\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003epassword\u003c/span\u003e\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-エラーを出さないために\"\u003e3. エラーを出さないために\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-エラーを出さないために\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"31-sesitiveの設定\"\u003e3.1. sesitiveの設定\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#31-sesitiveの設定\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eエラーを出さないために、\u003ccode\u003esensitive = true\u003c/code\u003eを追加しました。\u003c/p\u003e\n\u003cp\u003eまとめてやってしまおうと思ったので、全てに入れてます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eapp_user_access_key\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e”\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003evalue\u003c/span\u003e = \u003cspan style=\"color:#ef6155\"\u003e“$\u003c/span\u003e{\u003cspan style=\"color:#06b6ef\"\u003eaws_iam_access_key\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eapli_s3put\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e}\u003cspan style=\"color:#ef6155\"\u003e”\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003esensitive\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n}\n\u003cspan style=\"color:#815ba4\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eapp_user_secret_access_key\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e”\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003evalue\u003c/span\u003e = \u003cspan style=\"color:#ef6155\"\u003e“$\u003c/span\u003e{\u003cspan style=\"color:#06b6ef\"\u003eaws_iam_access_key\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eapli_s3put\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003esecret\u003c/span\u003e}\u003cspan style=\"color:#ef6155\"\u003e”\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003esensitive\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n}\n\u003cspan style=\"color:#815ba4\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003epassword\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e”\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003evalue\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003eaws_iam_user_login_profile\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eapli_s3put\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003epassword\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003esensitive\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eそしてapplyします。以下のように\u003ccode\u003e\u0026lt;sensitive\u0026gt;\u003c/code\u003eと表示されます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#ef6155\"\u003eapp_user_access_key\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u0026lt;sensitive\u0026gt;\n\u003cspan style=\"color:#ef6155\"\u003eapp_user_secret_access_key\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u0026lt;sensitive\u0026gt;\n\u003cspan style=\"color:#ef6155\"\u003epassword\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u0026lt;sensitive\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"32-sensitiveを表示\"\u003e3.2. sensitiveを表示\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#32-sensitiveを表示\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eterraform output -json\u003c/code\u003eとやります。\u003c/p\u003e\n\u003cp\u003eそうすると、以下のように表示されます。（値はマスクしてます。）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n  \u003cspan style=\"color:#ef6155\"\u003e“app_user_access_key”:\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color:#ef6155\"\u003e“sensitive”:\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003etrue,\u003c/span\u003e\n    \u003cspan style=\"color:#ef6155\"\u003e“type”:\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“string”,\u003c/span\u003e\n    \u003cspan style=\"color:#ef6155\"\u003e“value”:\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“AAAAAAAAAAAAAAAA”\u003c/span\u003e\n  }\u003cspan style=\"color:#ef6155\"\u003e,\u003c/span\u003e\n  \u003cspan style=\"color:#ef6155\"\u003e“app_user_secret_access_key”:\u003c/span\u003e {\n    \u003cspan style=\"color:#ef6155\"\u003e“sensitive”:\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003etrue,\u003c/span\u003e\n    \u003cspan style=\"color:#ef6155\"\u003e“type”:\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“string”,\u003c/span\u003e\n    \u003cspan style=\"color:#ef6155\"\u003e“value”:\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“vbbbbbbbbbbbaddsfastgawerqa”\u003c/span\u003e\n  }\u003cspan style=\"color:#ef6155\"\u003e,\u003c/span\u003e\n  \u003cspan style=\"color:#ef6155\"\u003e“password”:\u003c/span\u003e {\n    \u003cspan style=\"color:#ef6155\"\u003e“sensitive”:\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003etrue,\u003c/span\u003e\n    \u003cspan style=\"color:#ef6155\"\u003e“type”:\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“string”,\u003c/span\u003e\n    \u003cspan style=\"color:#ef6155\"\u003e“value”:\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003e“cccccccc”\u003c/span\u003e\n  }\n\u003cspan style=\"color:#ef6155\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# terraformでIAMユーザを作成し、アクセスキーとシークレットアクセスキーを表示しようとしました。 でも、エラーになるんですよね。 それに対応した記録です。 2. 事象# terraform planしたら、以下のようにエラーが表示されました。 To reduce the risk of accidentally exporting sensitive data that was intended to be only internal, Terraform │ requires that any root module output containing sensitive data be explicitly marked as sensitive, to confirm │ your intent. │ │ If you do intend to export this data, annotate the output value as sensitive by adding the following argument: │ sensitive = true 以下のようなコードにしていました。アクセスキーとパスワードはそのまま表示されるのですが、シークレットアクセスキーが表示されません。 output “app_user_access_key” { value = “${aws_iam_access_key.apli_s3put.id}” } output “app_user_secret_access_key” { value = “${aws_iam_access_key.apli_s3put.secret}” } output “password” { value = aws_iam_user_login_profile.apli_s3put.password } 3. エラーを出さないために# 3.1. sesitiveの設定# エラーを出さないために、sensitive = trueを追加しました。 まとめてやってしまおうと思ったので、全てに入れてます。 output “app_user_access_key” { value = “${aws_iam_access_key.apli_s3put.id}” sensitive = true } output “app_user_secret_access_key” { value = “${aws_iam_access_key.apli_s3put.secret}” sensitive = true } output “password” { value = aws_iam_user_login_profile.apli_s3put.password sensitive = true } そしてapplyします。以下のように\u003csensitive\u003eと表示されます。 app_user_access_key = \u003csensitive\u003e app_user_secret_access_key = \u003csensitive\u003e password = \u003csensitive\u003e 3.2. sensitiveを表示# terraform output -jsonとやります。 そうすると、以下のように表示されます。（値はマスクしてます。） { “app_user_access_key”: { “sensitive”: true, “type”: “string”, “value”: “AAAAAAAAAAAAAAAA” }, “app_user_secret_access_key”: { “sensitive”: true, “type”: “string”, “value”: “vbbbbbbbbbbbaddsfastgawerqa” }, “password”: { “sensitive”: true, “type”: “string”, “value”: “cccccccc” } } 微信 支付宝","scraped_at":"2025-07-12T21:18:35.228478562+09:00","word_count":178,"content_hash":"66de5df474e98f47c15c560e485f9567"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/link-check-cytopia/","title":"リンクチェック再び","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eやっぱり、デッドリンクはなくしておきたいです。\u003c/p\u003e\n\u003ch2 id=\"2-手順\"\u003e2. 手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker run --rm -v \u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003epwd\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e:/data cytopia/linkcheck .\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下はヘルプの内容。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e-e        Limit search to those file extensions.\n          Defaults to limiting on non-binary files.\n          Accepts comma separated string of extensions:\n            -e txt\n            -e txt,rst\n            -e sh,py.c,h\n\n-i        Ignore all URLs matching the specified regex.\n          Defaults to: ^http\u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003es\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e?:\u003cspan style=\"color:#f99b15\"\u003e\\/\\/\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e127\u003cspan style=\"color:#f99b15\"\u003e\\.\u003c/span\u003e0\u003cspan style=\"color:#f99b15\"\u003e\\.\u003c/span\u003e0\u003cspan style=\"color:#f99b15\"\u003e\\.\u003c/span\u003e1\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e|\u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003elocalhost\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e.*$\n          Accepts a single regex string:\n            -i \u003cspan style=\"color:#48b685\"\u003e\u0026#39;^http(?):\\/\\/my-comapny.com.*$\u0026#39;\u003c/span\u003e\n\n-t        Specify curl timeout in seconds, after which probing stops \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e one url.\n          Defaults to \u003cspan style=\"color:#f99b15\"\u003e10\u003c/span\u003e seconds.\n          Accepts a positive integer:\n            -t \u003cspan style=\"color:#f99b15\"\u003e5\u003c/span\u003e\n            -t \u003cspan style=\"color:#f99b15\"\u003e10\u003c/span\u003e\n\n-r        Specify how many time to retry probing a single URL, before giving up.\n          Defaults to \u003cspan style=\"color:#f99b15\"\u003e3\u003c/span\u003e times.\n          Accepts a positive integer:\n            -r \u003cspan style=\"color:#f99b15\"\u003e5\u003c/span\u003e\n            -r \u003cspan style=\"color:#f99b15\"\u003e10\u003c/span\u003e\n\n-c        Specify HTTP status codes that are valid \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e success.\n          Any code not specified in here will produce an error \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e the given URL.\n          Defaults to \u003cspan style=\"color:#48b685\"\u003e\u0026#39;200\u0026#39;\u003c/span\u003e.\n          Accepts comma separated string of http status codes:\n            -c \u003cspan style=\"color:#48b685\"\u003e\u0026#39;200\u0026#39;\u003c/span\u003e\n            -c \u003cspan style=\"color:#48b685\"\u003e\u0026#39;200,301\u0026#39;\u003c/span\u003e\n            -c \u003cspan style=\"color:#48b685\"\u003e\u0026#39;200,301,302\u0026#39;\u003c/span\u003e\n\n-k        Ignore invalid SSL certificates \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e HTTPS connections.\n          This argument does not accept any parameters.\n          Defaults to error on invalid SSL certificates.\n\n-l        Specify whether to follow redirect URLs or not.\n          This argument does not accept any parameters.\n          Defaults to not following redirects.\n\n-v        Be verbose and also show affected files.\n\n--version Show version and exit.\n--help    Show this help screen.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-補足\"\u003e3. 補足\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-補足\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eアメブロの記事リンクをgrepで調べる。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egrep -hoE https://ameblo.jp/baliclub/entry-\u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003e0-9\u003cspan style=\"color:#5bc4bf\"\u003e]{\u003c/span\u003e11\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e.html . -r\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# やっぱり、デッドリンクはなくしておきたいです。 2. 手順# docker run --rm -v $(pwd):/data cytopia/linkcheck . 以下はヘルプの内容。 -e Limit search to those file extensions. Defaults to limiting on non-binary files. Accepts comma separated string of extensions: -e txt -e txt,rst -e sh,py.c,h -i Ignore all URLs matching the specified regex. Defaults to: ^http(s)?:\\/\\/(127\\.0\\.0\\.1)|(localhost).*$ Accepts a single regex string: -i '^http(?):\\/\\/my-comapny.com.*$' -t Specify curl timeout in seconds, after which probing stops for one url. Defaults to 10 seconds. Accepts a positive integer: -t 5 -t 10 -r Specify how many time to retry probing a single URL, before giving up. Defaults to 3 times. Accepts a positive integer: -r 5 -r 10 -c Specify HTTP status codes that are valid for success. Any code not specified in here will produce an error for the given URL. Defaults to '200'. Accepts comma separated string of http status codes: -c '200' -c '200,301' -c '200,301,302' -k Ignore invalid SSL certificates for HTTPS connections. This argument does not accept any parameters. Defaults to error on invalid SSL certificates. -l Specify whether to follow redirect URLs or not. This argument does not accept any parameters. Defaults to not following redirects. -v Be verbose and also show affected files. --version Show version and exit. --help Show this help screen. 3. 補足# アメブロの記事リンクをgrepで調べる。 grep -hoE https://ameblo.jp/baliclub/entry-[0-9]{11}.html . -r 微信 支付宝","scraped_at":"2025-07-12T21:18:36.654499101+09:00","word_count":219,"content_hash":"b160f10e23591698f0b25a306e1270f8"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/hugo-monthly-archive/","title":"hugoで月別アーカイブページを作る","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eアメブロからhugoに記事を移行したくなりました。\u003c/p\u003e\n\u003cp\u003e約3000件の記事が移行できているかを確認するため、記事の数を知りたくなりました。\u003c/p\u003e\n\u003cp\u003eその記録です。\u003c/p\u003e\n\u003ch2 id=\"2-手順\"\u003e2. 手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e確認できればいいので、アーカイブページへのリンクは不要と考えました。\u003c/p\u003e\n\u003cp\u003eテーマの下に以下のファイルを作成。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e/layouts/archives/list.html\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eファイルには以下を記述します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e{{ define \u0026#34;main\u0026#34; }}\n  \u0026lt;\u003cspan style=\"color:#5bc4bf\"\u003eh1\u003c/span\u003e\u0026gt;アーカイブ\u0026lt;/\u003cspan style=\"color:#5bc4bf\"\u003eh1\u003c/span\u003e\u0026gt;\n  {{ range .Site.RegularPages.GroupByDate \u0026#34;2006-01\u0026#34; }}\n  {{ $count := (len .Pages) }}\n    \u0026lt;\u003cspan style=\"color:#5bc4bf\"\u003eh2\u003c/span\u003e\u0026gt;{{ .Key }}　({{ $count }})\u0026lt;/\u003cspan style=\"color:#5bc4bf\"\u003eh2\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan style=\"color:#5bc4bf\"\u003eul\u003c/span\u003e\u0026gt;\n      {{ range .Pages }}\n        \u0026lt;\u003cspan style=\"color:#5bc4bf\"\u003eli\u003c/span\u003e\u0026gt;\n          \u0026lt;\u003cspan style=\"color:#5bc4bf\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehref\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;{{ .RelPermalink }}\u0026#34;\u003c/span\u003e\u0026gt;{{ .Title }}\u0026lt;/\u003cspan style=\"color:#5bc4bf\"\u003ea\u003c/span\u003e\u0026gt;\n          ({{ .Date.Format \u0026#34;2006-01-02\u0026#34; }})\n        \u0026lt;/\u003cspan style=\"color:#5bc4bf\"\u003eli\u003c/span\u003e\u0026gt;\n      {{ end }}\n    \u0026lt;/\u003cspan style=\"color:#5bc4bf\"\u003eul\u003c/span\u003e\u0026gt;\n  {{ end }}\n{{ end }}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# アメブロからhugoに記事を移行したくなりました。 約3000件の記事が移行できているかを確認するため、記事の数を知りたくなりました。 その記録です。 2. 手順# 確認できればいいので、アーカイブページへのリンクは不要と考えました。 テーマの下に以下のファイルを作成。 /layouts/archives/list.html ファイルには以下を記述します。 {{ define \"main\" }} \u003ch1\u003eアーカイブ\u003c/h1\u003e {{ range .Site.RegularPages.GroupByDate \"2006-01\" }} {{ $count := (len .Pages) }} \u003ch2\u003e{{ .Key }}　({{ $count }})\u003c/h2\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e ({{ .Date.Format \"2006-01-02\" }}) \u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} {{ end }} 微信 支付宝","scraped_at":"2025-07-12T21:18:37.580662098+09:00","word_count":62,"content_hash":"bc8664435369f0baf8d54b6b690ba73e"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/netlify-command/","title":"netlifyコマンドでデプロイ","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e記事が約3000あって、画像ファイルを含めると3GBぐらいになるサイトがあります。\u003c/p\u003e\n\u003cp\u003eこれをNetlify側でビルドすると時間がかかります。クレジットも消費しますし、ビルドでタイムアウトになりので作業が進みません。\u003c/p\u003e\n\u003cp\u003eそこで、NetlifyのCLIを使用してデプロイしてみました。\u003c/p\u003e\n\u003ch2 id=\"2-手順\"\u003e2. 手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"21-netlify-cliのインストール\"\u003e2.1. netlify-cliのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-netlify-cliのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enpm install netlify-cli -g\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"22-ログイン\"\u003e2.2. ログイン\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-ログイン\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enetlify login\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003e~/.config/netlify/config.json\u003c/code\u003eにログイン情報が出力されます。\u003c/p\u003e\n\u003ch3 id=\"23-ビルド\"\u003e2.3. ビルド\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#23-ビルド\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eローカルでビルドします。\u003c/p\u003e\n\u003cp\u003eデプロイ時のURLを気にする必要があるので、stagとprodで分けてビルドが必要です。\u003c/p\u003e\n\u003ch3 id=\"24-stag環境へのデプロイ\"\u003e2.4. stag環境へのデプロイ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#24-stag環境へのデプロイ\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e暫定のURLが払い出されてビルドされます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enetlify deploy --dir\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003epublic --site\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003emy-site\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"25-prod環境へのデプロイ\"\u003e2.5. prod環境へのデプロイ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#25-prod環境へのデプロイ\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下のように\u003ccode\u003e--prod\u003c/code\u003eを付与するだけ。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enetlify deploy --dir\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003epublic --site\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003emy-site --prod\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-参考\"\u003e3. 参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://blog.publictheta.com/memos/FgRjKqPvMysUWjdJaGzAg\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eNetlifyでローカルビルドをそのまま静的ホストする | Public Theta Blog\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# 記事が約3000あって、画像ファイルを含めると3GBぐらいになるサイトがあります。 これをNetlify側でビルドすると時間がかかります。クレジットも消費しますし、ビルドでタイムアウトになりので作業が進みません。 そこで、NetlifyのCLIを使用してデプロイしてみました。 2. 手順# 2.1. netlify-cliのインストール# npm install netlify-cli -g 2.2. ログイン# netlify login ~/.config/netlify/config.jsonにログイン情報が出力されます。 2.3. ビルド# ローカルでビルドします。 デプロイ時のURLを気にする必要があるので、stagとprodで分けてビルドが必要です。 2.4. stag環境へのデプロイ# 暫定のURLが払い出されてビルドされます。 netlify deploy --dir=public --site=my-site 2.5. prod環境へのデプロイ# 以下のように--prodを付与するだけ。 netlify deploy --dir=public --site=my-site --prod 3. 参考# Netlifyでローカルビルドをそのまま静的ホストする | Public Theta Blog 微信 支付宝","scraped_at":"2025-07-12T21:18:38.949240412+09:00","word_count":46,"content_hash":"af8845836addb63a85b0909c1440165f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/skip-ci/","title":"netlifyのCIをスキップする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e試行錯誤のため、PUSHを繰り返すことがあります。\u003c/p\u003e\n\u003cp\u003eそうすると、Netlifyがそれを検知して健気にCIを動かし始めます。\u003c/p\u003e\n\u003cp\u003eクレジットが消費されますので、それを避けたくて。\u003c/p\u003e\n\u003ch2 id=\"２手順\"\u003e２．手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#２手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eコミットメッセージに\u003ccode\u003e[skip ci]\u003c/code\u003eを入れるだけです。\u003c/p\u003e\n\u003cp\u003eたとえば、以下のメッセージでもOKです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit commit -m \u003cspan style=\"color:#48b685\"\u003e\u0026#34;[skip ci]\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下にそんな記述があります。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eOf course, you can also specifically instruct Netlify to skip a build even while auto-publishing is turned on. Adding the text [skip ci] to your commit messages will achieve that. And you can also choose to terminate active deploys manually if you need to.\u003ca href=\"https://www.netlify.com/blog/2019/10/10/intelligent-deploy-skipping-an-automatic-optimisation/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eIntelligent deploy skipping: An automatic optimisation\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.netlify.com/blog/2019/10/10/intelligent-deploy-skipping-an-automatic-optimisation/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eIntelligent deploy skipping: An automatic optimisation\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# 試行錯誤のため、PUSHを繰り返すことがあります。 そうすると、Netlifyがそれを検知して健気にCIを動かし始めます。 クレジットが消費されますので、それを避けたくて。 ２．手順# コミットメッセージに[skip ci]を入れるだけです。 たとえば、以下のメッセージでもOKです。 git commit -m \"[skip ci]\" 以下にそんな記述があります。 Of course, you can also specifically instruct Netlify to skip a build even while auto-publishing is turned on. Adding the text [skip ci] to your commit messages will achieve that. And you can also choose to terminate active deploys manually if you need to.Intelligent deploy skipping: An automatic optimisation 参考# Intelligent deploy skipping: An automatic optimisation 微信 支付宝","scraped_at":"2025-07-12T21:18:41.944297092+09:00","word_count":73,"content_hash":"6907383c7b9bb621bcdcc393c438b11e"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/ubuntu-setup/","title":"Ubutu22.04をセットアップする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eこれまで使用していたUbuntuの調子が悪いので、以前使っていたPCを開発マシンとしてUbuntuを入れました。\u003c/p\u003e\n\u003cp\u003eまた同じことを繰り返しそうなので、記録します。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eアプリケーションは最新を入れるようにしてます。\u003c/p\u003e\n\u003ch3 id=\"homeの英語化\"\u003ehomeの英語化\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#homeの英語化\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#ef6155\"\u003eLANG\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003eC xdg-user-dirs-gtk-update\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"パッケージのアップデートとインストール\"\u003eパッケージのアップデートとインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#パッケージのアップデートとインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt update\n\nsudo apt install openssh-server git curl samba vim\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"dockerのインストール\"\u003edockerのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#dockerのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt install ca-certificates curl gnupg lsb-release\nsudo mkdir -p /etc/apt/keyrings\nsudo apt install docker-ce docker-ce-cli containerd.io\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\necho \u003cspan style=\"color:#48b685\"\u003e\u0026#34;deb [arch=\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003edpkg --print-architecture\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003elsb_release -cs\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e stable\u0026#34;\u003c/span\u003e | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null\n\nsudo apt update\n\nsudo apt install docker-ce docker-ce-cli containerd.io\n\nsudo usermod -aG docker \u003cspan style=\"color:#ef6155\"\u003e$USER\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"docker-composeのインストール\"\u003edocker-composeのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#docker-composeのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo curl -L \u003cspan style=\"color:#48b685\"\u003e\u0026#34;https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003euname -s\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003euname -m\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"sambaの設定\"\u003esambaの設定\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#sambaの設定\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003esmb.confはGitHubからコピペする。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo vi /etc/samba/smb.conf \nsudo systemctl restart smbd.service \nsudo pdbedit -a yamadatt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"githubのssh設定\"\u003eGitHubのssh設定\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#githubのssh設定\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e鍵はサーバから持ってくる。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emv github_rsa /home/yamadatt/.ssh\nchmod \u003cspan style=\"color:#f99b15\"\u003e600\u003c/span\u003e github_rsa \nmv codecommit /home/yamadatt/.ssh\nchmod \u003cspan style=\"color:#f99b15\"\u003e600\u003c/span\u003e codecommit\nvi config\nssh -T github.com\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"hugoのインストール\"\u003ehugoのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#hugoのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget https://github.com/gohugoio/hugo/releases/download/v0.124.1/hugo_extended_0.124.1_linux-amd64.deb --no-check-certificate\nsudo dpkg -i hugo_extended_0.124.1_linux-amd64.deb \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"golangのインストール\"\u003egolangのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#golangのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eaptだと1.18がインストールされるため、最新を公式からPPAリポジトリを追加してインストールする。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo add-apt-repository ppa:longsleep/golang-backports\n\nsudo apt install golang\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"terraformのインストール\"\u003eterraformのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#terraformのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget -O- https://apt.releases.hashicorp.com/gpg --no-check-certificate | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \u003cspan style=\"color:#48b685\"\u003e\u0026#34;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com \u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003elsb_release -cs\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e main\u0026#34;\u003c/span\u003e | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo apt install terraform\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"aws-cliのインストール\"\u003eaws-cliのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#aws-cliのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecurl \u003cspan style=\"color:#48b685\"\u003e\u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34;\u003c/span\u003e -o \u003cspan style=\"color:#48b685\"\u003e\u0026#34;awscliv2.zip\u0026#34;\u003c/span\u003e\nunzip awscliv2.zip\nsudo ./aws/install\naws --version\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"aws-samのインストール\"\u003eaws-samのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#aws-samのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip --no-check-certificate\nunzip aws-sam-cli-linux-x86_64.zip -d sam-installation\nsudo ./sam-installation/install\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"nodejsのインストール\"\u003enodejsのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#nodejsのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eパッケージのリポジトリを入れてから、インストール。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecurl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ehugoのテーマで必用なpostcss-cliも入れておく\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enpm install postcss-cli\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"gitの初期設定\"\u003egitの初期設定\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#gitの初期設定\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit config --global user.email \u003cspan style=\"color:#48b685\"\u003e\u0026#34;yamadatt@gmail.com\u0026#34;\u003c/span\u003e\ngit config --global user.name \u003cspan style=\"color:#48b685\"\u003e\u0026#34;yamadatt\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# これまで使用していたUbuntuの調子が悪いので、以前使っていたPCを開発マシンとしてUbuntuを入れました。 また同じことを繰り返しそうなので、記録します。 手順# アプリケーションは最新を入れるようにしてます。 homeの英語化# LANG=C xdg-user-dirs-gtk-update パッケージのアップデートとインストール# sudo apt update sudo apt install openssh-server git curl samba vim dockerのインストール# sudo apt install ca-certificates curl gnupg lsb-release sudo mkdir -p /etc/apt/keyrings sudo apt install docker-ce docker-ce-cli containerd.io curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null sudo apt update sudo apt install docker-ce docker-ce-cli containerd.io sudo usermod -aG docker $USER docker-composeのインストール# sudo curl -L \"https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sambaの設定# smb.confはGitHubからコピペする。 sudo vi /etc/samba/smb.conf sudo systemctl restart smbd.service sudo pdbedit -a yamadatt GitHubのssh設定# 鍵はサーバから持ってくる。 mv github_rsa /home/yamadatt/.ssh chmod 600 github_rsa mv codecommit /home/yamadatt/.ssh chmod 600 codecommit vi config ssh -T github.com hugoのインストール# wget https://github.com/gohugoio/hugo/releases/download/v0.124.1/hugo_extended_0.124.1_linux-amd64.deb --no-check-certificate sudo dpkg -i hugo_extended_0.124.1_linux-amd64.deb golangのインストール# aptだと1.18がインストールされるため、最新を公式からPPAリポジトリを追加してインストールする。 sudo add-apt-repository ppa:longsleep/golang-backports sudo apt install golang terraformのインストール# wget -O- https://apt.releases.hashicorp.com/gpg --no-check-certificate | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list sudo apt update \u0026\u0026 sudo apt install terraform aws-cliのインストール# curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" unzip awscliv2.zip sudo ./aws/install aws --version aws-samのインストール# wget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip --no-check-certificate unzip aws-sam-cli-linux-x86_64.zip -d sam-installation sudo ./sam-installation/install nodejsのインストール# パッケージのリポジトリを入れてから、インストール。 curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash - sudo apt-get install -y nodejs hugoのテーマで必用なpostcss-cliも入れておく npm install postcss-cli gitの初期設定# git config --global user.email \"yamadatt@gmail.com\" git config --global user.name \"yamadatt\" 微信 支付宝","scraped_at":"2025-07-12T21:18:43.922327195+09:00","word_count":226,"content_hash":"786b94d41eabec53cf12fce211f84d36"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/ecs-mackerel/","title":"ECSにmackerelを入れてコンテナを監視する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eECSにmackerelを入れて監視したいということで、やってみました。\u003c/p\u003e\n\u003cp\u003eとりえず急ぎで！ということで良くない方法ではありますが。。。\u003c/p\u003e\n\u003ch2 id=\"2-方法\"\u003e2. 方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下の記事のとおりに追加すればOKです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://mackerel.io/ja/docs/entry/howto/install-agent/container/ecs\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eAmazon ECSにmackerel-container-agentをセットアップする - Mackerel ヘルプ\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e具体的にはタスク定義に以下の記述を追加しました。\u003c/p\u003e\n\u003cp\u003eパラメータストアにAPIキーを格納し、そこから読み取るのが良いのですが、とりあえずということで直書きしました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e        \u003cspan style=\"color:#48b685\"\u003e\u0026#34;environment\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e [\n          {\n            \u003cspan style=\"color:#48b685\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ecs\u0026#34;\u003c/span\u003e,\n            \u003cspan style=\"color:#48b685\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;MACKEREL_CONTAINER_PLATFORM\u0026#34;\u003c/span\u003e\n          },\n          {\n            \u003cspan style=\"color:#48b685\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u0026lt;MY-API-KEY\u0026gt;\u0026#34;\u003c/span\u003e,\n            \u003cspan style=\"color:#48b685\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;MACKEREL_APIKEY\u0026#34;\u003c/span\u003e\n          }\n        ]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eその後、タスクをECSにデプロイすると、、、。\u003c/p\u003e\n\u003cp\u003e以下のようにMackerelにタスク単位に関しできるようになります。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# ECSにmackerelを入れて監視したいということで、やってみました。 とりえず急ぎで！ということで良くない方法ではありますが。。。 2. 方法# 以下の記事のとおりに追加すればOKです。 Amazon ECSにmackerel-container-agentをセットアップする - Mackerel ヘルプ 具体的にはタスク定義に以下の記述を追加しました。 パラメータストアにAPIキーを格納し、そこから読み取るのが良いのですが、とりあえずということで直書きしました。 \"environment\": [ { \"value\": \"ecs\", \"name\": \"MACKEREL_CONTAINER_PLATFORM\" }, { \"value\": \"\u003cMY-API-KEY\u003e\", \"name\": \"MACKEREL_APIKEY\" } ] その後、タスクをECSにデプロイすると、、、。 以下のようにMackerelにタスク単位に関しできるようになります。 微信 支付宝","scraped_at":"2025-07-12T21:18:46.208026486+09:00","word_count":33,"content_hash":"c5c84acc15915a2b8f6a9bdaff3e099f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/terraform-apply-special/","title":"Terraformで特定のリソースだけをapplyする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eterraformで構築している状況です。\u003c/p\u003e\n\u003cp\u003e他のメンバーも構築しているのですが、applyしているものの、コードをリポジトリにアップし忘れていることがあります。\u003c/p\u003e\n\u003cp\u003eEC2だけを更新したいのですが、他のメンバーはS3を触っているようです。\u003c/p\u003e\n\u003cp\u003eEC2だけを更新する方法です。\u003c/p\u003e\n\u003ch2 id=\"2-方法\"\u003e2. 方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のように\u003ccode\u003e--target=\u003c/code\u003eとリソースを指定してapplyします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eterraform apply --target\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003eaws_instance.sample_ec2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# terraformで構築している状況です。 他のメンバーも構築しているのですが、applyしているものの、コードをリポジトリにアップし忘れていることがあります。 EC2だけを更新したいのですが、他のメンバーはS3を触っているようです。 EC2だけを更新する方法です。 2. 方法# 以下のように--target=とリソースを指定してapplyします。 terraform apply --target=aws_instance.sample_ec2 微信 支付宝","scraped_at":"2025-07-12T21:18:47.306149083+09:00","word_count":14,"content_hash":"a35a66dd6bcebee7fe71cdaf4bb9df3f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/expand-ec2-ebs/","title":"EC2のEBSを拡張する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEC2でCentOSを起動しています。\u003c/p\u003e\n\u003cp\u003eこのEBSを増設したいというリクエストがありました。\u003c/p\u003e\n\u003cp\u003e運用開始しているので、作り直しはNGとのことでした。\u003c/p\u003e\n\u003ch2 id=\"2-方法\"\u003e2. 方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e8GBから200GBに変更するための手順です。\u003c/p\u003e\n\u003ch3 id=\"21-terraformebsを200gbに\"\u003e2.1. Terraform：EBSを200GBに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-terraformebsを200gbに\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eまずはterraformを変更します。\u003c/p\u003e\n\u003cp\u003e何も設定しないと8GBなので、200GBのEBSにします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e  \u003cspan style=\"color:#06b6ef\"\u003eroot_block_device\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003evolume_size\u003c/span\u003e           = \u003cspan style=\"color:#f99b15\"\u003e200\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003evolume_type\u003c/span\u003e           = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;gp2\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003edelete_on_termination\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"22-osでファイルシステムを拡張\"\u003e2.2. OSでファイルシステムを拡張\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-osでファイルシステムを拡張\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e次にOS（CentOS7.9）にsshして操作します。\u003c/p\u003e\n\u003cp\u003eEBSだけ拡張しても、以下のようにOSからは8GBで見えています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo lsblk\n\nNAME        MAJ:MIN RM SIZE RO TYPE MOUNTPOINT\nnvme0n1     259:0    \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e   8G  \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e disk\n└─nvme0n1p1 259:1    \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e   8G  \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e part /\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eパーテションサイズを拡張します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo growpart /dev/nvme0n1 \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e\nCHANGED: \u003cspan style=\"color:#ef6155\"\u003epartition\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003estart\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e2048\u003c/span\u003e old: \u003cspan style=\"color:#ef6155\"\u003esize\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e16775168\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003eend\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e16777216\u003c/span\u003e new: \u003cspan style=\"color:#ef6155\"\u003esize\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e419428319\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003eend\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e419430367\u003c/span\u003e\nsudo lsblk\nNAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nnvme0n1     259:0    \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  200G  \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e disk\n└─nvme0n1p1 259:1    \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  200G  \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e part /\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eファイルシステムのサイズの拡大。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo xfs_growfs -d /\nmeta-data\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e/dev/nvme0n1p1         \u003cspan style=\"color:#ef6155\"\u003eisize\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e512\u003c/span\u003e    \u003cspan style=\"color:#ef6155\"\u003eagcount\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e4, \u003cspan style=\"color:#ef6155\"\u003eagsize\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e524224\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003eblks\u003c/span\u003e\n         \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e                       \u003cspan style=\"color:#ef6155\"\u003esectsz\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e512\u003c/span\u003e   \u003cspan style=\"color:#ef6155\"\u003eattr\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e2, \u003cspan style=\"color:#ef6155\"\u003eprojid32bit\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e1\u003c/span\u003e\n         \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e                       \u003cspan style=\"color:#ef6155\"\u003ecrc\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e        \u003cspan style=\"color:#ef6155\"\u003efinobt\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003espinodes\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003edata\u003c/span\u003e     \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e                       \u003cspan style=\"color:#ef6155\"\u003ebsize\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e4096\u003c/span\u003e   \u003cspan style=\"color:#ef6155\"\u003eblocks\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e2096896, \u003cspan style=\"color:#ef6155\"\u003eimaxpct\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e25\u003c/span\u003e\n         \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e                       \u003cspan style=\"color:#ef6155\"\u003esunit\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e      \u003cspan style=\"color:#ef6155\"\u003eswidth\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e blks\n\u003cspan style=\"color:#ef6155\"\u003enaming\u003c/span\u003e   \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003eversion \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e              \u003cspan style=\"color:#ef6155\"\u003ebsize\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e4096\u003c/span\u003e   ascii-ci\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ef6155\"\u003eftype\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003elog\u003c/span\u003e      \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003einternal               \u003cspan style=\"color:#ef6155\"\u003ebsize\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e4096\u003c/span\u003e   \u003cspan style=\"color:#ef6155\"\u003eblocks\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e2560, \u003cspan style=\"color:#ef6155\"\u003eversion\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e2\u003c/span\u003e\n         \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e                       \u003cspan style=\"color:#ef6155\"\u003esectsz\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e512\u003c/span\u003e   \u003cspan style=\"color:#ef6155\"\u003esunit\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e blks, lazy-count\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003erealtime\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003enone                   \u003cspan style=\"color:#ef6155\"\u003eextsz\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e4096\u003c/span\u003e   \u003cspan style=\"color:#ef6155\"\u003eblocks\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e0, \u003cspan style=\"color:#ef6155\"\u003ertextents\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\ndata blocks changed from \u003cspan style=\"color:#f99b15\"\u003e2096896\u003c/span\u003e to \u003cspan style=\"color:#f99b15\"\u003e52428539\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最後に増えているか確認します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edf -h\nファイルシス   サイズ  使用  残り 使用% マウント位置\ndevtmpfs         205M     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  205M    0% /dev\ntmpfs            233M     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  233M    0% /dev/shm\ntmpfs            233M  8.4M  224M    4% /run\ntmpfs            233M     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e  233M    0% /sys/fs/cgroup\n/dev/nvme0n1p1   200G  1.6G  199G    1% /\ntmpfs             47M     \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e   47M    0% /run/user/1000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# EC2でCentOSを起動しています。 このEBSを増設したいというリクエストがありました。 運用開始しているので、作り直しはNGとのことでした。 2. 方法# 8GBから200GBに変更するための手順です。 2.1. Terraform：EBSを200GBに# まずはterraformを変更します。 何も設定しないと8GBなので、200GBのEBSにします。 root_block_device { volume_size = 200 volume_type = \"gp2\" delete_on_termination = true } 2.2. OSでファイルシステムを拡張# 次にOS（CentOS7.9）にsshして操作します。 EBSだけ拡張しても、以下のようにOSからは8GBで見えています。 sudo lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT nvme0n1 259:0 0 8G 0 disk └─nvme0n1p1 259:1 0 8G 0 part / パーテションサイズを拡張します。 sudo growpart /dev/nvme0n1 1 CHANGED: partition=1 start=2048 old: size=16775168 end=16777216 new: size=419428319 end=419430367 sudo lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT nvme0n1 259:0 0 200G 0 disk └─nvme0n1p1 259:1 0 200G 0 part / ファイルシステムのサイズの拡大。 sudo xfs_growfs -d / meta-data=/dev/nvme0n1p1 isize=512 agcount=4, agsize=524224 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=0 spinodes=0 data = bsize=4096 blocks=2096896, imaxpct=25 = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=1 log =internal bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1 realtime =none extsz=4096 blocks=0, rtextents=0 data blocks changed from 2096896 to 52428539 最後に増えているか確認します。 df -h ファイルシス サイズ 使用 残り 使用% マウント位置 devtmpfs 205M 0 205M 0% /dev tmpfs 233M 0 233M 0% /dev/shm tmpfs 233M 8.4M 224M 4% /run tmpfs 233M 0 233M 0% /sys/fs/cgroup /dev/nvme0n1p1 200G 1.6G 199G 1% / tmpfs 47M 0 47M 0% /run/user/1000 微信 支付宝","scraped_at":"2025-07-12T21:18:48.50019234+09:00","word_count":188,"content_hash":"eb0c42104f989a747431ab3b56fb53db"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/ec2-instance-connect-ng/","title":"別のリージョンでEC2 Instance Connectできなかった原因","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEC2 Instance Connectでマネコンからsshしようとしたのですが、できません。。。\u003c/p\u003e\n\u003cp\u003e見落としがちなのかもしれませんが、原因は送信元のネットワークアドレスにありました。\u003c/p\u003e\n\u003ch2 id=\"2-方法\"\u003e2. 方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e踏み台サーバの通信で、送信元のIPアドレスを絞っていました。\u003c/p\u003e\n\u003cp\u003eそしたら、EC2 Instance Connectでsshできないのです。\u003c/p\u003e\n\u003cp\u003eサービスに発行された推奨されるIPブロックを許可する必要がありました。いつもは東京リージョンを使用しているのですが、他のリージョンを使用したため、この考慮が漏れていたのです。\u003c/p\u003e\n\u003cp\u003e以下のjsonファイルから該当のリージョンとサービス名「EC2_INSTANCE_CONNECT」で探して設定します。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://ip-ranges.amazonaws.com/ip-ranges.json\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003ehttps://ip-ranges.amazonaws.com/ip-ranges.json\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# EC2 Instance Connectでマネコンからsshしようとしたのですが、できません。。。 見落としがちなのかもしれませんが、原因は送信元のネットワークアドレスにありました。 2. 方法# 踏み台サーバの通信で、送信元のIPアドレスを絞っていました。 そしたら、EC2 Instance Connectでsshできないのです。 サービスに発行された推奨されるIPブロックを許可する必要がありました。いつもは東京リージョンを使用しているのですが、他のリージョンを使用したため、この考慮が漏れていたのです。 以下のjsonファイルから該当のリージョンとサービス名「EC2_INSTANCE_CONNECT」で探して設定します。 https://ip-ranges.amazonaws.com/ip-ranges.json 微信 支付宝","scraped_at":"2025-07-12T21:18:49.655638438+09:00","word_count":17,"content_hash":"a168d26c29399ddd2186fcf8114592e7"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/git-pass/","title":"CodeCommitでsshを使用しないでpullしたい","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eawsのCodeCommitからgit cloneする際、httpsだとパスワードを求められます。\u003c/p\u003e\n\u003cp\u003eansibleで対話せずにpullしたく、その方法を示します。\u003c/p\u003e\n\u003ch2 id=\"2-方法\"\u003e2. 方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようなURLでcloneします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehttps://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/aaaa\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eユーザIDとパスワードをあらかじめ入れて、以下のようにします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehttps://user:password@git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/aaaa\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eとやります。\u003c/p\u003e\n\u003cp\u003eここで、考慮が必要なポイント。\u003c/p\u003e\n\u003cp\u003eawsが払い出すIDとパスワードはやたらと長いです。\u003c/p\u003e\n\u003cp\u003eそして、\u003ccode\u003e@\u003c/code\u003e、\u003ccode\u003e+\u003c/code\u003e、\u003ccode\u003e/\u003c/code\u003eという文字が含まれています。これらの特殊文字はユーザ名とパスワードとして扱ってくれないのです。\u003c/p\u003e\n\u003cp\u003eそこで、これらの特殊文字のエンコードが必要になります。\u003ccode\u003e@\u003c/code\u003eは\u003ccode\u003e%40\u003c/code\u003eに、\u003ccode\u003e+\u003c/code\u003eは\u003ccode\u003e%2B\u003c/code\u003eに、\u003ccode\u003e/\u003c/code\u003eは\u003ccode\u003e%2F\u003c/code\u003eに変更します。\u003c/p\u003e\n\u003cp\u003eこれによりユーザ名とパスワードとして扱ってくれます。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# awsのCodeCommitからgit cloneする際、httpsだとパスワードを求められます。 ansibleで対話せずにpullしたく、その方法を示します。 2. 方法# 以下のようなURLでcloneします。 https://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/aaaa ユーザIDとパスワードをあらかじめ入れて、以下のようにします。 https://user:password@git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/aaaa とやります。 ここで、考慮が必要なポイント。 awsが払い出すIDとパスワードはやたらと長いです。 そして、@、+、/という文字が含まれています。これらの特殊文字はユーザ名とパスワードとして扱ってくれないのです。 そこで、これらの特殊文字のエンコードが必要になります。@は%40に、+は%2Bに、/は%2Fに変更します。 これによりユーザ名とパスワードとして扱ってくれます。 微信 支付宝","scraped_at":"2025-07-12T21:18:50.790487434+09:00","word_count":19,"content_hash":"783b390be5826794d37fe31418bf758c"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/clear-cash/","title":"コンテナイメージサイズを減らために、まずすること","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCentOS7で実装しているPHPのアプリケーションがありました。\u003c/p\u003e\n\u003cp\u003eそれをコンテナで動かすようにしていたのですが、引き継がれてみたらコンテナイメージが1.6GBありました。\u003c/p\u003e\n\u003cp\u003eこれでは試行錯誤のスピードが落ちると思い、できることから改善しました。\u003c/p\u003e\n\u003ch2 id=\"2-解決策\"\u003e2. 解決策\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-解決策\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようにインストールだけしている状態でした。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eyum install -y php ・・・\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eなので、キャッシュを消します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eyum install -y php ・・・ \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e rm -rf /var/cache/yum/* \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e yum clean all\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれだけで200MBぐらいは減らせることができました。\u003c/p\u003e\n\u003cp\u003eやらないよりやった方がいいです。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# CentOS7で実装しているPHPのアプリケーションがありました。 それをコンテナで動かすようにしていたのですが、引き継がれてみたらコンテナイメージが1.6GBありました。 これでは試行錯誤のスピードが落ちると思い、できることから改善しました。 2. 解決策# 以下のようにインストールだけしている状態でした。 yum install -y php ・・・ なので、キャッシュを消します。 yum install -y php ・・・ \\ \u0026\u0026 rm -rf /var/cache/yum/* \\ \u0026\u0026 yum clean all これだけで200MBぐらいは減らせることができました。 やらないよりやった方がいいです。 微信 支付宝","scraped_at":"2025-07-12T21:18:51.93836156+09:00","word_count":33,"content_hash":"02d8f086fcdc4a410bfca57359414659"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/aws_configure/","title":"対話せずにaws configureする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eコンテナにawsクライアントを詰め込みたくなりました。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eaws configure\u003c/code\u003eすると、対話形式で設定することになります。そうすると、コンテナイメージを作れません。\u003c/p\u003e\n\u003ch2 id=\"2-方法\"\u003e2. 方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のようにして、定義を入れ込みます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws configure set aws_access_key_id AKIAAAAAAAAAAAAA\naws configure set aws_secret_access_key vlaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naws configure set default.region us-west-2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eもう少し向き合いたいので、ホストからコンテナに渡す方法\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://qiita.com/kter/items/be1d0a08aa39fb4cddc7\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eDockerコンテナにホストのAWSアクセスキーを渡す方法 #AWS - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# コンテナにawsクライアントを詰め込みたくなりました。 aws configureすると、対話形式で設定することになります。そうすると、コンテナイメージを作れません。 2. 方法# 以下のようにして、定義を入れ込みます。 aws configure set aws_access_key_id AKIAAAAAAAAAAAAA aws configure set aws_secret_access_key vlaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aws configure set default.region us-west-2 もう少し向き合いたいので、ホストからコンテナに渡す方法 DockerコンテナにホストのAWSアクセスキーを渡す方法 #AWS - Qiita 微信 支付宝","scraped_at":"2025-07-12T21:18:53.076048311+09:00","word_count":30,"content_hash":"1b8f8826f76f275227d5efb035345c2d"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/rsync-to-dir/","title":"空のディレクトリをコピーしたいならrsync","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e初期設定として、規定のディレクトリやファイルを格納する必要がありました。\u003c/p\u003e\n\u003cp\u003eディレクトリは空のディレクトリもあったのですが、cpコマンドだとコピーできません。\u003c/p\u003e\n\u003ch2 id=\"2-解決策\"\u003e2. 解決策\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-解決策\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eタイトルにもあるように、rsyncを使用します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ersync -a dir1 dir2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eオプションに指定している\u003ccode\u003e-a\u003c/code\u003eは以下の意味です。といっても、これだけだとなんのことかわからないと思いますが、\u003ccode\u003e-a\u003c/code\u003eを指定しておけばやりたいことはだいたいやってくれると思います。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e--archive, -a            archive mode is -rlptgoD \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eno -A,-X,-U,-N,-H\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# 初期設定として、規定のディレクトリやファイルを格納する必要がありました。 ディレクトリは空のディレクトリもあったのですが、cpコマンドだとコピーできません。 2. 解決策# タイトルにもあるように、rsyncを使用します。 rsync -a dir1 dir2 オプションに指定している-aは以下の意味です。といっても、これだけだとなんのことかわからないと思いますが、-aを指定しておけばやりたいことはだいたいやってくれると思います。 --archive, -a archive mode is -rlptgoD (no -A,-X,-U,-N,-H) 微信 支付宝","scraped_at":"2025-07-12T21:18:54.231389808+09:00","word_count":22,"content_hash":"9c0b3f6f5041432b42e2129796048063"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/amazonlinux2-setup/","title":"AmazonLinuxをセットアップする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#1-%e8%83%8c%e6%99%af\"\u003e1. 背景\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#2-%e6%89%8b%e9%a0%86\"\u003e2. 手順\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#21-%e3%83%91%e3%83%83%e3%82%b1%e3%83%bc%e3%82%b8%e3%81%ae%e3%82%a2%e3%83%83%e3%83%97%e3%83%87%e3%83%bc%e3%83%88\"\u003e2.1. パッケージのアップデート\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#22-docker%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab\"\u003e2.2. Dockerインストール\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#23-docker%e3%83%87%e3%83%bc%e3%83%a2%e3%83%b3%e8%b5%b7%e5%8b%95\"\u003e2.3. Dockerデーモン起動\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#24-sudo%e3%81%aa%e3%81%97%e3%81%a7%e5%ae%9f%e8%a1%8c%e3%81%a7%e3%81%8d%e3%82%8b%e3%82%88%e3%81%86%e3%81%ab%e3%83%a6%e3%83%bc%e3%82%b6%e3%83%bc%e3%82%b0%e3%83%ab%e3%83%bc%e3%83%97%e3%81%ae%e8%bf%bd%e5%8a%a0\"\u003e2.4. sudoなしで実行できるように、ユーザーグループの追加\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#25-docker%e3%81%ab%e6%9b%b8%e3%81%8d%e8%be%bc%e3%81%bf%e6%a8%a9%e9%99%90%e3%81%ae%e4%bb%98%e4%b8%8e\"\u003e2.5. Dockerに書き込み権限の付与\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#26-docker%e3%83%87%e3%83%bc%e3%83%a2%e3%83%b3%e3%81%ae%e5%86%8d%e8%b5%b7%e5%8b%95\"\u003e2.6. Dockerデーモンの再起動\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#27-docker%e3%83%87%e3%83%bc%e3%83%a2%e3%83%b3%e3%81%ae%e8%87%aa%e5%8b%95%e8%b5%b7%e5%8b%95%e8%a8%ad%e5%ae%9a\"\u003e2.7. Dockerデーモンの自動起動設定\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#28-docker-compose%e3%81%ae%e3%83%80%e3%82%a6%e3%83%b3%e3%83%ad%e3%83%bc%e3%83%89--%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab\"\u003e2.8. Docker Composeのダウンロード \u0026amp; インストール\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#29-%e3%83%91%e3%83%bc%e3%83%9f%e3%83%83%e3%82%b7%e3%83%a7%e3%83%b3%e5%a4%89%e6%9b%b4\"\u003e2.9. パーミッション変更\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#210-%e3%82%b7%e3%83%b3%e3%83%9c%e3%83%aa%e3%83%83%e3%82%af%e3%83%aa%e3%83%b3%e3%82%af%e3%81%ae%e4%bd%9c%e6%88%90\"\u003e2.10. シンボリックリンクの作成\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#211-docker%e3%81%ae%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3%e7%a2%ba%e8%aa%8d\"\u003e2.11. Dockerのバージョン確認\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#212-docker-compose%e3%81%ae%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3%e7%a2%ba%e8%aa%8d\"\u003e2.12. Docker Composeのバージョン確認\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#213-docker%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e3%81%a7sudo%e3%81%8c%e5%bf%85%e8%a6%81%e3%81%a8%e8%a8%80%e3%82%8f%e3%82%8c%e3%81%9f%e3%82%89\"\u003e2.13. dockerコマンドでsudoが必要と言われたら\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#214-aws-configure\"\u003e2.14. aws configure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#215-efs%e3%81%ae%e3%83%9e%e3%82%a6%e3%83%b3%e3%82%bf%e3%81%ae%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab\"\u003e2.15. EFSのマウンタのインストール\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#216-efs%e3%81%ae%e3%83%9e%e3%82%a6%e3%83%b3%e3%83%88\"\u003e2.16. EFSのマウント\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%e3%82%bf%e3%82%a4%e3%83%a0%e3%82%be%e3%83%bc%e3%83%b3%e5%a4%89%e6%9b%b4\"\u003eタイムゾーン変更\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#217-ec2-instance-connect%e3%81%ae%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab\"\u003e2.17. EC2 Instance Connectのインストール\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e久しぶりにAmazonLinuxをセットアップしたので、手順を記録します。\u003c/p\u003e\n\u003ch2 id=\"2-手順\"\u003e2. 手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"21-パッケージのアップデート\"\u003e2.1. パッケージのアップデート\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-パッケージのアップデート\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo dnf update\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"22-dockerインストール\"\u003e2.2. Dockerインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-dockerインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo dnf install -y docker\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"23-dockerデーモン起動\"\u003e2.3. Dockerデーモン起動\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#23-dockerデーモン起動\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl start docker\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"24-sudoなしで実行できるようにユーザーグループの追加\"\u003e2.4. sudoなしで実行できるように、ユーザーグループの追加\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#24-sudoなしで実行できるようにユーザーグループの追加\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo gpasswd -a \u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003ewhoami\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e docker\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"25-dockerに書き込み権限の付与\"\u003e2.5. Dockerに書き込み権限の付与\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#25-dockerに書き込み権限の付与\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo chgrp docker /var/run/docker.sock\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"26-dockerデーモンの再起動\"\u003e2.6. Dockerデーモンの再起動\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#26-dockerデーモンの再起動\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo service docker restart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"27-dockerデーモンの自動起動設定\"\u003e2.7. Dockerデーモンの自動起動設定\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#27-dockerデーモンの自動起動設定\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl enable docker\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"28-docker-composeのダウンロード--インストール\"\u003e2.8. Docker Composeのダウンロード \u0026amp; インストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#28-docker-composeのダウンロード--インストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eバージョンに関しては、\u003ca href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eDocker ComposeのGitHub\u003c/a\u003eを確認してください。\u003c/p\u003e\n\u003cp\u003e2024年3月の最新版である2.25.0を指定しています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo curl -L \u003cspan style=\"color:#48b685\"\u003e\u0026#34;https://github.com/docker/compose/releases/download/v2.25.0/docker-compose-\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003euname -s\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003euname -m\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e -o /usr/local/bin/docker-compose\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"29-パーミッション変更\"\u003e2.9. パーミッション変更\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#29-パーミッション変更\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo chmod +x /usr/local/bin/docker-compose\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"210-シンボリックリンクの作成\"\u003e2.10. シンボリックリンクの作成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#210-シンボリックリンクの作成\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最後に、DockerとDocker Composeのバージョンを表示して、インストールができたか確認します。\u003c/p\u003e\n\u003ch3 id=\"211-dockerのバージョン確認\"\u003e2.11. Dockerのバージョン確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#211-dockerのバージョン確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker -v\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"212-docker-composeのバージョン確認\"\u003e2.12. Docker Composeのバージョン確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#212-docker-composeのバージョン確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker-compose -v\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"213-dockerコマンドでsudoが必要と言われたら\"\u003e2.13. dockerコマンドでsudoが必要と言われたら\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#213-dockerコマンドでsudoが必要と言われたら\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e上記を連続で実施するとsudoが必要と言われる場合があります。\u003c/p\u003e\n\u003cp\u003eその場合はログインしなおしてください。\u003c/p\u003e\n\u003ch3 id=\"214-aws-configure\"\u003e2.14. aws configure\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#214-aws-configure\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e便利なので、awsのプロファイルを作成します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws configure\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"215-efsのマウンタのインストール\"\u003e2.15. EFSのマウンタのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#215-efsのマウンタのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eEFSをマウントするためのツールをインストールします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo dnf install -y amazon-efs-utils\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"216-efsのマウント\"\u003e2.16. EFSのマウント\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#216-efsのマウント\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eマネコンのEFSからマウントコマンドを参照\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eコマンドは参照すればいいので、割愛。\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"タイムゾーン変更\"\u003eタイムゾーン変更\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#タイムゾーン変更\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eタイムゾーンをUTCからJSTに変更します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eコマンドは後で書く\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"217-ec2-instance-connectのインストール\"\u003e2.17. EC2 Instance Connectのインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#217-ec2-instance-connectのインストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eEC2 Instance Connectをインストールします。\u003c/p\u003e\n\u003cp\u003eマネコンからEC2 Instance Connectしないようであれば、不要です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo yum install ec2-instance-connect\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景 2. 手順 2.1. パッケージのアップデート 2.2. Dockerインストール 2.3. Dockerデーモン起動 2.4. sudoなしで実行できるように、ユーザーグループの追加 2.5. Dockerに書き込み権限の付与 2.6. Dockerデーモンの再起動 2.7. Dockerデーモンの自動起動設定 2.8. Docker Composeのダウンロード \u0026 インストール 2.9. パーミッション変更 2.10. シンボリックリンクの作成 2.11. Dockerのバージョン確認 2.12. Docker Composeのバージョン確認 2.13. dockerコマンドでsudoが必要と言われたら 2.14. aws configure 2.15. EFSのマウンタのインストール 2.16. EFSのマウント タイムゾーン変更 2.17. EC2 Instance Connectのインストール 1. 背景# 久しぶりにAmazonLinuxをセットアップしたので、手順を記録します。 2. 手順# 2.1. パッケージのアップデート# sudo dnf update 2.2. Dockerインストール# sudo dnf install -y docker 2.3. Dockerデーモン起動# sudo systemctl start docker 2.4. sudoなしで実行できるように、ユーザーグループの追加# sudo gpasswd -a $(whoami) docker 2.5. Dockerに書き込み権限の付与# sudo chgrp docker /var/run/docker.sock 2.6. Dockerデーモンの再起動# sudo service docker restart 2.7. Dockerデーモンの自動起動設定# sudo systemctl enable docker 2.8. Docker Composeのダウンロード \u0026 インストール# バージョンに関しては、Docker ComposeのGitHubを確認してください。 2024年3月の最新版である2.25.0を指定しています。 sudo curl -L \"https://github.com/docker/compose/releases/download/v2.25.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose 2.9. パーミッション変更# sudo chmod +x /usr/local/bin/docker-compose 2.10. シンボリックリンクの作成# sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 最後に、DockerとDocker Composeのバージョンを表示して、インストールができたか確認します。 2.11. Dockerのバージョン確認# docker -v 2.12. Docker Composeのバージョン確認# docker-compose -v 2.13. dockerコマンドでsudoが必要と言われたら# 上記を連続で実施するとsudoが必要と言われる場合があります。 その場合はログインしなおしてください。 2.14. aws configure# 便利なので、awsのプロファイルを作成します。 aws configure 2.15. EFSのマウンタのインストール# EFSをマウントするためのツールをインストールします。 sudo dnf install -y amazon-efs-utils 2.16. EFSのマウント# マネコンのEFSからマウントコマンドを参照 コマンドは参照すればいいので、割愛。 タイムゾーン変更# タイムゾーンをUTCからJSTに変更します。 コマンドは後で書く 2.17. EC2 Instance Connectのインストール# EC2 Instance Connectをインストールします。 マネコンからEC2 Instance Connectしないようであれば、不要です。 sudo yum install ec2-instance-connect 微信 支付宝","scraped_at":"2025-07-12T21:18:57.515344678+09:00","word_count":175,"content_hash":"c4977893b73db277d8986cff27a519d6"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/deploy-task-to-ecs/","title":"AWSコマンドでECSにタスクをデプロイする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eクラウドリフトの案件でアプリをECSに載せることになりました。\u003c/p\u003e\n\u003cp\u003eなのですが、なかなかまともに動きません。そこで、ECSでちゃんと動くかの試行錯誤のループを高速で回したいので、AWSコマンドで試してみました。\u003c/p\u003e\n\u003cp\u003eじっさいにやってみたらスピード感があったので、手順を残します。\u003c/p\u003e\n\u003ch2 id=\"2-手順\"\u003e2. 手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"21-task登録\"\u003e2.1. task登録\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-task登録\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003etask-def.json\u003c/code\u003eにタスク定義を記述しておいて、それをタスク定義として登録します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws ecs register-task-definition --cli-input-json file://task-def.json\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"22-サービスのアップデート\"\u003e2.2. サービスのアップデート。\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-サービスのアップデート\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e登録したタスク定義でECSにタスクをデプロイします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws ecs update-service --cluster sococa-ecs --service centap-service --task-definition centap-def\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eタスク定義は変更せずにlatestなdockerイメージを取得するだけでいいという場合は、強制アップデートとして\u003ccode\u003e--force-new-deployment\u003c/code\u003eをつけます。\u003c/p\u003e\n\u003cp\u003eただ、強制アップデートはタスクのリビジョンが変わらないので、本当に更新されたかが不安になります。なので、イメージだけを新しくしたい場合でもタスク定義のリビジョンを上げて実施するのが実用的だと思います。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# クラウドリフトの案件でアプリをECSに載せることになりました。 なのですが、なかなかまともに動きません。そこで、ECSでちゃんと動くかの試行錯誤のループを高速で回したいので、AWSコマンドで試してみました。 じっさいにやってみたらスピード感があったので、手順を残します。 2. 手順# 2.1. task登録# task-def.jsonにタスク定義を記述しておいて、それをタスク定義として登録します。 aws ecs register-task-definition --cli-input-json file://task-def.json 2.2. サービスのアップデート。# 登録したタスク定義でECSにタスクをデプロイします。 aws ecs update-service --cluster sococa-ecs --service centap-service --task-definition centap-def タスク定義は変更せずにlatestなdockerイメージを取得するだけでいいという場合は、強制アップデートとして--force-new-deploymentをつけます。 ただ、強制アップデートはタスクのリビジョンが変わらないので、本当に更新されたかが不安になります。なので、イメージだけを新しくしたい場合でもタスク定義のリビジョンを上げて実施するのが実用的だと思います。 微信 支付宝","scraped_at":"2025-07-12T21:18:58.813001848+09:00","word_count":31,"content_hash":"bab4b5cb6a59279b6ec8678718dc8a2b"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/pg_dumpall/","title":"pg_dumpallの使い方","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"1-背景\"\u003e1. 背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eバックアップとリストアをしたくて調べた。\u003c/p\u003e\n\u003ch2 id=\"2-バックアップ\"\u003e2. バックアップ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-バックアップ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e標準出力をパイプしてファイルに書く。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epg_dumpall -h ホスト名 -U ユーザ名 \u0026gt; ファイル名\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e主要なオプションは以下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003epg_dumpの主なオプション\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n-a データのみをダンプ\n-b ラージオブジェクトもダンプする。（注: デフォルトではダンプされません）\n-d INSERTコマンドにてダンプ（通常はCOPYコマンド\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n-D カラム名を含めたINSERTコマンドにてダンプ\n-s テーブルのみダンプ\n-t 特定のテーブルのみダンプ\n-F アウトプットファイルの形式を指定（cがカスタム、tがtar、pがテキスト\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-リストア\"\u003e3. リストア\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-リストア\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e主要なオプションは以下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003epg_restoreの主なオプション\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n-c データベースの作成前にテーブルなどをドロップする。\n-F バックアップファイルの形式を指定（cがカスタム、tがtar、pがテキスト\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n-d データベース名を指定\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"1. 背景# バックアップとリストアをしたくて調べた。 2. バックアップ# 標準出力をパイプしてファイルに書く。 pg_dumpall -h ホスト名 -U ユーザ名 \u003e ファイル名 主要なオプションは以下。 [pg_dumpの主なオプション] -a データのみをダンプ -b ラージオブジェクトもダンプする。（注: デフォルトではダンプされません） -d INSERTコマンドにてダンプ（通常はCOPYコマンド) -D カラム名を含めたINSERTコマンドにてダンプ -s テーブルのみダンプ -t 特定のテーブルのみダンプ -F アウトプットファイルの形式を指定（cがカスタム、tがtar、pがテキスト) 3. リストア# 主要なオプションは以下。 [pg_restoreの主なオプション] -c データベースの作成前にテーブルなどをドロップする。 -F バックアップファイルの形式を指定（cがカスタム、tがtar、pがテキスト) -d データベース名を指定 微信 支付宝","scraped_at":"2025-07-12T21:19:00.399762189+09:00","word_count":42,"content_hash":"8f5f59752ae0585271dc4e64fa21ee6b"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/ec2-ssh-error/","title":"マネコンからEC2へのログインでエラーが出たら","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eマネコンからEC2 Instance Connectで接続しようとすると、エラーが出ました。\u003c/p\u003e\n\u003cp\u003eターミナルからSSHできるのですが、マネコンからログインしたい要件があったので対応を記録します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./EC2InstanceConnect.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e検索しやすいように、テキストで以下に記載。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eFailed to connect to your instance\nEC2 Instance Connect is unable to connect to your instance. Ensure your instance network settings are configured correctly for EC2 Instance Connect. For more information, see EC2 Instance Connect Prerequisites at \u003ca href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-prerequisites.html\"\u003ehttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-prerequisites.html\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"原因と対応\"\u003e原因と対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#原因と対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"原因\"\u003e原因\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#原因\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e該当のEC2（OSはAmazlonLinux）にEC2 Instance Connectがインストールされていないことが原因でした。\u003c/p\u003e\n\u003ch3 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eEC2 Instance Connectをインストールします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo yum install ec2-instance-connect\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# マネコンからEC2 Instance Connectで接続しようとすると、エラーが出ました。 ターミナルからSSHできるのですが、マネコンからログインしたい要件があったので対応を記録します。 検索しやすいように、テキストで以下に記載。 Failed to connect to your instance EC2 Instance Connect is unable to connect to your instance. Ensure your instance network settings are configured correctly for EC2 Instance Connect. For more information, see EC2 Instance Connect Prerequisites at https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-prerequisites.html. 原因と対応# 原因# 該当のEC2（OSはAmazlonLinux）にEC2 Instance Connectがインストールされていないことが原因でした。 対応# EC2 Instance Connectをインストールします。 sudo yum install ec2-instance-connect 微信 支付宝","scraped_at":"2025-07-12T21:19:01.205363078+09:00","word_count":59,"content_hash":"bcf89eaf24a65326aaa66c3b771f25a6"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/ecs-exec/","title":"ECS Execを実装する方法","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eECSでデバッグしたいです。\u003c/p\u003e\n\u003cp\u003eDockerではexecコマンドでコンテナにアタッチできます。じゃあ、ECSはどうなのと調べたら、ECS Execがありました。\u003c/p\u003e\n\u003cp\u003eこの記事はExecできるようにした記録です。\u003c/p\u003e\n\u003ch2 id=\"execの有効かどうかの確認\"\u003eExecの有効かどうかの確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#execの有効かどうかの確認\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のコマンドでExecが有効であるかを確認できます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws ecs describe-services \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--cluster yamada-ecs-cluster \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--services yamada-ecs-service \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--query \u003cspan style=\"color:#48b685\"\u003e\u0026#39;services[0].enableExecuteCommand\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003efalseだと無効、trueだと有効です。\u003c/p\u003e\n\u003ch2 id=\"service\"\u003eservice\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#service\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のように\u003ccode\u003eenable_execute_command = true\u003c/code\u003eを定義します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_ecs_service\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e {\n  \n  \u003cspan style=\"color:#ef6155\"\u003e~省略〜\u003c/span\u003e\n\n  \u003cspan style=\"color:#06b6ef\"\u003ecluster\u003c/span\u003e                = \u003cspan style=\"color:#06b6ef\"\u003eaws_ecs_cluster\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003emain\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003etask_definition\u003c/span\u003e        = \u003cspan style=\"color:#06b6ef\"\u003eaws_ecs_task_definition\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003emain\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003earn\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003elaunch_type\u003c/span\u003e            = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;FARGATE\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eenable_execute_command\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e #ECS EXECの有効\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\n　\u003cspan style=\"color:#ef6155\"\u003e~省略〜\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"iamポリシーの定義\"\u003eIAMポリシーの定義\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#iamポリシーの定義\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIAMポリシーの定義は以下のように\u003ccode\u003essmmessages\u003c/code\u003eを入れます。\u003c/p\u003e\n\u003cp\u003eECSはexecロールとtaskロールがあります。こちらはtaskロールに入れます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_iam_policy\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ecs_task\u0026#34;\u003c/span\u003e {\n\n　\u003cspan style=\"color:#ef6155\"\u003e~省略〜\u003c/span\u003e\n\n  \u003cspan style=\"color:#06b6ef\"\u003epolicy\u003c/span\u003e = jsonencode({\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Version\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;2012-10-17\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Statement\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e [\n      {\n        \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Action\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e [\n          \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ssmmessages:CreateControlChannel\u0026#34;\u003c/span\u003e,\n          \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ssmmessages:CreateDataChannel\u0026#34;\u003c/span\u003e,\n          \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ssmmessages:OpenControlChannel\u0026#34;\u003c/span\u003e,\n          \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ssmmessages:OpenDataChannel\u0026#34;\u003c/span\u003e\n        ],\n        \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Effect\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Allow\u0026#34;\u003c/span\u003e,\n        \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Resource\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e [\n          \u003cspan style=\"color:#48b685\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\n        ]\n      }\n    ]\n  })\n\n　\u003cspan style=\"color:#ef6155\"\u003e~省略〜\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"タスクのデプロイ\"\u003eタスクのデプロイ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#タスクのデプロイ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e上記の設定を反映した後はタスクのデプロイが必要です。\u003c/p\u003e\n\u003cp\u003e私はこれをやらずに、いつまでたっても反映されないので、焦ってました。\u003c/p\u003e\n\u003ch2 id=\"コンテナに入るためにタスクidを調べる\"\u003eコンテナに入るために、タスクIDを調べる\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#コンテナに入るためにタスクidを調べる\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eタスクのIDを調べます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws ecs list-tasks \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--cluster yamada-ecs-cluster \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--service yamada-ecs-service\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のように出力されます。\u003c/p\u003e\n\u003cp\u003e最後尾の\u003ccode\u003e/\u003c/code\u003eの後がタスクIDです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n    \u003cspan style=\"color:#5bc4bf\"\u003e\u0026#34;taskArns\u0026#34;\u003c/span\u003e: [\n        \u003cspan style=\"color:#48b685\"\u003e\u0026#34;arn:aws:ecs:ap-northeast-1:123456789012:task/zoo200-cluster/ac089xxxxx\u0026#34;\u003c/span\u003e\n    ]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eタスクがExecに対応しているかを確認します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws ecs describe-tasks \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--cluster yamada-ecs-cluster \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--tasks ac089xxxxx \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--query \u003cspan style=\"color:#48b685\"\u003e\u0026#39;tasks[0].enableExecuteCommand\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003efalse\u003c/code\u003eだと無効、\u003ccode\u003etrue\u003c/code\u003eだと有効です。\u003c/p\u003e\n\u003ch2 id=\"いよいよコンテナにアタッチ\"\u003eいよいよコンテナにアタッチ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#いよいよコンテナにアタッチ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eやっとコンテナにアタッチできます。クラスタ、タスク、コンテナを指定します。コンテナは定義している名前をそのまま使用します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws ecs execute-command \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--cluster yamada-ecs-cluster \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--task ac089xxxxx \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--container golang-helloworld \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--interactive \u003cspan style=\"color:#f99b15\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e\u003c/span\u003e--command /bin/sh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# ECSでデバッグしたいです。 Dockerではexecコマンドでコンテナにアタッチできます。じゃあ、ECSはどうなのと調べたら、ECS Execがありました。 この記事はExecできるようにした記録です。 Execの有効かどうかの確認# 以下のコマンドでExecが有効であるかを確認できます。 aws ecs describe-services \\ --cluster yamada-ecs-cluster \\ --services yamada-ecs-service \\ --query 'services[0].enableExecuteCommand' falseだと無効、trueだと有効です。 service# 以下のようにenable_execute_command = trueを定義します。 resource \"aws_ecs_service\" \"main\" { ~省略〜 cluster = aws_ecs_cluster.main.id task_definition = aws_ecs_task_definition.main.arn launch_type = \"FARGATE\" enable_execute_command = true #ECS EXECの有効 　~省略〜 } IAMポリシーの定義# IAMポリシーの定義は以下のようにssmmessagesを入れます。 ECSはexecロールとtaskロールがあります。こちらはtaskロールに入れます。 resource \"aws_iam_policy\" \"ecs_task\" { 　~省略〜 policy = jsonencode({ \"Version\" : \"2012-10-17\", \"Statement\" : [ { \"Action\" : [ \"ssmmessages:CreateControlChannel\", \"ssmmessages:CreateDataChannel\", \"ssmmessages:OpenControlChannel\", \"ssmmessages:OpenDataChannel\" ], \"Effect\" : \"Allow\", \"Resource\" : [ \"*\" ] } ] }) 　~省略〜 タスクのデプロイ# 上記の設定を反映した後はタスクのデプロイが必要です。 私はこれをやらずに、いつまでたっても反映されないので、焦ってました。 コンテナに入るために、タスクIDを調べる# タスクのIDを調べます。 aws ecs list-tasks \\ --cluster yamada-ecs-cluster \\ --service yamada-ecs-service 以下のように出力されます。 最後尾の/の後がタスクIDです。 { \"taskArns\": [ \"arn:aws:ecs:ap-northeast-1:123456789012:task/zoo200-cluster/ac089xxxxx\" ] } タスクがExecに対応しているかを確認します。 aws ecs describe-tasks \\ --cluster yamada-ecs-cluster \\ --tasks ac089xxxxx \\ --query 'tasks[0].enableExecuteCommand' falseだと無効、trueだと有効です。 いよいよコンテナにアタッチ# やっとコンテナにアタッチできます。クラスタ、タスク、コンテナを指定します。コンテナは定義している名前をそのまま使用します。 aws ecs execute-command \\ --cluster yamada-ecs-cluster \\ --task ac089xxxxx \\ --container golang-helloworld \\ --interactive \\ --command /bin/sh 微信 支付宝","scraped_at":"2025-07-12T21:19:02.298257944+09:00","word_count":140,"content_hash":"34fe2411798262a691907b52ed0241fe"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/ses-sandbox-go-out/","title":"SESをサンドボックスから本稼働させた記録","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSESは不用意にメールを送信しないようにしています。開発期間はサンドボックス扱いにして、許可したメールアドレスのみ送信するようにします。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e開発期間中でも不特定のメールアドレスにメール送信するためには、本稼働させる必要があります。\u003c/p\u003e\n\u003cp\u003eこの記事は本稼働させた記録です。\u003c/p\u003e\n\u003ch2 id=\"やったこと\"\u003eやったこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やったこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e本稼働のリクエストをします。以下のように記入しました。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eそうすると、要求を受け付けたようになります。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"03.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e要求が承認されるまで1日ぐらいかかります。以下のように送信数などが増えています。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"04.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# SESは不用意にメールを送信しないようにしています。開発期間はサンドボックス扱いにして、許可したメールアドレスのみ送信するようにします。 開発期間中でも不特定のメールアドレスにメール送信するためには、本稼働させる必要があります。 この記事は本稼働させた記録です。 やったこと# 本稼働のリクエストをします。以下のように記入しました。 そうすると、要求を受け付けたようになります。 要求が承認されるまで1日ぐらいかかります。以下のように送信数などが増えています。 微信 支付宝","scraped_at":"2025-07-12T21:19:04.581710427+09:00","word_count":10,"content_hash":"db1e58ad3ede672d327aac7fe0cae3d0"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/sakura-server-japan-only-setting/","title":"SAKURAサーバのFTPは送信元が国内のみに制限されている","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://rs.sakura.ad.jp/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eSAKURAのレンタルサーバ\u003c/a\u003eでサーバをレンタルしました。\u003c/p\u003e\n\u003cp\u003eGitHub Actionsを使用してFTPでデプロイしようとすると、以下のメッセージでデプロイできません。30分ぐらい悩んだので記録します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eError: Error: Server sent FIN packet unexpectedly, closing connection.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"原因\"\u003e原因\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#原因\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e国外のサーバからの通信を制限しているのが原因です。\u003c/p\u003e\n\u003cp\u003e契約したままのデフォルト設定だと、国外サーバは通信できません。GitHubActionsのサーバは国外にあると思うので、通信できなかったのだと思います。\u003c/p\u003e\n\u003ch2 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のように「有効（制限する）」が設定されています。そのため、「無効（制限しない）」に変更します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# SAKURAのレンタルサーバでサーバをレンタルしました。 GitHub Actionsを使用してFTPでデプロイしようとすると、以下のメッセージでデプロイできません。30分ぐらい悩んだので記録します。 Error: Error: Server sent FIN packet unexpectedly, closing connection. 原因# 国外のサーバからの通信を制限しているのが原因です。 契約したままのデフォルト設定だと、国外サーバは通信できません。GitHubActionsのサーバは国外にあると思うので、通信できなかったのだと思います。 対応# 以下のように「有効（制限する）」が設定されています。そのため、「無効（制限しない）」に変更します。 微信 支付宝","scraped_at":"2025-07-12T21:19:06.882346064+09:00","word_count":20,"content_hash":"01eba14643e40b514b0713ca72d89446"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2024/aws-vpc-5-limit/","title":"AWSのVPCは5つまでだから、10まで増やした記録","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eterraformでAWSのVPCを作成する際に以下のエラーメッセージが出力されました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eError: creating EC2 VPC: operation error EC2: CreateVpc, https response error StatusCode: 400, RequestID: fa72ed92-2d52-4dc0-b583-da9d85a03718, api error VpcLimitExceeded: The maximum number of VPCs has been reached.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"原因\"\u003e原因\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#原因\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eVPCはデフォルトで5つまでです。そのリミットに到達したというメッセージです。\u003c/p\u003e\n\u003cp\u003eこの上限は申請することで引き上げることができます。\u003c/p\u003e\n\u003ch2 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eとりあえず10まで引き上げました。この記事はその記録です。\u003c/p\u003e\n\u003cp\u003e以下のように5が設定されています。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e「クォータ値を引き上げる」の\u003ccode\u003e5\u003c/code\u003eを\u003ccode\u003e10\u003c/code\u003eにします。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eそうすると、ステータスが「保留中」になります。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"03.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e私の場合は30分ぐらいで「承認済み」になりました。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"04.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# terraformでAWSのVPCを作成する際に以下のエラーメッセージが出力されました。 Error: creating EC2 VPC: operation error EC2: CreateVpc, https response error StatusCode: 400, RequestID: fa72ed92-2d52-4dc0-b583-da9d85a03718, api error VpcLimitExceeded: The maximum number of VPCs has been reached. 原因# VPCはデフォルトで5つまでです。そのリミットに到達したというメッセージです。 この上限は申請することで引き上げることができます。 対応# とりあえず10まで引き上げました。この記事はその記録です。 以下のように5が設定されています。 「クォータ値を引き上げる」の5を10にします。 そうすると、ステータスが「保留中」になります。 私の場合は30分ぐらいで「承認済み」になりました。 微信 支付宝","scraped_at":"2025-07-12T21:19:08.078739299+09:00","word_count":39,"content_hash":"fa5bbaef689b603dffc818ea55f78f1f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/ses-is-not-verified/","title":"開発時、SESではメールアドレスを登録しておく","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"困ったこと\"\u003e困ったこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#困ったこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSESでメール送信のテストをしようと、以下のコマンドでメールを送信しようとしました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws --profile ars --region ap-northeast-1 ses send-email --from mail@ars-grading-mail.com --to xxxxx@gmail.com --message \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Subject={Data=This is a test mail,Charset=utf8},Body={Text={Data=This is a test mail.,Charset=utf8},Html={Data=This is a test mail,Charset=utf8}}\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eそうすると、以下のエラーでメール送信できないのです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eAn error occurred \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eMessageRejected\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e when calling the SendEmail operation: Email address is not verified. The following identities failed the check in region AP-NORTHEAST-1: xxxxx@gmail.com\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"原因\"\u003e原因\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#原因\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e上のエラーメッセージは、自分のメールアドレス「xxxxx@gmail.com」が検証されていないという内容です。\u003c/p\u003e\n\u003cp\u003eAWS SESはデフォルトで「サンドボックス」モードで動作します。このモードでは送信先を事前に検証しておく必要があります。これは、Amazonがスパムや不正利用を防止するためのポリシーであるからということらしいです。\u003c/p\u003e\n\u003ch2 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eじゃあ、どれすればいいかというと。\u003c/p\u003e\n\u003cp\u003e以下の手順で送信先となる自分のメールアドレスを登録します。\u003c/p\u003e\n\u003cp\u003eIDの作成を選択。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"id1.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eEメールアドレスを選択して、送信先のアドレスを入力します。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"id2.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"変更後\"\u003e変更後\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#変更後\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下を実施します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\naws --profile ars --region ap-northeast-1 ses send-email --from mail@ars-grading-mail.com --to xxxxx@gmail.com --message \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Subject={Data=This is a test mail,Charset=utf8},Body={Text={Data=This is a test mail.,Charset=utf8},Html={Data=This is a test mail,Charset=utf8}}\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eそうすると、以下のようにjsonが返却されました。これで送信できてまして、gmailを参照するとメールが届いていることを確認できます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;MessageId\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;0106018cb0836439-94807cd8-e8ab-4bb2-9323-89becb120517-000000\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"困ったこと# SESでメール送信のテストをしようと、以下のコマンドでメールを送信しようとしました。 aws --profile ars --region ap-northeast-1 ses send-email --from mail@ars-grading-mail.com --to xxxxx@gmail.com --message \"Subject={Data=This is a test mail,Charset=utf8},Body={Text={Data=This is a test mail.,Charset=utf8},Html={Data=This is a test mail,Charset=utf8}}\" そうすると、以下のエラーでメール送信できないのです。 An error occurred (MessageRejected) when calling the SendEmail operation: Email address is not verified. The following identities failed the check in region AP-NORTHEAST-1: xxxxx@gmail.com 原因# 上のエラーメッセージは、自分のメールアドレス「xxxxx@gmail.com」が検証されていないという内容です。 AWS SESはデフォルトで「サンドボックス」モードで動作します。このモードでは送信先を事前に検証しておく必要があります。これは、Amazonがスパムや不正利用を防止するためのポリシーであるからということらしいです。 対応# じゃあ、どれすればいいかというと。 以下の手順で送信先となる自分のメールアドレスを登録します。 IDの作成を選択。 Eメールアドレスを選択して、送信先のアドレスを入力します。 変更後# 以下を実施します。 aws --profile ars --region ap-northeast-1 ses send-email --from mail@ars-grading-mail.com --to xxxxx@gmail.com --message \"Subject={Data=This is a test mail,Charset=utf8},Body={Text={Data=This is a test mail.,Charset=utf8},Html={Data=This is a test mail,Charset=utf8}}\" そうすると、以下のようにjsonが返却されました。これで送信できてまして、gmailを参照するとメールが届いていることを確認できます。 { \"MessageId\": \"0106018cb0836439-94807cd8-e8ab-4bb2-9323-89becb120517-000000\" } 微信 支付宝","scraped_at":"2025-07-12T21:19:09.836115231+09:00","word_count":95,"content_hash":"c6c96c59d621321a58f8d8c76826f614"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/wordpress-jetpack-kurukuru/","title":"WordPressのJetpack統計がくるくるで表示された場合の対応","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWordPressプラグインの「Jetpack」の統計が、WordPressダッシュボードで画像のようにローディングアイコンがずっとクルクル回っていて閲覧できない状態になっていました。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"20230809191504.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eアクセス数などを参照できないと不便なので、改善を試みました。\u003c/p\u003e\n\u003ch2 id=\"やっても効果がなかったこと\"\u003eやっても効果がなかったこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やっても効果がなかったこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eキャッシュをクリアしたり、競合しそうなプラグイン（SiteGuardなど）を停止してみました。\u003c/p\u003e\n\u003cp\u003eですが、効果はありませんでした。\u003c/p\u003e\n\u003ch2 id=\"対処\"\u003e対処\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対処\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e効果のあった対処は以下です。\u003c/p\u003e\n\u003cp\u003eJetpackの設定から、「トラフィック」のタブを選択。\u003c/p\u003e\n\u003cp\u003eこのタブに「新しい Jetpack 統計情報のエクスペリエンスを有効化」があるので、このチェックを外します。\u003c/p\u003e\n\u003ch2 id=\"改善したぜ\"\u003e改善したぜ！\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#改善したぜ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e上記の対処で、以下のように改善されました。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"after.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# WordPressプラグインの「Jetpack」の統計が、WordPressダッシュボードで画像のようにローディングアイコンがずっとクルクル回っていて閲覧できない状態になっていました。 アクセス数などを参照できないと不便なので、改善を試みました。 やっても効果がなかったこと# キャッシュをクリアしたり、競合しそうなプラグイン（SiteGuardなど）を停止してみました。 ですが、効果はありませんでした。 対処# 効果のあった対処は以下です。 Jetpackの設定から、「トラフィック」のタブを選択。 このタブに「新しい Jetpack 統計情報のエクスペリエンスを有効化」があるので、このチェックを外します。 改善したぜ！# 上記の対処で、以下のように改善されました。 微信 支付宝","scraped_at":"2025-07-12T21:19:10.366325066+09:00","word_count":16,"content_hash":"59e0f743f23cbab654341f628e8ec357"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/github-max-size/","title":"GitHubに100MBを超えるファイルをPUSHしちゃったら","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHubは1ファイルのサイズ上限が100MBになっています。その制限に抵触した場合にcommitを戻したりしたので、記録します。\u003c/p\u003e\n\u003ch2 id=\"100mbオーバーのファイルをpushしたら\"\u003e100MBオーバーのファイルをPUSHしたら\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#100mbオーバーのファイルをpushしたら\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eテスト用に200MBぐらいのファイルを作って、PUSHしたらファイルサイズが大きいと怒られました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ git push\nEnumerating objects: 77, \u003cspan style=\"color:#815ba4\"\u003edone\u003c/span\u003e.\nCounting objects: 100% \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e77/77\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e, \u003cspan style=\"color:#815ba4\"\u003edone\u003c/span\u003e.\nDelta compression using up to \u003cspan style=\"color:#f99b15\"\u003e4\u003c/span\u003e threads\nCompressing objects: 100% \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e68/68\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e, \u003cspan style=\"color:#815ba4\"\u003edone\u003c/span\u003e.\nWriting objects: 100% \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e73/73\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e, 50.93 MiB | 1.77 MiB/s, \u003cspan style=\"color:#815ba4\"\u003edone\u003c/span\u003e.\nTotal \u003cspan style=\"color:#f99b15\"\u003e73\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003edelta 43\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e, reused \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003edelta 0\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e, pack-reused \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\nremote: Resolving deltas: 100% \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e43/43\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e, completed with \u003cspan style=\"color:#f99b15\"\u003e3\u003c/span\u003e local objects.\nremote: error: Trace: 10d8486a3ac1041e91af885e9e05748af4fa9da4753873286f74c0d8098ed37a\nremote: error: See https://gh.io/lfs \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e more information.\nremote: error: File 2.txt is 221.12 MB; this exceeds GitHub\u003cspan style=\"color:#48b685\"\u003e\u0026#39;s file size limit of 100.00 MB\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003eremote: error: File 1.txt is 275.57 MB; this exceeds GitHub\u0026#39;\u003c/span\u003es file size limit of 100.00 MB\nremote: error: File 1.txt is 275.40 MB; this exceeds GitHub\u003cspan style=\"color:#48b685\"\u003e\u0026#39;s file size limit of 100.00 MB\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003eremote: error: File 2.txt is 216.00 MB; this exceeds GitHub\u0026#39;\u003c/span\u003es file size limit of 100.00 MB\nremote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.\nTo github.com:yamadatt/xxxxx.git\n ! \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003eremote rejected\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e   master -\u0026gt; master \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003epre-receive hook declined\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\nerror: failed to push some refs to \u003cspan style=\"color:#48b685\"\u003e\u0026#39;github.com:yamadatt/xxxxx.git\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下を実施します。\u003c/p\u003e\n\u003ch3 id=\"戻りたい場所まで戻す\"\u003e戻りたい場所まで戻す\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#戻りたい場所まで戻す\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003egit log\u003c/code\u003eで戻したいコミットを探します。\u003c/p\u003e\n\u003cp\u003e戻します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit reset --soft c93433c\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"ファイルをコミット\"\u003eファイルをコミット\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ファイルをコミット\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e後はファイルをコミットしてPUSHします。\u003c/p\u003e\n\u003cp\u003ePUSHで怒られたら、\u003ccode\u003e-f\u003c/code\u003eで強引にPUSHします。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# GitHubは1ファイルのサイズ上限が100MBになっています。その制限に抵触した場合にcommitを戻したりしたので、記録します。 100MBオーバーのファイルをPUSHしたら# テスト用に200MBぐらいのファイルを作って、PUSHしたらファイルサイズが大きいと怒られました。 $ git push Enumerating objects: 77, done. Counting objects: 100% (77/77), done. Delta compression using up to 4 threads Compressing objects: 100% (68/68), done. Writing objects: 100% (73/73), 50.93 MiB | 1.77 MiB/s, done. Total 73 (delta 43), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (43/43), completed with 3 local objects. remote: error: Trace: 10d8486a3ac1041e91af885e9e05748af4fa9da4753873286f74c0d8098ed37a remote: error: See https://gh.io/lfs for more information. remote: error: File 2.txt is 221.12 MB; this exceeds GitHub's file size limit of 100.00 MB remote: error: File 1.txt is 275.57 MB; this exceeds GitHub's file size limit of 100.00 MB remote: error: File 1.txt is 275.40 MB; this exceeds GitHub's file size limit of 100.00 MB remote: error: File 2.txt is 216.00 MB; this exceeds GitHub's file size limit of 100.00 MB remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com. To github.com:yamadatt/xxxxx.git ! [remote rejected] master -\u003e master (pre-receive hook declined) error: failed to push some refs to 'github.com:yamadatt/xxxxx.git' 対応# 以下を実施します。 戻りたい場所まで戻す# git logで戻したいコミットを探します。 戻します。 git reset --soft c93433c ファイルをコミット# 後はファイルをコミットしてPUSHします。 PUSHで怒られたら、-fで強引にPUSHします。 微信 支付宝","scraped_at":"2025-07-12T21:19:12.653544516+09:00","word_count":184,"content_hash":"fe6818b8c1ff76223ddeb6dccdcfdd0d"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/after-terraform-update/","title":"terraformバージョンアップ後にやったこと","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"planすると注意される\"\u003eplanすると注意される\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#planすると注意される\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eplanすると、以下のように注意されます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#06b6ef\"\u003eterraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eplan\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e╷\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eError\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eBackend\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003einitialization\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erequired\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eplease\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erun\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;terraform init\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eReason\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eInitial\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eof\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erequested\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebackend\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;s3\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eThe\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;backend\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethat\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003euses\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003estore\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003estate\u003c/span\u003e,\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eperform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eoperations\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eetc\u003c/span\u003e. \u003cspan style=\"color:#06b6ef\"\u003eIf\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethis\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emessage\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eshowing\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eup\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eit\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emeans\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethat\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyou\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003ere\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecustom\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebackend\u003c/span\u003e.\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eChanges\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebackend\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfigurations\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erequire\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ereinitialization\u003c/span\u003e. \u003cspan style=\"color:#06b6ef\"\u003eThis\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eallows\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eset\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eup\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003ecopy\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eexisting\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003estate\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eetc\u003c/span\u003e. \u003cspan style=\"color:#06b6ef\"\u003ePlease\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erun\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;terraform init\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ewith\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eeither\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;-reconfigure\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eor\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;-migrate-state\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eflags\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eto\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003euse\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecurrent\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e.\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eIf\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echange\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ereason\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eabove\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eincorrect\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eplease\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003everify\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyour\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehasn\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003et\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echanged\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eand\u003c/span\u003e try \u003cspan style=\"color:#06b6ef\"\u003eagain\u003c/span\u003e. \u003cspan style=\"color:#06b6ef\"\u003eAt\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethis\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003epoint\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eno\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echanges\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyour\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eexisting\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eor\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003estate\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehave\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebeen\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emade\u003c/span\u003e.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"init\"\u003einit\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#init\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eなので、initします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#06b6ef\"\u003eterraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003einit\u003c/span\u003e\n\n\u003cspan style=\"color:#06b6ef\"\u003eInitializing\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebackend\u003c/span\u003e...\n\n\u003cspan style=\"color:#06b6ef\"\u003eSuccessfully\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfigured\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebackend\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;s3\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e!\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ewill\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eautomatically\u003c/span\u003e\n\u003cspan style=\"color:#06b6ef\"\u003euse\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethis\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebackend\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eunless\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebackend\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echanges\u003c/span\u003e.\n\u003cspan style=\"color:#06b6ef\"\u003eInitializing\u003c/span\u003e module\u003cspan style=\"color:#06b6ef\"\u003es\u003c/span\u003e...\n\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecloudtrail\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003ein\u003c/span\u003e module\u003cspan style=\"color:#06b6ef\"\u003es\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003ecloudtrail\u003c/span\u003e\n\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfig_ap\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003enortheast\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e-1\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003ein\u003c/span\u003e module\u003cspan style=\"color:#06b6ef\"\u003es\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003econfig\u003c/span\u003e\n\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eguardduty\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eeu\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003enorth\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e-1\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003ein\u003c/span\u003e module\u003cspan style=\"color:#06b6ef\"\u003es\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eguardduty\u003c/span\u003e\n\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003enotification\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003ein\u003c/span\u003e module\u003cspan style=\"color:#06b6ef\"\u003es\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003enotification\u003c/span\u003e\n\n\u003cspan style=\"color:#06b6ef\"\u003eInitializing\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eprovider\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eplugins\u003c/span\u003e...\n\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eFinding\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehashicorp\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eaws\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eversions\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ematching\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;~\u0026gt; 5.6.0\u0026#34;\u003c/span\u003e...\n\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eInstalling\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehashicorp\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eaws\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ev5\u003c/span\u003e.\u003cspan style=\"color:#f99b15\"\u003e6\u003c/span\u003e.\u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e...\n\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eInstalled\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehashicorp\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eaws\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ev5\u003c/span\u003e.\u003cspan style=\"color:#f99b15\"\u003e6\u003c/span\u003e.\u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e (\u003cspan style=\"color:#06b6ef\"\u003esigned\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eby\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eHashiCorp\u003c/span\u003e)\n\n\u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehas\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecreated\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003elock\u003c/span\u003e file .\u003cspan style=\"color:#06b6ef\"\u003eterraform\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003elock\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ehcl\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erecord\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eprovider\u003c/span\u003e\n\u003cspan style=\"color:#06b6ef\"\u003eselections\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eit\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emade\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eabove\u003c/span\u003e. \u003cspan style=\"color:#06b6ef\"\u003eInclude\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethis\u003c/span\u003e file \u003cspan style=\"color:#815ba4\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyour\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eversion\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econtrol\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erepository\u003c/span\u003e\n\u003cspan style=\"color:#06b6ef\"\u003eso\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethat\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e can \u003cspan style=\"color:#06b6ef\"\u003eguarantee\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emake\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003esame\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eselections\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eby\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edefault\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ewhen\u003c/span\u003e\n\u003cspan style=\"color:#06b6ef\"\u003eyou\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erun\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;terraform init\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003efuture\u003c/span\u003e.\n\n\u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehas\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebeen\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003esuccessfully\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003einitialized\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e!\u003c/span\u003e\n\n\u003cspan style=\"color:#06b6ef\"\u003eYou\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003emay\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003enow\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebegin\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eworking\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ewith\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e. \u003cspan style=\"color:#06b6ef\"\u003eTry\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erunning\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;terraform plan\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003esee\u003c/span\u003e\n\u003cspan style=\"color:#06b6ef\"\u003eany\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echanges\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethat\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eare\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003erequired\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyour\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003einfrastructure\u003c/span\u003e. \u003cspan style=\"color:#06b6ef\"\u003eAll\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecommands\u003c/span\u003e\n\u003cspan style=\"color:#06b6ef\"\u003eshould\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003enow\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ework\u003c/span\u003e.\n\n\u003cspan style=\"color:#06b6ef\"\u003eIf\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyou\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eever\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eset\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eor\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echange\u003c/span\u003e module\u003cspan style=\"color:#06b6ef\"\u003es\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eor\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ebackend\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e,\n\u003cspan style=\"color:#06b6ef\"\u003ererun\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethis\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecommand\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ereinitialize\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyour\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eworking\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edirectory\u003c/span\u003e. \u003cspan style=\"color:#06b6ef\"\u003eIf\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyou\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eforget\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eother\u003c/span\u003e\n\u003cspan style=\"color:#06b6ef\"\u003ecommands\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ewill\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edetect\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eit\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eand\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eremind\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyou\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eto\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eso\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003enecessary\u003c/span\u003e.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"plan\"\u003eplan\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#plan\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e差分が出ないかをplanで確認します。\u003ccode\u003eNo changes. Your infrastructure matches the configuration.\u003c/code\u003e差分が無いと確認できます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#06b6ef\"\u003eterraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eplan\u003c/span\u003e\n\u003cspan style=\"color:#815ba4\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003edata\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eaws_iam_policy\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003econfig\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eReading\u003c/span\u003e...\n\u003cspan style=\"color:#815ba4\"\u003emodule\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ecloudtrail\u003c/span\u003e.data.\u003cspan style=\"color:#06b6ef\"\u003eaws_caller_identity\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ecurrent\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eReading\u003c/span\u003e...\n\n\u003cspan style=\"color:#5bc4bf\"\u003e---\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e途中省略\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e---\u003c/span\u003e\n\n\u003cspan style=\"color:#06b6ef\"\u003eNo\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003echanges\u003c/span\u003e. \u003cspan style=\"color:#06b6ef\"\u003eYour\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003einfrastructure\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ematches\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e.\n\n\u003cspan style=\"color:#06b6ef\"\u003eTerraform\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehas\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecompared\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyour\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ereal\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003einfrastructure\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eagainst\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eyour\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003econfiguration\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eand\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003efound\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eno\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edifferences\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eso\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eno\u003c/span\u003e\n\u003cspan style=\"color:#06b6ef\"\u003echanges\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eare\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eneeded\u003c/span\u003e.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"planすると注意される# planすると、以下のように注意されます。 terraform plan ╷ │ Error: Backend initialization required, please run \"terraform init\" │ │ Reason: Initial configuration of the requested backend \"s3\" │ │ The \"backend\" is the interface that Terraform uses to store state, │ perform operations, etc. If this message is showing up, it means that the │ Terraform configuration you're using is using a custom configuration for │ the Terraform backend. │ │ Changes to backend configurations require reinitialization. This allows │ Terraform to set up the new configuration, copy existing state, etc. Please run │ \"terraform init\" with either the \"-reconfigure\" or \"-migrate-state\" flags to │ use the current configuration. │ │ If the change reason above is incorrect, please verify your configuration │ hasn't changed and try again. At this point, no changes to your existing │ configuration or state have been made. init# なので、initします。 terraform init Initializing the backend... Successfully configured the backend \"s3\"! Terraform will automatically use this backend unless the backend configuration changes. Initializing modules... - cloudtrail in modules/cloudtrail - config_ap-northeast-1 in modules/config - guardduty-eu-north-1 in modules/guardduty - notification in modules/notification Initializing provider plugins... - Finding hashicorp/aws versions matching \"~\u003e 5.6.0\"... - Installing hashicorp/aws v5.6.2... - Installed hashicorp/aws v5.6.2 (signed by HashiCorp) Terraform has created a lock file .terraform.lock.hcl to record the provider selections it made above. Include this file in your version control repository so that Terraform can guarantee to make the same selections by default when you run \"terraform init\" in the future. Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. plan# 差分が出ないかをplanで確認します。No changes. Your infrastructure matches the configuration.差分が無いと確認できます。 terraform plan data.aws_iam_policy.config: Reading... module.cloudtrail.data.aws_caller_identity.current: Reading... ---途中省略--- No changes. Your infrastructure matches the configuration. Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed. 微信 支付宝","scraped_at":"2025-07-12T21:19:14.42181714+09:00","word_count":355,"content_hash":"fab453a31a26c361bb496127c23cb2b8"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/terraform-update-150-to-162/","title":"terraformのバージョンを上げた","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003cp\u003eterraformがバージョンアップして、testを正式にサポートしたということでアップデートしたくなりました。\u003c/p\u003e\n\u003cp\u003eということで、アップデートの手順を以下にまとめます。\u003c/p\u003e\n\u003cp\u003e手順は書いてますが、aptでupdateしているので、そんなに難しくはないです。\u003c/p\u003e\n\u003ch2 id=\"update前のバージョン確認\"\u003eupdate前のバージョン確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#update前のバージョン確認\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e今のバージョンは1.5.0\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eterraform version\nTerraform v1.5.0\non linux_amd64\n+ provider registry.terraform.io/hashicorp/aws v4.67.0\n\nYour version of Terraform is out of date! The latest version\nis 1.6.2. You can update by downloading from https://www.terraform.io/downloads.html\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"apt-get-update\"\u003eapt-get update\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#apt-get-update\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eupdateします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eapt-get update\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"terraformのupdate\"\u003eterraformのupdate\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#terraformのupdate\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e続いて、terraformをアップデートします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt update terraform\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"バージョン確認\"\u003eバージョン確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#バージョン確認\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eアップデートしたバージョンを確認します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eterraform version\nTerraform v1.6.2\non linux_amd64\n+ provider registry.terraform.io/hashicorp/aws v4.67.0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"terraformがバージョンアップして、testを正式にサポートしたということでアップデートしたくなりました。 ということで、アップデートの手順を以下にまとめます。 手順は書いてますが、aptでupdateしているので、そんなに難しくはないです。 update前のバージョン確認# 今のバージョンは1.5.0 terraform version Terraform v1.5.0 on linux_amd64 + provider registry.terraform.io/hashicorp/aws v4.67.0 Your version of Terraform is out of date! The latest version is 1.6.2. You can update by downloading from https://www.terraform.io/downloads.html apt-get update# updateします。 apt-get update terraformのupdate# 続いて、terraformをアップデートします。 sudo apt update terraform バージョン確認# アップデートしたバージョンを確認します。 terraform version Terraform v1.6.2 on linux_amd64 + provider registry.terraform.io/hashicorp/aws v4.67.0 微信 支付宝","scraped_at":"2025-07-12T21:19:14.976656907+09:00","word_count":60,"content_hash":"d9b411e280f85e366468d60347cd2a6c"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/test-cloud-watch-alarm/","title":"CLoudWatchAlarmをテストする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCloudWatchAlarmのテストをしたくなるときがあります。\u003c/p\u003e\n\u003cp\u003e擬似的に障害や障害っぽい状態にして、本当に通知されるかを確認したいです。\u003c/p\u003e\n\u003cp\u003eそのやり方を残します。\u003c/p\u003e\n\u003ch2 id=\"やったこと\"\u003eやったこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やったこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eまずは、AWS CLIでCloudWatchAlarmsの一覧を出力します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws cloudwatch describe-alarms | jq -r \u003cspan style=\"color:#48b685\"\u003e\u0026#39;.MetricAlarms[] | [.AlarmName] | @csv\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e次に、以下のようなコマンドを作って1つずつ投入します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003eaws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-EC2Healthy\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-RDS-cpu_utilization_too_high\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-RDS-disk_queue_depth_too_high\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-RDS-free_storage_space_too_low\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-RDS-freeable_memory_too_low\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-RDS-healthy\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-alb-healthyhosts-mars_g_a\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-alb-healthyhosts-mars_g_c\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-alb-high5XXCount\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-alb-tg-mars_g_a-high5XXCount\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;prod-alb-tg-mars_g_c-high5XXCount\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eもういっちょ。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003eaws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-EC2Healthy\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-RDS-cpu_utilization_too_high\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-RDS-disk_queue_depth_too_high\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-RDS-free_storage_space_too_low\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-RDS-freeable_memory_too_low\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-RDS-healthy\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-alb-healthyhosts-mars_g_a\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-alb-healthyhosts-mars_g_c\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-alb-high5XXCount\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-alb-tg-mars_g_a-high5XXCount\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\naws cloudwatch set-alarm-state --alarm-name \u0026#34;stag-alb-tg-mars_g_c-high5XXCount\u0026#34; --state-value ALARM --state-reason \u0026#34;test\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"気になったこと\"\u003e気になったこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#気になったこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e通知されるメッセージのタイムゾーンがUTCなのが、気になります。\u003c/p\u003e\n\u003cp\u003eJSTにならないかな。。。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# CloudWatchAlarmのテストをしたくなるときがあります。 擬似的に障害や障害っぽい状態にして、本当に通知されるかを確認したいです。 そのやり方を残します。 やったこと# まずは、AWS CLIでCloudWatchAlarmsの一覧を出力します。 aws cloudwatch describe-alarms | jq -r '.MetricAlarms[] | [.AlarmName] | @csv' 次に、以下のようなコマンドを作って1つずつ投入します。 aws cloudwatch set-alarm-state --alarm-name \"prod-EC2Healthy\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"prod-RDS-cpu_utilization_too_high\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"prod-RDS-disk_queue_depth_too_high\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"prod-RDS-free_storage_space_too_low\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"prod-RDS-freeable_memory_too_low\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"prod-RDS-healthy\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"prod-alb-healthyhosts-mars_g_a\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"prod-alb-healthyhosts-mars_g_c\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"prod-alb-high5XXCount\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"prod-alb-tg-mars_g_a-high5XXCount\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"prod-alb-tg-mars_g_c-high5XXCount\" --state-value ALARM --state-reason \"test\" もういっちょ。 aws cloudwatch set-alarm-state --alarm-name \"stag-EC2Healthy\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"stag-RDS-cpu_utilization_too_high\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"stag-RDS-disk_queue_depth_too_high\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"stag-RDS-free_storage_space_too_low\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"stag-RDS-freeable_memory_too_low\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"stag-RDS-healthy\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"stag-alb-healthyhosts-mars_g_a\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"stag-alb-healthyhosts-mars_g_c\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"stag-alb-high5XXCount\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"stag-alb-tg-mars_g_a-high5XXCount\" --state-value ALARM --state-reason \"test\" aws cloudwatch set-alarm-state --alarm-name \"stag-alb-tg-mars_g_c-high5XXCount\" --state-value ALARM --state-reason \"test\" 気になったこと# 通知されるメッセージのタイムゾーンがUTCなのが、気になります。 JSTにならないかな。。。 微信 支付宝","scraped_at":"2025-07-12T21:19:16.90784341+09:00","word_count":223,"content_hash":"239bd4d825025ece981a67d2c3dd9fba"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/git-rebase/","title":"gitのコミットをrebaseでまとめた記録","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u0026lt;未来の自分へ！　この手順は間違いを書いているので、この手順通りやると間違えるぞ!\u0026gt;\u003c/p\u003e\n\u003cp\u003eシステムの構築が一段落したので、ちゃんと変更管理をしようと考えました。\u003c/p\u003e\n\u003cp\u003eいままでは、途中の状態を保存するため、細かくコミットしており、意味のないコミットが積み重なっていました。\u003c/p\u003e\n\u003cp\u003eそこで、積み重ねた意味のないコミットをまとめたいということで、やってみました。\u003c/p\u003e\n\u003cp\u003eただ、色々と失敗したので、それも含めて記録します。\u003c/p\u003e\n\u003ch2 id=\"やったこと\"\u003eやったこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やったこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"状態確認\"\u003e状態確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#状態確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e現状の確認。\u003ccode\u003egit log --oneline\u003c/code\u003eでこれまでのコミットを確認します。WIP（WorkInProgress）のコミットが多いです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit log --oneline\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main, origin/main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e add .tfvars\n\u003cspan style=\"color:#f99b15\"\u003e4053270\u003c/span\u003e change acm\n4116ce5 WIP\nb16c53a WIP\ne053901 add\n0cb94c0 WIP\n502e3c2 WIP\n720e046 terraform fmt\nc493b2a WIP\n80740af WIP\ne483178 WIP\n4110d64 WIP\naac01ea WIP\nb4eb7df WIP\n\u003cspan style=\"color:#f99b15\"\u003e1609422\u003c/span\u003e meeting agenda\n\u003cspan style=\"color:#f99b15\"\u003e4538053\u003c/span\u003e e-mail用のVPCエンドポイント追加\ndffa447 IPアドレスの制限追加\n13937d9 補足説明追加\nfd988b2 リファクタリング”\ndc5c551 WIP\n054806d WIP\nc79e2bd WIP\n15bb453 WIP\na8c17ce WIP\nce8ec53 WIP\n8bb2839 WIP\nbf2762d WIP\nd91cb2f WIP\nea4432d add\n3c5f1c6 WIP\n9561e31 アカウント共通であるセキュリティ関連を追加\n070b6e3 WIP IAMの重複リソース回避\n\u003cspan style=\"color:#f99b15\"\u003e1778509\u003c/span\u003e 一通り動かすようにした。IAMを再確認\nfd54eae WIP\nf68ad9b WIP\n977269e WIP\n539698b add terraform files\n5ba90c1 WIP add terraform env\n6ec9946 WIP\n3b29eea WIP\n52be819 WIP\na1a66cc WIP\n50e435e WIP\n6a899a8 項目立てと記述したい内容を埋めた。次は図を作って入れ込む\n708e164 first commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"失敗\"\u003e失敗\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#失敗\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e全部squashしてしまい、first commitの時点に戻ってしまいました。\u003c/p\u003e\n\u003cp\u003eそれに気づかず、さらにcommitするという失態をおかしました。\u003c/p\u003e\n\u003ch3 id=\"失敗のリカバリ-コミットを無かったことにする\"\u003e失敗のリカバリ　 コミットを無かったことにする\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#失敗のリカバリ-コミットを無かったことにする\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eいったんコミットをもとに戻します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit reset --soft HEAD^\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eで、確認します。そうすると、以下の状態です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit reflog\n708e164 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e0\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: reset: moving to HEAD^\n6757ec6 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e1\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 構築時点\n708e164 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e2\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout 708e164\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eorigin/main, main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e3\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add .tfvars\n\u003cspan style=\"color:#f99b15\"\u003e4053270\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e4\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: change acm\n4116ce5 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e5\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nb16c53a HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e6\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\ne053901 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e7\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add\n0cb94c0 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e8\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n502e3c2 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e9\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n720e046 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e10\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: terraform fmt\nc493b2a HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e11\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n80740af HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e12\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\ne483178 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e13\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n4110d64 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e14\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\naac01ea HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e15\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nb4eb7df HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e16\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n\u003cspan style=\"color:#f99b15\"\u003e1609422\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e17\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: meeting agenda\n\u003cspan style=\"color:#f99b15\"\u003e4538053\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e18\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: e-mail用のVPCエンドポイント追加\ndffa447 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e19\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: IPアドレスの制限追加\n13937d9 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e20\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 補足説明追加\nfd988b2 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e21\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: リファクタリング”\ndc5c551 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e22\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n054806d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e23\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nc79e2bd HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e24\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n15bb453 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e25\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\na8c17ce HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e26\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nce8ec53 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e27\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n8bb2839 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e28\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nbf2762d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e29\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nd91cb2f HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e30\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nea4432d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e31\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add\n3c5f1c6 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e32\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n9561e31 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e33\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: アカウント共通であるセキュリティ関連を追加\n070b6e3 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e34\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP IAMの重複リソース回避\n\u003cspan style=\"color:#f99b15\"\u003e1778509\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e35\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 一通り動かすようにした。IAMを再確認\nfd54eae HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e36\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nf68ad9b HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e37\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n977269e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e38\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n539698b HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e39\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add terraform files\n5ba90c1 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e40\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP add terraform env\n6ec9946 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e41\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n3b29eea HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e42\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n52be819 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e43\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\na1a66cc HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e44\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n50e435e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e45\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n6a899a8 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e46\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 項目立てと記述したい内容を埋めた。次は図を作って入れ込む\n708e164 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e47\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: Branch: renamed refs/heads/master to refs/heads/main\n708e164 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e49\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003einitial\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: first commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"失敗のリカバリ-rebase前の状態に戻したい\"\u003e失敗のリカバリ rebase前の状態に戻したい\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#失敗のリカバリ-rebase前の状態に戻したい\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003erebase前の\u003ccode\u003e905c97d (origin/main, main) HEAD@{3}: commit: add .tfvars\u003c/code\u003eに戻したいです。\u003c/p\u003e\n\u003cp\u003eで、以下のコマンドを実施。HEAD@の数字がポイントです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit reset --hard HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e3\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eそうすると、以下のようになる。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit reflog\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD, origin/main, main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e0\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: reset: moving to HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e3\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e1\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: reset: moving to HEAD^\n6757ec6 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e2\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 構築時点\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e3\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout 708e164\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD, origin/main, main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e4\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add .tfvars\n\u003cspan style=\"color:#f99b15\"\u003e4053270\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e5\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: change acm\n4116ce5 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e6\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nb16c53a HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e7\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\ne053901 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e8\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add\n0cb94c0 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e9\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n502e3c2 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e10\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n720e046 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e11\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: terraform fmt\nc493b2a HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e12\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n80740af HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e13\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\ne483178 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e14\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n4110d64 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e15\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\naac01ea HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e16\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nb4eb7df HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e17\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n\u003cspan style=\"color:#f99b15\"\u003e1609422\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e18\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: meeting agenda\n\u003cspan style=\"color:#f99b15\"\u003e4538053\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e19\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: e-mail用のVPCエンドポイント追加\ndffa447 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e20\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: IPアドレスの制限追加\n13937d9 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e21\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 補足説明追加\nfd988b2 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e22\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: リファクタリング”\ndc5c551 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e23\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n054806d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e24\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nc79e2bd HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e25\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n15bb453 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e26\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\na8c17ce HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e27\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nce8ec53 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e28\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n8bb2839 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e29\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nbf2762d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e30\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nd91cb2f HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e31\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nea4432d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e32\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add\n3c5f1c6 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e33\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n9561e31 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e34\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: アカウント共通であるセキュリティ関連を追加\n070b6e3 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e35\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP IAMの重複リソース回避\n\u003cspan style=\"color:#f99b15\"\u003e1778509\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e36\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 一通り動かすようにした。IAMを再確認\nfd54eae HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e37\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nf68ad9b HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e38\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n977269e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e39\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n539698b HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e40\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add terraform files\n5ba90c1 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e41\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP add terraform env\n6ec9946 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e42\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n3b29eea HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e43\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n52be819 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e44\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\na1a66cc HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e45\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n50e435e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e46\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n6a899a8 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e47\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 項目立てと記述したい内容を埋めた。次は図を作って入れ込む\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e48\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: Branch: renamed refs/heads/master to refs/heads/main\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e50\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003einitial\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: first commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"rebaseをやろうとすると怒られるからアボートした\"\u003erebaseをやろうとすると怒られるから、アボートした\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#rebaseをやろうとすると怒られるからアボートした\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eもう1回やろうとすると、怒られます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit rebase -i 708e164\nfatal: It seems that there is already a rebase-merge directory, and\nI wonder \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e you are in the middle of another rebase.  If that is the\n\u003cspan style=\"color:#815ba4\"\u003ecase\u003c/span\u003e, please try\n\tgit rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e--continue | --abort | --skip\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\nIf that is not the \u003cspan style=\"color:#815ba4\"\u003ecase\u003c/span\u003e, please\n\trm -fr \u003cspan style=\"color:#48b685\"\u003e\u0026#34;.git/rebase-merge\u0026#34;\u003c/span\u003e\nand run me again.  I am stopping in \u003cspan style=\"color:#815ba4\"\u003ecase\u003c/span\u003e you still have something\nvaluable there.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eアボートすると、元に戻ります。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit rebase --abort\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"複数回同じことをやってしまった\"\u003e複数回同じことをやってしまった\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#複数回同じことをやってしまった\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e何かを間違えていると思って、色々とやってみました。\u003c/p\u003e\n\u003cp\u003eやっぱり、わからない。同じことを何回もやっていたら、もう訳がわからなくなりました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit reflog\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main, origin/main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e0\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efinish\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: returning to refs/heads/main\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main, origin/main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e1\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout \u003cspan style=\"color:#f99b15\"\u003e4053270\u003c/span\u003e\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main, origin/main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e2\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: reset: moving to HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e9\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main, origin/main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e3\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eabort\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: updating HEAD\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e4\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout 708e164\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main, origin/main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e5\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eabort\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: updating HEAD\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e6\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout 708e164\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main, origin/main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e7\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eabort\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: updating HEAD\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main, origin/main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e8\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: reset: moving to HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e3\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e9\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: reset: moving to HEAD^\n6757ec6 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e10\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 構築時点\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e11\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout 708e164\n905c97d \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main, origin/main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e12\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add .tfvars\n\u003cspan style=\"color:#f99b15\"\u003e4053270\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e13\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: change acm\n4116ce5 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e14\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nb16c53a HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e15\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\ne053901 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e16\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add\n0cb94c0 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e17\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n502e3c2 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e18\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n720e046 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e19\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: terraform fmt\nc493b2a HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e20\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n80740af HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e21\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\ne483178 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e22\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n4110d64 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e23\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\naac01ea HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e24\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nb4eb7df HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e25\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n\u003cspan style=\"color:#f99b15\"\u003e1609422\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e26\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: meeting agenda\n\u003cspan style=\"color:#f99b15\"\u003e4538053\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e27\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: e-mail用のVPCエンドポイント追加\ndffa447 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e28\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: IPアドレスの制限追加\n13937d9 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e29\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 補足説明追加\nfd988b2 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e30\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: リファクタリング”\ndc5c551 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e31\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n054806d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e32\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nc79e2bd HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e33\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n15bb453 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e34\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\na8c17ce HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e35\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nce8ec53 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e36\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n8bb2839 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e37\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nbf2762d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e38\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nd91cb2f HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e39\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nea4432d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e40\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add\n3c5f1c6 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e41\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n9561e31 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e42\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: アカウント共通であるセキュリティ関連を追加\n070b6e3 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e43\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP IAMの重複リソース回避\n\u003cspan style=\"color:#f99b15\"\u003e1778509\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e44\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 一通り動かすようにした。IAMを再確認\nfd54eae HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e45\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\nf68ad9b HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e46\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n977269e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e47\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n539698b HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e48\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add terraform files\n5ba90c1 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e49\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP add terraform env\n6ec9946 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e50\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n3b29eea HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e51\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n52be819 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e52\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\na1a66cc HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e53\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n50e435e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e54\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: WIP\n6a899a8 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e55\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 項目立てと記述したい内容を埋めた。次は図を作って入れ込む\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e56\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: Branch: renamed refs/heads/master to refs/heads/main\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e58\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003einitial\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: first commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"冷静になって調べる\"\u003e冷静になって調べる\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#冷静になって調べる\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eここで以下の記事を参考にしました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zenn.dev/ikuraikura/articles/12efefc5d69ad15c2eb1\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eコミットをまとめる方法（git rebase -i）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e一番新しいのにまとめるというよりは、古いのに新しいのをまとめるという考えでした。\u003c/p\u003e\n\u003cp\u003eまた、省略形を使えるので、\u003ccode\u003ef\u003c/code\u003eを使用しました。\u003c/p\u003e\n\u003cp\u003e以下は、\u003ccode\u003egit rebase\u003c/code\u003eの編集画面です。一番上だけ\u003ccode\u003epick\u003c/code\u003eであとは\u003ccode\u003ef\u003c/code\u003eにしています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epick 6a899a8 項目立てと記述したい内容を埋めた。次は図を作って入れ込む\nf 50e435e WIP\nf a1a66cc WIP\nf 52be819 WIP\nf 3b29eea WIP\nf 6ec9946 WIP\nf 5ba90c1 WIP add terraform env\nf 539698b add terraform files\nf 977269e WIP\nf f68ad9b WIP\nf fd54eae WIP\nf \u003cspan style=\"color:#f99b15\"\u003e1778509\u003c/span\u003e 一通り動かすようにした。IAMを再確認\nf 070b6e3 WIP IAMの重複リソース回避\nf 9561e31 アカウント共通であるセキュリティ関連を追加\nf 3c5f1c6 WIP\nf ea4432d add\nf d91cb2f WIP\nf bf2762d WIP\nf 8bb2839 WIP\nf ce8ec53 WIP\nf a8c17ce WIP\nf 15bb453 WIP\nf c79e2bd WIP\nf 054806d WIP\nf dc5c551 WIP\nf fd988b2 リファクタリング”\nf 13937d9 補足説明追加\nf dffa447 IPアドレスの制限追加\nf \u003cspan style=\"color:#f99b15\"\u003e4538053\u003c/span\u003e e-mail用のVPCエンドポイント追加\nf \u003cspan style=\"color:#f99b15\"\u003e1609422\u003c/span\u003e meeting agenda\nf b4eb7df WIP\nf aac01ea WIP\nf 4110d64 WIP\nf e483178 WIP\nf 80740af WIP\nf c493b2a WIP\nf 720e046 terraform fmt\nf 502e3c2 WIP\nf 0cb94c0 WIP\nf e053901 add\nf b16c53a WIP\nf 4116ce5 WIP\nf \u003cspan style=\"color:#f99b15\"\u003e4053270\u003c/span\u003e change acm\nf 905c97d add .tfvars\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e確認してみます。ちゃんと2行にまとまってます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit log --oneline\nb857af2 \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e 項目立てと記述したい内容を埋めた。次は図を作って入れ込む\n708e164 first commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"コミットメッセージの変更\"\u003eコミットメッセージの変更\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#コミットメッセージの変更\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下でコミットメッセージを変更します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit commit --amend -m \u003cspan style=\"color:#48b685\"\u003e\u0026#34;構築完了でコミットまとめ\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下でコミットメッセージが変更されたか確認します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit log --oneline\n086250f \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e 構築完了でコミットまとめ\n708e164 first commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"リモートにpush\"\u003eリモートにPUSH\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#リモートにpush\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下でPUSHします。ポイントは\u003ccode\u003e-f\u003c/code\u003eの強制PUSHです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit push -f origin main\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eリモートにPUSHした状態の\u003ccode\u003egit reflog\u003c/code\u003eは以下です。commitをまとめたり、commitメッセージを変更したりといった履歴がちゃんと残ってますね。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit reflog\n086250f \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eHEAD -\u0026gt; main, origin/main\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e0\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eamend\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: 構築完了でコミットまとめ\nb857af2 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e1\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efinish\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: returning to refs/heads/main\nb857af2 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e2\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout 708e164\nb857af2 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e3\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efinish\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: returning to refs/heads/main\nb857af2 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e4\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: 項目立てと記述したい内容を埋めた。次は図を作って入れ込む\n2399dbf HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e5\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 43 commits.\u003c/span\u003e\ncbdcb2c HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e6\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 42 commits.\u003c/span\u003e\n1cb423e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e7\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 41 commits.\u003c/span\u003e\ncdfdb62 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e8\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 40 commits.\u003c/span\u003e\naa63b32 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e9\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 39 commits.\u003c/span\u003e\n1269ef5 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e10\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 38 commits.\u003c/span\u003e\nfe49b19 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e11\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 37 commits.\u003c/span\u003e\n6ae43de HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e12\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 36 commits.\u003c/span\u003e\nefeca3e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e13\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 35 commits.\u003c/span\u003e\n08c61cb HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e14\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 34 commits.\u003c/span\u003e\n87c0c31 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e15\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 33 commits.\u003c/span\u003e\n82018a4 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e16\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 32 commits.\u003c/span\u003e\n01f9f3d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e17\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 31 commits.\u003c/span\u003e\nff4a93a HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e18\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 30 commits.\u003c/span\u003e\n\u003cspan style=\"color:#f99b15\"\u003e7502315\u003c/span\u003e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e19\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 29 commits.\u003c/span\u003e\n2875c09 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e20\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 28 commits.\u003c/span\u003e\n7898c51 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e21\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 27 commits.\u003c/span\u003e\n3512a2e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e22\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 26 commits.\u003c/span\u003e\n023685f HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e23\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 25 commits.\u003c/span\u003e\na941e89 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e24\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 24 commits.\u003c/span\u003e\n10ae638 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e25\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 23 commits.\u003c/span\u003e\n47b6632 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e26\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 22 commits.\u003c/span\u003e\nc4c3462 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e27\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 21 commits.\u003c/span\u003e\nfe3c891 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e28\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 20 commits.\u003c/span\u003e\nafdb41b HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e29\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 19 commits.\u003c/span\u003e\n3f1dc43 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e30\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 18 commits.\u003c/span\u003e\n9508cce HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e31\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 17 commits.\u003c/span\u003e\n2bb7d1a HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e32\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 16 commits.\u003c/span\u003e\n9b51adf HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e33\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 15 commits.\u003c/span\u003e\n390e2ca HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e34\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 14 commits.\u003c/span\u003e\nfcafc3e HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e35\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 13 commits.\u003c/span\u003e\nc9ba07d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e36\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 12 commits.\u003c/span\u003e\n3a77909 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e37\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 11 commits.\u003c/span\u003e\n45ad35b HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e38\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 10 commits.\u003c/span\u003e\n3def769 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e39\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 9 commits.\u003c/span\u003e\n46a22f6 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e40\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 8 commits.\u003c/span\u003e\n05f8d1c HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e41\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 7 commits.\u003c/span\u003e\n8aea3b4 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e42\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 6 commits.\u003c/span\u003e\nbe3ba08 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e43\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 5 commits.\u003c/span\u003e\nffc9c70 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e44\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 4 commits.\u003c/span\u003e\n4086be0 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e45\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 3 commits.\u003c/span\u003e\n92a0455 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e46\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efixup\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#776e71\"\u003e# This is a combination of 2 commits.\u003c/span\u003e\n6a899a8 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e47\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout 708e164\n905c97d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e48\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003efinish\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: returning to refs/heads/main\n905c97d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e49\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout \u003cspan style=\"color:#f99b15\"\u003e4053270\u003c/span\u003e\n905c97d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e50\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: reset: moving to HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e9\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e\n905c97d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e51\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eabort\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: updating HEAD\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e52\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout 708e164\n905c97d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e53\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eabort\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: updating HEAD\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e54\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout 708e164\n905c97d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e55\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eabort\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: updating HEAD\n905c97d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e56\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: reset: moving to HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e3\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e57\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: reset: moving to HEAD^\n6757ec6 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e58\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: 構築時点\n708e164 HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e59\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: rebase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003estart\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: checkout 708e164\n905c97d HEAD@\u003cspan style=\"color:#5bc4bf\"\u003e{\u003c/span\u003e60\u003cspan style=\"color:#5bc4bf\"\u003e}\u003c/span\u003e: commit: add .tfvars\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# \u003c未来の自分へ！　この手順は間違いを書いているので、この手順通りやると間違えるぞ!\u003e システムの構築が一段落したので、ちゃんと変更管理をしようと考えました。 いままでは、途中の状態を保存するため、細かくコミットしており、意味のないコミットが積み重なっていました。 そこで、積み重ねた意味のないコミットをまとめたいということで、やってみました。 ただ、色々と失敗したので、それも含めて記録します。 やったこと# 状態確認# 現状の確認。git log --onelineでこれまでのコミットを確認します。WIP（WorkInProgress）のコミットが多いです。 git log --oneline 905c97d (HEAD -\u003e main, origin/main) add .tfvars 4053270 change acm 4116ce5 WIP b16c53a WIP e053901 add 0cb94c0 WIP 502e3c2 WIP 720e046 terraform fmt c493b2a WIP 80740af WIP e483178 WIP 4110d64 WIP aac01ea WIP b4eb7df WIP 1609422 meeting agenda 4538053 e-mail用のVPCエンドポイント追加 dffa447 IPアドレスの制限追加 13937d9 補足説明追加 fd988b2 リファクタリング” dc5c551 WIP 054806d WIP c79e2bd WIP 15bb453 WIP a8c17ce WIP ce8ec53 WIP 8bb2839 WIP bf2762d WIP d91cb2f WIP ea4432d add 3c5f1c6 WIP 9561e31 アカウント共通であるセキュリティ関連を追加 070b6e3 WIP IAMの重複リソース回避 1778509 一通り動かすようにした。IAMを再確認 fd54eae WIP f68ad9b WIP 977269e WIP 539698b add terraform files 5ba90c1 WIP add terraform env 6ec9946 WIP 3b29eea WIP 52be819 WIP a1a66cc WIP 50e435e WIP 6a899a8 項目立てと記述したい内容を埋めた。次は図を作って入れ込む 708e164 first commit 失敗# 全部squashしてしまい、first commitの時点に戻ってしまいました。 それに気づかず、さらにcommitするという失態をおかしました。 失敗のリカバリ　 コミットを無かったことにする# いったんコミットをもとに戻します。 git reset --soft HEAD^ で、確認します。そうすると、以下の状態です。 git reflog 708e164 (HEAD) HEAD@{0}: reset: moving to HEAD^ 6757ec6 HEAD@{1}: commit: 構築時点 708e164 (HEAD) HEAD@{2}: rebase (start): checkout 708e164 905c97d (origin/main, main) HEAD@{3}: commit: add .tfvars 4053270 HEAD@{4}: commit: change acm 4116ce5 HEAD@{5}: commit: WIP b16c53a HEAD@{6}: commit: WIP e053901 HEAD@{7}: commit: add 0cb94c0 HEAD@{8}: commit: WIP 502e3c2 HEAD@{9}: commit: WIP 720e046 HEAD@{10}: commit: terraform fmt c493b2a HEAD@{11}: commit: WIP 80740af HEAD@{12}: commit: WIP e483178 HEAD@{13}: commit: WIP 4110d64 HEAD@{14}: commit: WIP aac01ea HEAD@{15}: commit: WIP b4eb7df HEAD@{16}: commit: WIP 1609422 HEAD@{17}: commit: meeting agenda 4538053 HEAD@{18}: commit: e-mail用のVPCエンドポイント追加 dffa447 HEAD@{19}: commit: IPアドレスの制限追加 13937d9 HEAD@{20}: commit: 補足説明追加 fd988b2 HEAD@{21}: commit: リファクタリング” dc5c551 HEAD@{22}: commit: WIP 054806d HEAD@{23}: commit: WIP c79e2bd HEAD@{24}: commit: WIP 15bb453 HEAD@{25}: commit: WIP a8c17ce HEAD@{26}: commit: WIP ce8ec53 HEAD@{27}: commit: WIP 8bb2839 HEAD@{28}: commit: WIP bf2762d HEAD@{29}: commit: WIP d91cb2f HEAD@{30}: commit: WIP ea4432d HEAD@{31}: commit: add 3c5f1c6 HEAD@{32}: commit: WIP 9561e31 HEAD@{33}: commit: アカウント共通であるセキュリティ関連を追加 070b6e3 HEAD@{34}: commit: WIP IAMの重複リソース回避 1778509 HEAD@{35}: commit: 一通り動かすようにした。IAMを再確認 fd54eae HEAD@{36}: commit: WIP f68ad9b HEAD@{37}: commit: WIP 977269e HEAD@{38}: commit: WIP 539698b HEAD@{39}: commit: add terraform files 5ba90c1 HEAD@{40}: commit: WIP add terraform env 6ec9946 HEAD@{41}: commit: WIP 3b29eea HEAD@{42}: commit: WIP 52be819 HEAD@{43}: commit: WIP a1a66cc HEAD@{44}: commit: WIP 50e435e HEAD@{45}: commit: WIP 6a899a8 HEAD@{46}: commit: 項目立てと記述したい内容を埋めた。次は図を作って入れ込む 708e164 (HEAD) HEAD@{47}: Branch: renamed refs/heads/master to refs/heads/main 708e164 (HEAD) HEAD@{49}: commit (initial): first commit 失敗のリカバリ rebase前の状態に戻したい# rebase前の905c97d (origin/main, main) HEAD@{3}: commit: add .tfvarsに戻したいです。 で、以下のコマンドを実施。HEAD@の数字がポイントです。 git reset --hard HEAD@{3} そうすると、以下のようになる。 git reflog 905c97d (HEAD, origin/main, main) HEAD@{0}: reset: moving to HEAD@{3} 708e164 HEAD@{1}: reset: moving to HEAD^ 6757ec6 HEAD@{2}: commit: 構築時点 708e164 HEAD@{3}: rebase (start): checkout 708e164 905c97d (HEAD, origin/main, main) HEAD@{4}: commit: add .tfvars 4053270 HEAD@{5}: commit: change acm 4116ce5 HEAD@{6}: commit: WIP b16c53a HEAD@{7}: commit: WIP e053901 HEAD@{8}: commit: add 0cb94c0 HEAD@{9}: commit: WIP 502e3c2 HEAD@{10}: commit: WIP 720e046 HEAD@{11}: commit: terraform fmt c493b2a HEAD@{12}: commit: WIP 80740af HEAD@{13}: commit: WIP e483178 HEAD@{14}: commit: WIP 4110d64 HEAD@{15}: commit: WIP aac01ea HEAD@{16}: commit: WIP b4eb7df HEAD@{17}: commit: WIP 1609422 HEAD@{18}: commit: meeting agenda 4538053 HEAD@{19}: commit: e-mail用のVPCエンドポイント追加 dffa447 HEAD@{20}: commit: IPアドレスの制限追加 13937d9 HEAD@{21}: commit: 補足説明追加 fd988b2 HEAD@{22}: commit: リファクタリング” dc5c551 HEAD@{23}: commit: WIP 054806d HEAD@{24}: commit: WIP c79e2bd HEAD@{25}: commit: WIP 15bb453 HEAD@{26}: commit: WIP a8c17ce HEAD@{27}: commit: WIP ce8ec53 HEAD@{28}: commit: WIP 8bb2839 HEAD@{29}: commit: WIP bf2762d HEAD@{30}: commit: WIP d91cb2f HEAD@{31}: commit: WIP ea4432d HEAD@{32}: commit: add 3c5f1c6 HEAD@{33}: commit: WIP 9561e31 HEAD@{34}: commit: アカウント共通であるセキュリティ関連を追加 070b6e3 HEAD@{35}: commit: WIP IAMの重複リソース回避 1778509 HEAD@{36}: commit: 一通り動かすようにした。IAMを再確認 fd54eae HEAD@{37}: commit: WIP f68ad9b HEAD@{38}: commit: WIP 977269e HEAD@{39}: commit: WIP 539698b HEAD@{40}: commit: add terraform files 5ba90c1 HEAD@{41}: commit: WIP add terraform env 6ec9946 HEAD@{42}: commit: WIP 3b29eea HEAD@{43}: commit: WIP 52be819 HEAD@{44}: commit: WIP a1a66cc HEAD@{45}: commit: WIP 50e435e HEAD@{46}: commit: WIP 6a899a8 HEAD@{47}: commit: 項目立てと記述したい内容を埋めた。次は図を作って入れ込む 708e164 HEAD@{48}: Branch: renamed refs/heads/master to refs/heads/main 708e164 HEAD@{50}: commit (initial): first commit rebaseをやろうとすると怒られるから、アボートした# もう1回やろうとすると、怒られます。 git rebase -i 708e164 fatal: It seems that there is already a rebase-merge directory, and I wonder if you are in the middle of another rebase. If that is the case, please try git rebase (--continue | --abort | --skip) If that is not the case, please rm -fr \".git/rebase-merge\" and run me again. I am stopping in case you still have something valuable there. アボートすると、元に戻ります。 git rebase --abort 複数回同じことをやってしまった# 何かを間違えていると思って、色々とやってみました。 やっぱり、わからない。同じことを何回もやっていたら、もう訳がわからなくなりました。 git reflog 905c97d (HEAD -\u003e main, origin/main) HEAD@{0}: rebase (finish): returning to refs/heads/main 905c97d (HEAD -\u003e main, origin/main) HEAD@{1}: rebase (start): checkout 4053270 905c97d (HEAD -\u003e main, origin/main) HEAD@{2}: reset: moving to HEAD@{9} 905c97d (HEAD -\u003e main, origin/main) HEAD@{3}: rebase (abort): updating HEAD 708e164 HEAD@{4}: rebase (start): checkout 708e164 905c97d (HEAD -\u003e main, origin/main) HEAD@{5}: rebase (abort): updating HEAD 708e164 HEAD@{6}: rebase (start): checkout 708e164 905c97d (HEAD -\u003e main, origin/main) HEAD@{7}: rebase (abort): updating HEAD 905c97d (HEAD -\u003e main, origin/main) HEAD@{8}: reset: moving to HEAD@{3} 708e164 HEAD@{9}: reset: moving to HEAD^ 6757ec6 HEAD@{10}: commit: 構築時点 708e164 HEAD@{11}: rebase (start): checkout 708e164 905c97d (HEAD -\u003e main, origin/main) HEAD@{12}: commit: add .tfvars 4053270 HEAD@{13}: commit: change acm 4116ce5 HEAD@{14}: commit: WIP b16c53a HEAD@{15}: commit: WIP e053901 HEAD@{16}: commit: add 0cb94c0 HEAD@{17}: commit: WIP 502e3c2 HEAD@{18}: commit: WIP 720e046 HEAD@{19}: commit: terraform fmt c493b2a HEAD@{20}: commit: WIP 80740af HEAD@{21}: commit: WIP e483178 HEAD@{22}: commit: WIP 4110d64 HEAD@{23}: commit: WIP aac01ea HEAD@{24}: commit: WIP b4eb7df HEAD@{25}: commit: WIP 1609422 HEAD@{26}: commit: meeting agenda 4538053 HEAD@{27}: commit: e-mail用のVPCエンドポイント追加 dffa447 HEAD@{28}: commit: IPアドレスの制限追加 13937d9 HEAD@{29}: commit: 補足説明追加 fd988b2 HEAD@{30}: commit: リファクタリング” dc5c551 HEAD@{31}: commit: WIP 054806d HEAD@{32}: commit: WIP c79e2bd HEAD@{33}: commit: WIP 15bb453 HEAD@{34}: commit: WIP a8c17ce HEAD@{35}: commit: WIP ce8ec53 HEAD@{36}: commit: WIP 8bb2839 HEAD@{37}: commit: WIP bf2762d HEAD@{38}: commit: WIP d91cb2f HEAD@{39}: commit: WIP ea4432d HEAD@{40}: commit: add 3c5f1c6 HEAD@{41}: commit: WIP 9561e31 HEAD@{42}: commit: アカウント共通であるセキュリティ関連を追加 070b6e3 HEAD@{43}: commit: WIP IAMの重複リソース回避 1778509 HEAD@{44}: commit: 一通り動かすようにした。IAMを再確認 fd54eae HEAD@{45}: commit: WIP f68ad9b HEAD@{46}: commit: WIP 977269e HEAD@{47}: commit: WIP 539698b HEAD@{48}: commit: add terraform files 5ba90c1 HEAD@{49}: commit: WIP add terraform env 6ec9946 HEAD@{50}: commit: WIP 3b29eea HEAD@{51}: commit: WIP 52be819 HEAD@{52}: commit: WIP a1a66cc HEAD@{53}: commit: WIP 50e435e HEAD@{54}: commit: WIP 6a899a8 HEAD@{55}: commit: 項目立てと記述したい内容を埋めた。次は図を作って入れ込む 708e164 HEAD@{56}: Branch: renamed refs/heads/master to refs/heads/main 708e164 HEAD@{58}: commit (initial): first commit 冷静になって調べる# ここで以下の記事を参考にしました。 コミットをまとめる方法（git rebase -i） 一番新しいのにまとめるというよりは、古いのに新しいのをまとめるという考えでした。 また、省略形を使えるので、fを使用しました。 以下は、git rebaseの編集画面です。一番上だけpickであとはfにしています。 pick 6a899a8 項目立てと記述したい内容を埋めた。次は図を作って入れ込む f 50e435e WIP f a1a66cc WIP f 52be819 WIP f 3b29eea WIP f 6ec9946 WIP f 5ba90c1 WIP add terraform env f 539698b add terraform files f 977269e WIP f f68ad9b WIP f fd54eae WIP f 1778509 一通り動かすようにした。IAMを再確認 f 070b6e3 WIP IAMの重複リソース回避 f 9561e31 アカウント共通であるセキュリティ関連を追加 f 3c5f1c6 WIP f ea4432d add f d91cb2f WIP f bf2762d WIP f 8bb2839 WIP f ce8ec53 WIP f a8c17ce WIP f 15bb453 WIP f c79e2bd WIP f 054806d WIP f dc5c551 WIP f fd988b2 リファクタリング” f 13937d9 補足説明追加 f dffa447 IPアドレスの制限追加 f 4538053 e-mail用のVPCエンドポイント追加 f 1609422 meeting agenda f b4eb7df WIP f aac01ea WIP f 4110d64 WIP f e483178 WIP f 80740af WIP f c493b2a WIP f 720e046 terraform fmt f 502e3c2 WIP f 0cb94c0 WIP f e053901 add f b16c53a WIP f 4116ce5 WIP f 4053270 change acm f 905c97d add .tfvars 確認してみます。ちゃんと2行にまとまってます。 git log --oneline b857af2 (HEAD -\u003e main) 項目立てと記述したい内容を埋めた。次は図を作って入れ込む 708e164 first commit コミットメッセージの変更# 以下でコミットメッセージを変更します。 git commit --amend -m \"構築完了でコミットまとめ\" 以下でコミットメッセージが変更されたか確認します。 git log --oneline 086250f (HEAD -\u003e main) 構築完了でコミットまとめ 708e164 first commit リモートにPUSH# 以下でPUSHします。ポイントは-fの強制PUSHです。 git push -f origin main 参考# リモートにPUSHした状態のgit reflogは以下です。commitをまとめたり、commitメッセージを変更したりといった履歴がちゃんと残ってますね。 git reflog 086250f (HEAD -\u003e main, origin/main) HEAD@{0}: commit (amend): 構築完了でコミットまとめ b857af2 HEAD@{1}: rebase (finish): returning to refs/heads/main b857af2 HEAD@{2}: rebase (start): checkout 708e164 b857af2 HEAD@{3}: rebase (finish): returning to refs/heads/main b857af2 HEAD@{4}: rebase (fixup): 項目立てと記述したい内容を埋めた。次は図を作って入れ込む 2399dbf HEAD@{5}: rebase (fixup): # This is a combination of 43 commits. cbdcb2c HEAD@{6}: rebase (fixup): # This is a combination of 42 commits. 1cb423e HEAD@{7}: rebase (fixup): # This is a combination of 41 commits. cdfdb62 HEAD@{8}: rebase (fixup): # This is a combination of 40 commits. aa63b32 HEAD@{9}: rebase (fixup): # This is a combination of 39 commits. 1269ef5 HEAD@{10}: rebase (fixup): # This is a combination of 38 commits. fe49b19 HEAD@{11}: rebase (fixup): # This is a combination of 37 commits. 6ae43de HEAD@{12}: rebase (fixup): # This is a combination of 36 commits. efeca3e HEAD@{13}: rebase (fixup): # This is a combination of 35 commits. 08c61cb HEAD@{14}: rebase (fixup): # This is a combination of 34 commits. 87c0c31 HEAD@{15}: rebase (fixup): # This is a combination of 33 commits. 82018a4 HEAD@{16}: rebase (fixup): # This is a combination of 32 commits. 01f9f3d HEAD@{17}: rebase (fixup): # This is a combination of 31 commits. ff4a93a HEAD@{18}: rebase (fixup): # This is a combination of 30 commits. 7502315 HEAD@{19}: rebase (fixup): # This is a combination of 29 commits. 2875c09 HEAD@{20}: rebase (fixup): # This is a combination of 28 commits. 7898c51 HEAD@{21}: rebase (fixup): # This is a combination of 27 commits. 3512a2e HEAD@{22}: rebase (fixup): # This is a combination of 26 commits. 023685f HEAD@{23}: rebase (fixup): # This is a combination of 25 commits. a941e89 HEAD@{24}: rebase (fixup): # This is a combination of 24 commits. 10ae638 HEAD@{25}: rebase (fixup): # This is a combination of 23 commits. 47b6632 HEAD@{26}: rebase (fixup): # This is a combination of 22 commits. c4c3462 HEAD@{27}: rebase (fixup): # This is a combination of 21 commits. fe3c891 HEAD@{28}: rebase (fixup): # This is a combination of 20 commits. afdb41b HEAD@{29}: rebase (fixup): # This is a combination of 19 commits. 3f1dc43 HEAD@{30}: rebase (fixup): # This is a combination of 18 commits. 9508cce HEAD@{31}: rebase (fixup): # This is a combination of 17 commits. 2bb7d1a HEAD@{32}: rebase (fixup): # This is a combination of 16 commits. 9b51adf HEAD@{33}: rebase (fixup): # This is a combination of 15 commits. 390e2ca HEAD@{34}: rebase (fixup): # This is a combination of 14 commits. fcafc3e HEAD@{35}: rebase (fixup): # This is a combination of 13 commits. c9ba07d HEAD@{36}: rebase (fixup): # This is a combination of 12 commits. 3a77909 HEAD@{37}: rebase (fixup): # This is a combination of 11 commits. 45ad35b HEAD@{38}: rebase (fixup): # This is a combination of 10 commits. 3def769 HEAD@{39}: rebase (fixup): # This is a combination of 9 commits. 46a22f6 HEAD@{40}: rebase (fixup): # This is a combination of 8 commits. 05f8d1c HEAD@{41}: rebase (fixup): # This is a combination of 7 commits. 8aea3b4 HEAD@{42}: rebase (fixup): # This is a combination of 6 commits. be3ba08 HEAD@{43}: rebase (fixup): # This is a combination of 5 commits. ffc9c70 HEAD@{44}: rebase (fixup): # This is a combination of 4 commits. 4086be0 HEAD@{45}: rebase (fixup): # This is a combination of 3 commits. 92a0455 HEAD@{46}: rebase (fixup): # This is a combination of 2 commits. 6a899a8 HEAD@{47}: rebase (start): checkout 708e164 905c97d HEAD@{48}: rebase (finish): returning to refs/heads/main 905c97d HEAD@{49}: rebase (start): checkout 4053270 905c97d HEAD@{50}: reset: moving to HEAD@{9} 905c97d HEAD@{51}: rebase (abort): updating HEAD 708e164 HEAD@{52}: rebase (start): checkout 708e164 905c97d HEAD@{53}: rebase (abort): updating HEAD 708e164 HEAD@{54}: rebase (start): checkout 708e164 905c97d HEAD@{55}: rebase (abort): updating HEAD 905c97d HEAD@{56}: reset: moving to HEAD@{3} 708e164 HEAD@{57}: reset: moving to HEAD^ 6757ec6 HEAD@{58}: commit: 構築時点 708e164 HEAD@{59}: rebase (start): checkout 708e164 905c97d HEAD@{60}: commit: add .tfvars 微信 支付宝","scraped_at":"2025-07-12T21:19:18.802175091+09:00","word_count":1793,"content_hash":"81ce843e52415ed9e0289fee4e0991bb"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/unique-moule-apply/","title":"terraformで特定のmoduleだけapplyする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eterraformのボリュームが大きくなると、少しの変更を待っている時間が長くなります。\u003c/p\u003e\n\u003cp\u003eリファクタリングしていて、変更ないようにちょこちょこコードを直している時なんかは、この時間がとても長く感じます。\u003c/p\u003e\n\u003cp\u003eそこで、モジュールを指定して更新するようにしました。\u003c/p\u003e\n\u003ch2 id=\"やったこと\"\u003eやったこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やったこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eたとえば、ec2モジュールを対象にします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eterraform plan --target\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003emodule.ec2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のようにwarningは出力されます。不安ですけど、なんとかなります。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ePlan: \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e to add, \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e to change, \u003cspan style=\"color:#f99b15\"\u003e5\u003c/span\u003e to destroy.\n╷\n│ Warning: Resource targeting is in effect\n│ \n│ You are creating a plan with the -target option, which means that the result of this plan may not represent all of\n│ the changes requested by the current configuration.\n│ \n│ The -target option is not \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e routine use, and is provided only \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e exceptional situations such as recovering from\n│ errors or mistakes, or when Terraform specifically suggests to use it as part of an error message.\n╵\n\nDo you really want to destroy all resources?\n  Terraform will destroy all your managed infrastructure, as shown above.\n  There is no undo. Only \u003cspan style=\"color:#48b685\"\u003e\u0026#39;yes\u0026#39;\u003c/span\u003e will be accepted to confirm.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# terraformのボリュームが大きくなると、少しの変更を待っている時間が長くなります。 リファクタリングしていて、変更ないようにちょこちょこコードを直している時なんかは、この時間がとても長く感じます。 そこで、モジュールを指定して更新するようにしました。 やったこと# たとえば、ec2モジュールを対象にします。 terraform plan --target=module.ec2 以下のようにwarningは出力されます。不安ですけど、なんとかなります。 Plan: 0 to add, 0 to change, 5 to destroy. ╷ │ Warning: Resource targeting is in effect │ │ You are creating a plan with the -target option, which means that the result of this plan may not represent all of │ the changes requested by the current configuration. │ │ The -target option is not for routine use, and is provided only for exceptional situations such as recovering from │ errors or mistakes, or when Terraform specifically suggests to use it as part of an error message. ╵ Do you really want to destroy all resources? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only 'yes' will be accepted to confirm. 微信 支付宝","scraped_at":"2025-07-12T21:19:19.197995741+09:00","word_count":131,"content_hash":"4693894ad328991a8ec0c9616246723f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/rm-xargs/","title":"再帰的に検索したファイルを削除する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003cp\u003e例：*.webpのファイルを削除する。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003efind ./ -type f | grep .webp | xargs rm -fv\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"例：*.webpのファイルを削除する。 find ./ -type f | grep .webp | xargs rm -fv 微信 支付宝","scraped_at":"2025-07-12T21:19:21.497088648+09:00","word_count":14,"content_hash":"55dbcc29462d4fa68ed68a5b61ac5852"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/page-bundle-eye-catch/","title":"HugoのPageBundleでアイキャッチを表示する方法","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"はじめに\"\u003eはじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ehugoはpage bundlという仕組みがあります。imageディレクトリに置くことなく、同一ディレクトリに画像ファイルをおいて参照できるのです。\u003c/p\u003e\n\u003cp\u003ehugoのpage bundleの画像をアイキャッチで表示させる方法を調べました。\u003c/p\u003e\n\u003ch2 id=\"やり方\"\u003eやり方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やり方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のページにありました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/gethugothemes/hugo-modules/tree/master/images#image-implementation\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003ehugo-modules/images at master · gethugothemes/hugo-modules\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e以下のように記述すればOKです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e{{ \u003cspan style=\"color:#06b6ef\"\u003epartial\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;image.html\u0026#34;\u003c/span\u003e (\u003cspan style=\"color:#06b6ef\"\u003edict\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Src\u0026#34;\u003c/span\u003e .\u003cspan style=\"color:#06b6ef\"\u003eParams\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eimage\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Context\u0026#34;\u003c/span\u003e .\u003cspan style=\"color:#06b6ef\"\u003ePage\u003c/span\u003e ) }}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"はじめに# hugoはpage bundlという仕組みがあります。imageディレクトリに置くことなく、同一ディレクトリに画像ファイルをおいて参照できるのです。 hugoのpage bundleの画像をアイキャッチで表示させる方法を調べました。 やり方# 以下のページにありました。 hugo-modules/images at master · gethugothemes/hugo-modules 以下のように記述すればOKです。 {{ partial \"image.html\" (dict \"Src\" .Params.image \"Context\" .Page ) }} 微信 支付宝","scraped_at":"2025-07-12T21:19:22.205385526+09:00","word_count":25,"content_hash":"94396353ab94cb73954a59534d06df79"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/ec2-arm-ami/","title":"EC2でarmアーキテクチャのAMIを使用する。terraformで。","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"はじめに\"\u003eはじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAmazon EventBridge Schedulerで意図したEC2を落とすことができるかが心配になりました。\u003c/p\u003e\n\u003cp\u003e本番環境で動いているEC2を間違って落としてしまうのは嫌なので。\u003c/p\u003e\n\u003cp\u003eということで、落とし上げをするためだけのEC2を構築することにしました。とはいうものの、試験するだけなので、安いEC2を使いたいです。探したら、t4g.nanoがありました。\u003c/p\u003e\n\u003cp\u003e使い回しのterraformを使うと、「アーキテクチャが違うよ！」とエラーメッセージが出たので、動いたterraformを書きます。\u003c/p\u003e\n\u003ch2 id=\"terraform\"\u003eterraform\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#terraform\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAmazon Linux 2023を使用します。dataで最新のarmのAMIを取得します。\u003c/p\u003e\n\u003cp\u003evaluesの箇所で\u003ccode\u003earm64\u003c/code\u003eを指定するのがポイントです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#776e71\"\u003e# Amazon Linux 2023 の最新版AMIを取得\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_ami\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;amzlinux2\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003emost_recent\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eowners\u003c/span\u003e      = [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;amazon\u0026#34;\u003c/span\u003e]\n  \u003cspan style=\"color:#06b6ef\"\u003efilter\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e   = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003evalues\u003c/span\u003e = [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;al2023-ami-2023*-arm64\u0026#34;\u003c/span\u003e]\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e続いて、以下のように書きます。amiは上で取得したAMIのIDをセットします。\u003c/p\u003e\n\u003cp\u003einstance_typeに\u0026#34;t4g.nano\u0026#34;というt4シリーズのarmアーキテクチャのインスタンスを指定している箇所です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#776e71\"\u003e# EC2作成（スケジュールでの起動・停止対象）\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_instance\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;schedule-ec2\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003eami\u003c/span\u003e                         = data.\u003cspan style=\"color:#06b6ef\"\u003eaws_ami\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eamzlinux2\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003einstance_type\u003c/span\u003e               = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;t4g.nano\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eavailability_zone\u003c/span\u003e           = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ap-northeast-1a\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003esubnet_id\u003c/span\u003e                   = \u003cspan style=\"color:#06b6ef\"\u003eaws_subnet\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eprivate\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003esubnet\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e-1\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003ea\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eassociate_public_ip_address\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003etags\u003c/span\u003e = {\n    \u003cspan style=\"color:#06b6ef\"\u003eName\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;yamada-poc-ec2\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eStop\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Night\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eStop\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;Weekend\u0026#34;\u003c/span\u003e\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"はじめに# Amazon EventBridge Schedulerで意図したEC2を落とすことができるかが心配になりました。 本番環境で動いているEC2を間違って落としてしまうのは嫌なので。 ということで、落とし上げをするためだけのEC2を構築することにしました。とはいうものの、試験するだけなので、安いEC2を使いたいです。探したら、t4g.nanoがありました。 使い回しのterraformを使うと、「アーキテクチャが違うよ！」とエラーメッセージが出たので、動いたterraformを書きます。 terraform# Amazon Linux 2023を使用します。dataで最新のarmのAMIを取得します。 valuesの箇所でarm64を指定するのがポイントです。 # Amazon Linux 2023 の最新版AMIを取得 data \"aws_ami\" \"amzlinux2\" { most_recent = true owners = [\"amazon\"] filter { name = \"name\" values = [\"al2023-ami-2023*-arm64\"] } } 続いて、以下のように書きます。amiは上で取得したAMIのIDをセットします。 instance_typeに\"t4g.nano\"というt4シリーズのarmアーキテクチャのインスタンスを指定している箇所です。 # EC2作成（スケジュールでの起動・停止対象） resource \"aws_instance\" \"schedule-ec2\" { ami = data.aws_ami.amzlinux2.id instance_type = \"t4g.nano\" availability_zone = \"ap-northeast-1a\" subnet_id = aws_subnet.private-subnet-1a.id associate_public_ip_address = false tags = { Name = \"yamada-poc-ec2\" Stop = \"Night\" Stop = \"Weekend\" } } 微信 支付宝","scraped_at":"2025-07-12T21:19:24.072070191+09:00","word_count":76,"content_hash":"f40a1de4b2969a42497520cb0d6b0b5f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/terraform-eventbridge-schedule/","title":"terraformでEventBridge Scheduleしてみた","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"はじめに\"\u003eはじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAWSの利用料金を減らすため、使用していない夜間帯にEC2やRDSを落としたいです。\u003c/p\u003e\n\u003cp\u003eググるとLambdaを使うやり方が多いです。が、Lambdaを管理したくないので、異なる方法で実現しようと考えました。\u003c/p\u003e\n\u003ch2 id=\"やり方\"\u003eやり方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やり方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAmazon EventBridge Schedulerを使用します。2022年12月10日アナウンスのあった、比較的新しいサービスです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://aws.amazon.com/jp/about-aws/whats-new/2022/11/amazon-eventbridge-launches-new-scheduler/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eAmazon EventBridge で新しいスケジューラーの提供を開始\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"リポジトリ\"\u003eリポジトリ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#リポジトリ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のリポジトリで実装しました。といっても、ほぼコピペですが。。。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yamadatt/terraform-aws-instance-scheduler\"\u003ehttps://github.com/yamadatt/terraform-aws-instance-scheduler\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"気になったこと\"\u003e気になったこと\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#気になったこと\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eできれば、スケジュール化したイベントをSNSを経由してslackに通知したいです。\u003c/p\u003e\n\u003cp\u003eが、まだそこまでは対応してないようです。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"はじめに# AWSの利用料金を減らすため、使用していない夜間帯にEC2やRDSを落としたいです。 ググるとLambdaを使うやり方が多いです。が、Lambdaを管理したくないので、異なる方法で実現しようと考えました。 やり方# Amazon EventBridge Schedulerを使用します。2022年12月10日アナウンスのあった、比較的新しいサービスです。 Amazon EventBridge で新しいスケジューラーの提供を開始 リポジトリ# 以下のリポジトリで実装しました。といっても、ほぼコピペですが。。。 https://github.com/yamadatt/terraform-aws-instance-scheduler 気になったこと# できれば、スケジュール化したイベントをSNSを経由してslackに通知したいです。 が、まだそこまでは対応してないようです。 微信 支付宝","scraped_at":"2025-07-12T21:19:24.505230432+09:00","word_count":18,"content_hash":"7954bd82fb3ccb8e249f544393eefacf"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/golang-version-up/","title":"Ubuntu22.04でgolangを最新バージョンにする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"はじめに\"\u003eはじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eUbuntu22.04で使用しているgolangのバージョンが1.18でした。\u003c/p\u003e\n\u003cp\u003e最新が1.21なので、バージョンアップしたくなりました。とはいうものの、パッケージの上では最新に見えるので、バイナリを自分でインストールするのかなと気が重くなりました。が、調べたら良い方法がありました。\u003c/p\u003e\n\u003ch2 id=\"バージョンアップ方法\"\u003eバージョンアップ方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#バージョンアップ方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ePPAを使用します。PPAはPersonal Package Archiveの略とのこと。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo add-apt-repository ppa:longsleep/golang-backports\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eパッケージをアップデートします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt update\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e続いて。新しいgolangをインストールします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt install golang-go\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eバージョンを確認すると、ちゃんとバージョンがあがってます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ego version\ngo version go1.21.1 linux/amd64\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"はじめに# Ubuntu22.04で使用しているgolangのバージョンが1.18でした。 最新が1.21なので、バージョンアップしたくなりました。とはいうものの、パッケージの上では最新に見えるので、バイナリを自分でインストールするのかなと気が重くなりました。が、調べたら良い方法がありました。 バージョンアップ方法# PPAを使用します。PPAはPersonal Package Archiveの略とのこと。 sudo add-apt-repository ppa:longsleep/golang-backports パッケージをアップデートします。 sudo apt update 続いて。新しいgolangをインストールします。 sudo apt install golang-go バージョンを確認すると、ちゃんとバージョンがあがってます。 go version go version go1.21.1 linux/amd64 微信 支付宝","scraped_at":"2025-07-12T21:19:28.200982909+09:00","word_count":28,"content_hash":"0f1b082a4c739a9c7b2cde5e52ee15fb"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/sakura-cloud-terraform/","title":"さくらのクラウドでterrformを使用してみた","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"はじめに\"\u003eはじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://cloud.sakura.ad.jp/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eさくらのクラウド\u003c/a\u003eを使用したシステム構築の依頼がありました。\u003c/p\u003e\n\u003cp\u003eロードバランサー、webサーバー、DBサーバーといったコンポーネントで、DBサーバはインターネットに公開しないというようなよくある構成です。\u003c/p\u003e\n\u003cp\u003e馴染みがなかったので、AWSでいうところのコントロールパネルを使用して作っていました。が、試行錯誤するにはIaCでやりたいなと思って調べたら、terraformが対応しているじゃないですか。\u003c/p\u003e\n\u003cp\u003eということで、terraformを使って作ってみました。この記事では個人的に躓いた箇所を中心に書きます。\u003c/p\u003e\n\u003ch2 id=\"参考にした記事など\"\u003e参考にした記事など\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考にした記事など\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e公式のドキュメントです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.usacloud.jp/terraform/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eTerraform for さくらのクラウド(v2)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eユーザーコミュニティのドキュメントです。具体例がコードで掲載されているので、高頻度で参照しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/sacloud/docs.usacloud.jp\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003esacloud/docs.usacloud.jp: Documents for sacloud OSS products\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e手始めに写経するのにもってこいです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://knowledge.sakura.ad.jp/31560/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eさくらのクラウドでTerraformを使ってみる | さくらのナレッジ\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"terraformのポイント\"\u003eterraformのポイント\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#terraformのポイント\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"provider\"\u003eprovider\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#provider\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下のように、バージョンは2.22.0を使用しました。高頻度でバージョンがあがっているようなので、公式ドキュメントを参照して最新のを使用した方が良いと思います。\u003c/p\u003e\n\u003cp\u003e私は古いバージョンを使用していまして、OSにUbuntu22.04を使用したかったのに定義されてないと怒られて、バージョンを新しくする必要があることに気が付きました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#06b6ef\"\u003eterraform\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003erequired_providers\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003esakuracloud\u003c/span\u003e = {\n      \u003cspan style=\"color:#06b6ef\"\u003esource\u003c/span\u003e  = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;sacloud/sakuracloud\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#06b6ef\"\u003eversion\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;2.22.0\u0026#34;\u003c/span\u003e\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"サーバのnic\"\u003eサーバのNIC\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#サーバのnic\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eここはつまづきました。\u003c/p\u003e\n\u003cp\u003ewebサーバーに3つのNICを用意するのですが、記述した順番にeth0、eth1、eth2とNICが作られます。\u003c/p\u003e\n\u003cp\u003eそして、インターネットに接続するNICは一番上に記述する必要があります。\u003c/p\u003e\n\u003cp\u003eさらに\u003ccode\u003euser_ip_address\u003c/code\u003eは構成図に表示されるIPアドレスです。ここで設定したIPアドレスがNICに割り当てられると思ってましたが、そうではないので注意が必要です。（ドキュメントには表示されるIPアドレスということは書いてあります。読めということですね。）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e \u003cspan style=\"color:#06b6ef\"\u003enetwork_interface\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003eupstream\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;shared\u0026#34;\u003c/span\u003e\n  }\n  \n  \u003cspan style=\"color:#06b6ef\"\u003enetwork_interface\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003eupstream\u003c/span\u003e        = \u003cspan style=\"color:#06b6ef\"\u003esakuracloud_switch\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003efpm_sw\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e \n    \u003cspan style=\"color:#06b6ef\"\u003euser_ip_address\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;192.168.99.1\u0026#34;\u003c/span\u003e \n  }\n\n  \u003cspan style=\"color:#06b6ef\"\u003enetwork_interface\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003eupstream\u003c/span\u003e        = \u003cspan style=\"color:#06b6ef\"\u003esakuracloud_switch\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003edb_sw\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e \n    \u003cspan style=\"color:#06b6ef\"\u003euser_ip_address\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;192.168.100.1\u0026#34;\u003c/span\u003e \n  }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"nicへのipアドレス割り当て\"\u003eNICへのIPアドレス割り当て\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#nicへのipアドレス割り当て\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eではどうするかというと、以下のようにサーバーの定義内で\u003ccode\u003enote\u003c/code\u003eを使用します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e   \u003cspan style=\"color:#06b6ef\"\u003enote\u003c/span\u003e {\n      \u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e = data.\u003cspan style=\"color:#06b6ef\"\u003esakuracloud_note\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eipaddress\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e\n      \u003cspan style=\"color:#06b6ef\"\u003evariables\u003c/span\u003e = {\n        \u003cspan style=\"color:#06b6ef\"\u003eaddresses\u003c/span\u003e = \u003cspan style=\"color:#5bc4bf\"\u003e\u0026lt;\u0026lt;EOT\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e192.168.99.1/24\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e192.168.100.1/24\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003eEOT\u003c/span\u003e\n      }\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e合わせて、スタートアップのスクリプトのための\u003ccode\u003esakuracloud_note\u003c/code\u003eを使用します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;sakuracloud_note\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ipaddress\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003efilter\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003enames\u003c/span\u003e = [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;IPアドレス設定スクリプト for Ubuntu\u0026#34;\u003c/span\u003e]\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"はじめに# さくらのクラウドを使用したシステム構築の依頼がありました。 ロードバランサー、webサーバー、DBサーバーといったコンポーネントで、DBサーバはインターネットに公開しないというようなよくある構成です。 馴染みがなかったので、AWSでいうところのコントロールパネルを使用して作っていました。が、試行錯誤するにはIaCでやりたいなと思って調べたら、terraformが対応しているじゃないですか。 ということで、terraformを使って作ってみました。この記事では個人的に躓いた箇所を中心に書きます。 参考にした記事など# 公式のドキュメントです。 Terraform for さくらのクラウド(v2) ユーザーコミュニティのドキュメントです。具体例がコードで掲載されているので、高頻度で参照しました。 sacloud/docs.usacloud.jp: Documents for sacloud OSS products 手始めに写経するのにもってこいです。 さくらのクラウドでTerraformを使ってみる | さくらのナレッジ terraformのポイント# provider# 以下のように、バージョンは2.22.0を使用しました。高頻度でバージョンがあがっているようなので、公式ドキュメントを参照して最新のを使用した方が良いと思います。 私は古いバージョンを使用していまして、OSにUbuntu22.04を使用したかったのに定義されてないと怒られて、バージョンを新しくする必要があることに気が付きました。 terraform { required_providers { sakuracloud = { source = \"sacloud/sakuracloud\" version = \"2.22.0\" } } } サーバのNIC# ここはつまづきました。 webサーバーに3つのNICを用意するのですが、記述した順番にeth0、eth1、eth2とNICが作られます。 そして、インターネットに接続するNICは一番上に記述する必要があります。 さらにuser_ip_addressは構成図に表示されるIPアドレスです。ここで設定したIPアドレスがNICに割り当てられると思ってましたが、そうではないので注意が必要です。（ドキュメントには表示されるIPアドレスということは書いてあります。読めということですね。） network_interface { upstream = \"shared\" } network_interface { upstream = sakuracloud_switch.fpm_sw.id user_ip_address = \"192.168.99.1\" } network_interface { upstream = sakuracloud_switch.db_sw.id user_ip_address = \"192.168.100.1\" } NICへのIPアドレス割り当て# ではどうするかというと、以下のようにサーバーの定義内でnoteを使用します。 note { id = data.sakuracloud_note.ipaddress.id variables = { addresses = \u003c\u003cEOT 192.168.99.1/24 192.168.100.1/24 EOT } } 合わせて、スタートアップのスクリプトのためのsakuracloud_noteを使用します。 data \"sakuracloud_note\" \"ipaddress\" { filter { names = [\"IPアドレス設定スクリプト for Ubuntu\"] } } 微信 支付宝","scraped_at":"2025-07-12T21:19:30.489891647+09:00","word_count":104,"content_hash":"a267a2711ee519ee711af8f9c8c5440a"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/tflint-docker/","title":"terraformにlintする。dockerで","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTerraformもlintしたいです。\u003c/p\u003e\n\u003cp\u003eということで、TFLintを使ってみます。\u003c/p\u003e\n\u003ch2 id=\"やってみる\"\u003eやってみる\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やってみる\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eインストールするのが面倒なので、docker版を使用します。\u003c/p\u003e\n\u003cp\u003e詳細は以下のGitHubにあります。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/terraform-linters/tflint\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eGitHub - terraform-linters/tflint: A Pluggable Terraform Linter\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e以下のコマンドで使用してみました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker run --rm -v \u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003epwd\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e:/data -t ghcr.io/terraform-linters/tflint-bundle --recursive --module\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eルートモジュールで解決しているterraformファイルだといいのかもしれませんが、サブモジュール化しているとうまくいきません。ひと手間かける必要があるようです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zenn.dev/jun2021/articles/8cfcad6ff64e87#--module-%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003etflint の仕様や使い方についてのメモ\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e実際に動かすとWarningやNoticeがたくさん出ます。254件出てます。\u003c/p\u003e\n\u003cp\u003eわかりやすいのは、\u003ccode\u003evarriable.tf\u003c/code\u003eは「r」が1つ多いから\u003ccode\u003evariable.tf\u003c/code\u003eにしてねとか。\u003c/p\u003e\n\u003cp\u003eローカルPCである程度手直しして、GitHubActionsで動かすのが良いです。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# Terraformもlintしたいです。 ということで、TFLintを使ってみます。 やってみる# インストールするのが面倒なので、docker版を使用します。 詳細は以下のGitHubにあります。 GitHub - terraform-linters/tflint: A Pluggable Terraform Linter 以下のコマンドで使用してみました。 docker run --rm -v $(pwd):/data -t ghcr.io/terraform-linters/tflint-bundle --recursive --module ルートモジュールで解決しているterraformファイルだといいのかもしれませんが、サブモジュール化しているとうまくいきません。ひと手間かける必要があるようです。 tflint の仕様や使い方についてのメモ 実際に動かすとWarningやNoticeがたくさん出ます。254件出てます。 わかりやすいのは、varriable.tfは「r」が1つ多いからvariable.tfにしてねとか。 ローカルPCである程度手直しして、GitHubActionsで動かすのが良いです。 微信 支付宝","scraped_at":"2025-07-12T21:19:31.631659149+09:00","word_count":31,"content_hash":"e8040872eefa23a39ad7a541539801f7"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/s3-endopoint-for-yum/","title":"プライベートサブネットのEC2からyumできない","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://yamada-tech-memo.netlify.app/posts/2023/eic-endpoint/\"\u003eこの記事\u003c/a\u003eで、プライベートサブネットのEC2に接続できました。\u003c/p\u003e\n\u003cp\u003e次にpostgresqlのパッケージをEC2にインストールしたいです。ですが、プライベートサブネットに配置したEC2はインターネットに出ることができません。インターネットに出れないので、yumが通りません。\u003c/p\u003e\n\u003cp\u003eプライベートサブネットにEC2を置くとセキュリティ的なメリットは享受できます。しかし、運用などにはそれなりの手間をかける必要があります。\u003c/p\u003e\n\u003ch2 id=\"s3のエンドポイントを用意する\"\u003eS3のエンドポイントを用意する\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#s3のエンドポイントを用意する\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eおなじみのterraformでの実装です。サブモジュールの結果を使用しているので、コピペでは動かないです。\u003c/p\u003e\n\u003cp\u003eまずは、これでエンドポイントを作ります。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_vpc_endpoint\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;s3_endpoint\u0026#34;\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003evpc_id\u003c/span\u003e          = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;module.vpc.vpc_id\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eservice_name\u003c/span\u003e    = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;com.amazonaws.ap-northeast-1.s3\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003epolicy\u003c/span\u003e = \u003cspan style=\"color:#5bc4bf\"\u003e\u0026lt;\u0026lt;POLICY\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e    {\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e        \u0026#34;Version\u0026#34;: \u0026#34;2008-10-17\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e        \u0026#34;Statement\u0026#34;: [\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e            {\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e                \u0026#34;Action\u0026#34;: \u0026#34;*\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e                \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e                \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;,\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e                \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e            }\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e        ]\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e    }\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e    \u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003ePOLICY\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eルートテーブルの関連付けです。関連付けるルートテーブルはサブネットに定義しているルートテーブルです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_vpc_endpoint_route_table_association\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;private_s3\u0026#34;\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003evpc_endpoint_id\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_vpc_endpoint.s3_endpoint.id\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eroute_table_id\u003c/span\u003e  = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_route_table.rds_1b.id\u0026#34;\u003c/span\u003e\n\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# この記事で、プライベートサブネットのEC2に接続できました。 次にpostgresqlのパッケージをEC2にインストールしたいです。ですが、プライベートサブネットに配置したEC2はインターネットに出ることができません。インターネットに出れないので、yumが通りません。 プライベートサブネットにEC2を置くとセキュリティ的なメリットは享受できます。しかし、運用などにはそれなりの手間をかける必要があります。 S3のエンドポイントを用意する# おなじみのterraformでの実装です。サブモジュールの結果を使用しているので、コピペでは動かないです。 まずは、これでエンドポイントを作ります。 resource \"aws_vpc_endpoint\" \"s3_endpoint\" { vpc_id = \"module.vpc.vpc_id\" service_name = \"com.amazonaws.ap-northeast-1.s3\" policy = \u003c\u003cPOLICY { \"Version\": \"2008-10-17\", \"Statement\": [ { \"Action\": \"*\", \"Effect\": \"Allow\", \"Resource\": \"*\", \"Principal\": \"*\" } ] } POLICY } ルートテーブルの関連付けです。関連付けるルートテーブルはサブネットに定義しているルートテーブルです。 resource \"aws_vpc_endpoint_route_table_association\" \"private_s3\" { vpc_endpoint_id = \"aws_vpc_endpoint.s3_endpoint.id\" route_table_id = \"aws_route_table.rds_1b.id\" } 微信 支付宝","scraped_at":"2025-07-12T21:19:34.123517444+09:00","word_count":53,"content_hash":"29ce3ee1ed51cf5caa938462f3d46cf3"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/eic-endpoint/","title":"EICエンドポイントを使用してプライベートサブネットのEC2に接続する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eプライベートサブネットのEC2にSSH接続したいことがあります。\u003c/p\u003e\n\u003cp\u003e今回のケースは、エクスポートしたDBデータをAWS上のRDSに移行したいというものでした。エクスポートのデータはpostgresqlのものでして、これを\u003ccode\u003epsql\u003c/code\u003eコマンドを使用してAWSに構築したRDSにインポートしたいのです。\u003c/p\u003e\n\u003cp\u003eしかし、RDSはプライベートサブネットに配置しています。インターネットから直接インポートはできません。\u003c/p\u003e\n\u003cp\u003eRDSの操作するためにEC2を立てるのは仕方ないにしても、パブリックIPをもたせる踏み台サーバを作るのは怖いです。また、SGで通信を制限するとしてもインターネットに公開されている踏み台サーバをメンテするのも気が滅入ります。\u003c/p\u003e\n\u003cp\u003e（ここで言っているプライベートサブネットはインターネットと直接通信できないサブネットのこと。）\u003c/p\u003e\n\u003ch2 id=\"どうやって実現するか\"\u003eどうやって実現するか\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#どうやって実現するか\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEICエンドポイントというのがあり、それを活用しました。\u003c/p\u003e\n\u003cp\u003eググったら以下に掲載されてました。2023年1月13日付の記事なので、新しい機能のようです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://aws.amazon.com/jp/about-aws/whats-new/2023/06/amazon-ec2-instance-connect-ssh-rdp-public-ip-address/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eAmazon EC2 Instance Connect でパブリック IP アドレスなしで SSH 接続と RDP 接続が可能に\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eterraformで動かしたいので、以下のようにしました。（そのままコピペしているので、terraformのサブモジュールで作ったリソース名になっている\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_ec2_instance_connect_endpoint\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;eic\u0026#34;\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003esubnet_id\u003c/span\u003e = module.\u003cspan style=\"color:#06b6ef\"\u003eprivate_subnet\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003esubnet_db_1b_id\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003esecurity_group_ids\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003eaws_security_group\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003essh_eic\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003epreserve_client_ip\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e \n\n    \u003cspan style=\"color:#06b6ef\"\u003etags\u003c/span\u003e = {\n        \u003cspan style=\"color:#06b6ef\"\u003eName\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;eic\u0026#34;\u003c/span\u003e\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEIC Endpointのセキュリティグループはこちら。22番を開ければsshが通ります。ingressのciderを狭めれば、ある程度のセキュリティは確保できそう。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_security_group\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ssh_eic\u0026#34;\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e        = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;eic-sg\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003edescription\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;EIC Security Group For Test\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003evpc_id\u003c/span\u003e            = module.\u003cspan style=\"color:#06b6ef\"\u003evpc\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003evpc_id\u003c/span\u003e\n\n    \u003cspan style=\"color:#06b6ef\"\u003eingress\u003c/span\u003e {\n        \u003cspan style=\"color:#06b6ef\"\u003efrom_port\u003c/span\u003e   = \u003cspan style=\"color:#f99b15\"\u003e22\u003c/span\u003e\n        \u003cspan style=\"color:#06b6ef\"\u003eto_port\u003c/span\u003e     = \u003cspan style=\"color:#f99b15\"\u003e22\u003c/span\u003e\n        \u003cspan style=\"color:#06b6ef\"\u003eprotocol\u003c/span\u003e    = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#06b6ef\"\u003ecidr_blocks\u003c/span\u003e = [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;0.0.0.0/0\u0026#34;\u003c/span\u003e]\n    }\n\n    \u003cspan style=\"color:#06b6ef\"\u003eegress\u003c/span\u003e {\n        \u003cspan style=\"color:#06b6ef\"\u003efrom_port\u003c/span\u003e   = \u003cspan style=\"color:#f99b15\"\u003e22\u003c/span\u003e\n        \u003cspan style=\"color:#06b6ef\"\u003eto_port\u003c/span\u003e     = \u003cspan style=\"color:#f99b15\"\u003e22\u003c/span\u003e\n        \u003cspan style=\"color:#06b6ef\"\u003eprotocol\u003c/span\u003e    = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#06b6ef\"\u003ecidr_blocks\u003c/span\u003e = [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;0.0.0.0/0\u0026#34;\u003c/span\u003e]\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEICエンドポイントを使用してログインするには、awsクライアントを使用します。\u003ccode\u003ei-xxxxxxxxxx\u003c/code\u003eは接続したいインスタンスIDです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws ec2-instance-connect ssh --instance-id i-xxxxxxxxxx --connection-type eice\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"使ってみて\"\u003e使ってみて\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#使ってみて\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e接続のコマンドを使ってみてわかったのは、SSHの鍵を使用しないということです。\u003c/p\u003e\n\u003cp\u003eSSH鍵の管理もしなくていいので、気が楽になります。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# プライベートサブネットのEC2にSSH接続したいことがあります。 今回のケースは、エクスポートしたDBデータをAWS上のRDSに移行したいというものでした。エクスポートのデータはpostgresqlのものでして、これをpsqlコマンドを使用してAWSに構築したRDSにインポートしたいのです。 しかし、RDSはプライベートサブネットに配置しています。インターネットから直接インポートはできません。 RDSの操作するためにEC2を立てるのは仕方ないにしても、パブリックIPをもたせる踏み台サーバを作るのは怖いです。また、SGで通信を制限するとしてもインターネットに公開されている踏み台サーバをメンテするのも気が滅入ります。 （ここで言っているプライベートサブネットはインターネットと直接通信できないサブネットのこと。） どうやって実現するか# EICエンドポイントというのがあり、それを活用しました。 ググったら以下に掲載されてました。2023年1月13日付の記事なので、新しい機能のようです。 Amazon EC2 Instance Connect でパブリック IP アドレスなしで SSH 接続と RDP 接続が可能に terraformで動かしたいので、以下のようにしました。（そのままコピペしているので、terraformのサブモジュールで作ったリソース名になっている resource \"aws_ec2_instance_connect_endpoint\" \"eic\" { subnet_id = module.private_subnet.subnet_db_1b_id security_group_ids = aws_security_group.ssh_eic.id preserve_client_ip = true tags = { Name = \"eic\" } } EIC Endpointのセキュリティグループはこちら。22番を開ければsshが通ります。ingressのciderを狭めれば、ある程度のセキュリティは確保できそう。 resource \"aws_security_group\" \"ssh_eic\" { name = \"eic-sg\" description = \"EIC Security Group For Test\" vpc_id = module.vpc.vpc_id ingress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } egress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [\"0.0.0.0/0\"] } } EICエンドポイントを使用してログインするには、awsクライアントを使用します。i-xxxxxxxxxxは接続したいインスタンスIDです。 aws ec2-instance-connect ssh --instance-id i-xxxxxxxxxx --connection-type eice 使ってみて# 接続のコマンドを使ってみてわかったのは、SSHの鍵を使用しないということです。 SSH鍵の管理もしなくていいので、気が楽になります。 微信 支付宝","scraped_at":"2025-07-12T21:19:35.30147849+09:00","word_count":105,"content_hash":"4fcb39ba5fdb20caf44c9e318336133f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/ecs-vpc-endpoint/","title":"ECSのVPCエンドポイント","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eインターネットと通信できないプライベートサブネットにECSを実装する場合、ECRからどうやってイメージを取得するかが課題になります。\u003c/p\u003e\n\u003cp\u003e案としては、NATGWを使用するというのがあります。が、NATGWは個人開発だと、高額なサービスです。dockerhubなどのインターネットで公開されているリポジトリから取得するなら仕方ないですが、通常はECRから取得したくなるのが人情です。\u003c/p\u003e\n\u003cp\u003eいろいろと検証してきて肌感覚でわかってきたのですが、S3もそうだし、ECRのようなVPCに関連しないサービスとの接続はエンドポイントを使うのが王道です。\u003c/p\u003e\n\u003cp\u003eということで、ECRをプライベートサブネットからアクセスするにはエンドポイントを作る必要があります。\u003c/p\u003e\n\u003ch2 id=\"どうやって実現するか\"\u003eどうやって実現するか\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#どうやって実現するか\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eと、あたかも自分が人類で初めて直面したように書いてますが、同じように悩んでいる人はいるのです。\u003c/p\u003e\n\u003cp\u003e以下の内容を参考にして、そのままコピペでOKです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://dev.classmethod.jp/articles/vpc-endpoints-for-ecs-2022/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eECSに必要なVPCエンドポイントまとめ（2022年版） | DevelopersIO\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eterraformの定義はこちらがわかりやすい。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zenn.dev/samuraikun/articles/0d22699a9878cd\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003e[Terraform] Fargate v1.4で必要なVPC endpoint設定\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# インターネットと通信できないプライベートサブネットにECSを実装する場合、ECRからどうやってイメージを取得するかが課題になります。 案としては、NATGWを使用するというのがあります。が、NATGWは個人開発だと、高額なサービスです。dockerhubなどのインターネットで公開されているリポジトリから取得するなら仕方ないですが、通常はECRから取得したくなるのが人情です。 いろいろと検証してきて肌感覚でわかってきたのですが、S3もそうだし、ECRのようなVPCに関連しないサービスとの接続はエンドポイントを使うのが王道です。 ということで、ECRをプライベートサブネットからアクセスするにはエンドポイントを作る必要があります。 どうやって実現するか# と、あたかも自分が人類で初めて直面したように書いてますが、同じように悩んでいる人はいるのです。 以下の内容を参考にして、そのままコピペでOKです。 ECSに必要なVPCエンドポイントまとめ（2022年版） | DevelopersIO terraformの定義はこちらがわかりやすい。 [Terraform] Fargate v1.4で必要なVPC endpoint設定 微信 支付宝","scraped_at":"2025-07-12T21:19:36.881608705+09:00","word_count":18,"content_hash":"b872995d0e0052a00819513a7894ab6a"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/terraform_body_is_deprecated/","title":"terraform：「body」は非推奨になりました。への対応。","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e久しぶりに動かしたterraformを動かしたら、以下のWarningが出力されました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e│ Warning: Deprecated attribute\n│ \n│   on security-group.tf line 21, in locals:\n│   21:   \u003cspan style=\"color:#ef6155\"\u003emyip\u003c/span\u003e         \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e chomp\u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003edata.http.ipify.body\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n│ \n│ The attribute \u003cspan style=\"color:#48b685\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e is deprecated. Refer to the provider documentation \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e details.\n│ \n│ \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eand one more similar warning elsewhere\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eそのまま訳すと「属性「body」は非推奨になりました。詳細については、プロバイダーのドキュメントを参照してください。」です。\u003c/p\u003e\n\u003ch2 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eドキュメントを見ろとあるので、以下を参照しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://registry.terraform.io/providers/hashicorp/http/latest/docs/data-sources/http\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003ehttp_http | Data Sources | hashicorp/http | Terraform Registry\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e以下の記述があります。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ebody (String, Deprecated) The response body returned as a string. NOTE: This is deprecated, use response_body instead.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eということで、\u003ccode\u003ebody\u003c/code\u003eではなく\u003ccode\u003eresponse_body\u003c/code\u003eを使うようにということなので、変更しました。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 久しぶりに動かしたterraformを動かしたら、以下のWarningが出力されました。 │ Warning: Deprecated attribute │ │ on security-group.tf line 21, in locals: │ 21: myip = chomp(data.http.ipify.body) │ │ The attribute \"body\" is deprecated. Refer to the provider documentation for details. │ │ (and one more similar warning elsewhere) そのまま訳すと「属性「body」は非推奨になりました。詳細については、プロバイダーのドキュメントを参照してください。」です。 対応# ドキュメントを見ろとあるので、以下を参照しました。 http_http | Data Sources | hashicorp/http | Terraform Registry 以下の記述があります。 body (String, Deprecated) The response body returned as a string. NOTE: This is deprecated, use response_body instead. ということで、bodyではなくresponse_bodyを使うようにということなので、変更しました。 微信 支付宝","scraped_at":"2025-07-12T21:19:37.592550636+09:00","word_count":74,"content_hash":"5a3651fee8372b378e3edcd107468a0f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/terraform_many_ec2/","title":"terraformでEC2を複数起動したい","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEC2を複数台使用したいという要件がありました。\u003c/p\u003e\n\u003cp\u003ewebサーバならオートスケールを組んだりするのですが、1台1台sshしたいとのこと。\u003c/p\u003e\n\u003ch2 id=\"どうするか\"\u003eどうするか？\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#どうするか\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e手っ取り早く\u003ccode\u003ecount\u003c/code\u003eを使用します。\u003c/p\u003e\n\u003cp\u003e下のコードは\u003ccode\u003ecount\u003c/code\u003eを\u003ccode\u003e2\u003c/code\u003eにして、2台のEC2を起動するようにしています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_instance\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;raido-rec\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003ecount\u003c/span\u003e = \u003cspan style=\"color:#f99b15\"\u003e2\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eami\u003c/span\u003e                     = data.\u003cspan style=\"color:#06b6ef\"\u003eaws_ssm_parameter\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eamzn2_latest_ami\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e # last parameter is the default value\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#06b6ef\"\u003einstance_type\u003c/span\u003e           = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;t3.nano\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003edisable_api_termination\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003emonitoring\u003c/span\u003e              = \u003cspan style=\"color:#815ba4\"\u003efalse\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003ekey_name\u003c/span\u003e                = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;radio\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003esubnet_id\u003c/span\u003e       = \u003cspan style=\"color:#06b6ef\"\u003eaws_subnet\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003epublic_subnet_1a\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003esecurity_groups\u003c/span\u003e = [\u003cspan style=\"color:#06b6ef\"\u003eaws_security_group\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eradio_sg\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e]\n  \u003cspan style=\"color:#06b6ef\"\u003etags\u003c/span\u003e = {\n    \u003cspan style=\"color:#06b6ef\"\u003eName\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003eformat(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;proxy%002d\u0026#34;\u003c/span\u003e, count.\u003cspan style=\"color:#06b6ef\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#f99b15\"\u003e1\u003c/span\u003e)\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"作成したec2のグローバルipアドレス表示する\"\u003e作成したEC2のグローバルIPアドレス表示する\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#作成したec2のグローバルipアドレス表示する\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEC2のIPアドレスを1つずつ調べるのは手間なので、terraformに以下を記述して表示させます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ec2_global_ips\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003evalue\u003c/span\u003e = [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eaws_instance\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eraido\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003erec\u003c/span\u003e.\u003cspan style=\"color:#5bc4bf\"\u003e*\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003epublic_ip\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のように出力される。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#06b6ef\"\u003eec2_global_ips\u003c/span\u003e = [\n  [\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;13.231.230.46\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#48b685\"\u003e\u0026#34;43.206.235.74\u0026#34;\u003c/span\u003e,\n  ],\n]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# EC2を複数台使用したいという要件がありました。 webサーバならオートスケールを組んだりするのですが、1台1台sshしたいとのこと。 どうするか？# 手っ取り早くcountを使用します。 下のコードはcountを2にして、2台のEC2を起動するようにしています。 resource \"aws_instance\" \"raido-rec\" { count = 2 ami = data.aws_ssm_parameter.amzn2_latest_ami.value # last parameter is the default value instance_type = \"t3.nano\" disable_api_termination = false monitoring = false key_name = \"radio\" subnet_id = aws_subnet.public_subnet_1a.id security_groups = [aws_security_group.radio_sg.id] tags = { Name = \"${format(\"proxy%002d\", count.index + 1)}\" } } 作成したEC2のグローバルIPアドレス表示する# EC2のIPアドレスを1つずつ調べるのは手間なので、terraformに以下を記述して表示させます。 output \"ec2_global_ips\" { value = [\"${aws_instance.raido-rec.*.public_ip}\"] } 以下のように出力される。 ec2_global_ips = [ [ \"13.231.230.46\", \"43.206.235.74\", ], ] 微信 支付宝","scraped_at":"2025-07-12T21:19:38.923175785+09:00","word_count":72,"content_hash":"6e798fecd9d570f770b6939caa2d9b25"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/terraform_provisioning/","title":"terraform後にプロビジョニングしたい","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eterraformでサーバを作って、その流れでプロビジョニングしたいことがります。\u003c/p\u003e\n\u003ch2 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eそんな時はこれ。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://dev.classmethod.jp/articles/how-to-provision-remote-servers-with-terraform-by-using-remote-exec/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003e【Terraform】remote-execを使ったリモートサーバーのプロビジョニング | DevelopersIO\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# terraformでサーバを作って、その流れでプロビジョニングしたいことがります。 対応# そんな時はこれ。 【Terraform】remote-execを使ったリモートサーバーのプロビジョニング | DevelopersIO 微信 支付宝","scraped_at":"2025-07-12T21:19:39.17047436+09:00","word_count":9,"content_hash":"b61c2e008339cc90edf08f2aba009416"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/terraform_sg/","title":"terraformでawsのセキュリティグループを複数適用する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eterraformのmoduleを使用して複数のセキュリティグループを作ろうとしたらハマったので、記録に残す。\u003c/p\u003e\n\u003ch2 id=\"やりたいことinboudのipアドレスを複数定義する\"\u003eやりたいこと：inboudのIPアドレスを複数定義する\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#やりたいことinboudのipアドレスを複数定義する\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003emoduleを使用した以下の構成。引数に複数のIPアドレスをモジュール\u003ccode\u003edb\u003c/code\u003eに渡す場合。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e    ├── ./README.md\n    ├── ./env\n    │   ├── ./env/prod\n    │   │   ├── ./env/prod/main.tf\n    │   │   └── ./env/prod/variables.tf\n    │   └── ./env/stag\n    │       ├── ./env/stag/main.tf\n    │       └── ./env/stag/variables.tf\n    └── ./modules\n        ├── ./modules/db\n        │   └── ./modules/db/database.tf\n        └── ./modules/network\n            └── ./modules/network/network.tf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"variablestf\"\u003evariables.tf\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#variablestf\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003evariables.tf\u003c/code\u003eには以下のようにmapで書く。省略しているが、\u003ccode\u003elocal\u003c/code\u003eで記述している。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e    \u003cspan style=\"color:#06b6ef\"\u003eap\u003c/span\u003e = {\n      \u003cspan style=\"color:#06b6ef\"\u003eserver\u003c/span\u003e = {\n        \u003cspan style=\"color:#48b685\"\u003e\u0026#34;01\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e {\n          \u003cspan style=\"color:#06b6ef\"\u003eip_address\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aa.aa.aa.aa/32\u0026#34;\u003c/span\u003e\n        }\n        \u003cspan style=\"color:#48b685\"\u003e\u0026#34;02\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e {\n          \u003cspan style=\"color:#06b6ef\"\u003eip_address\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;bb.bb.bb.bb/32\u0026#34;\u003c/span\u003e\n        }\n        \u003cspan style=\"color:#48b685\"\u003e\u0026#34;03\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e {\n          \u003cspan style=\"color:#06b6ef\"\u003eip_address\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;cc.cc.cc.cc/32\u0026#34;\u003c/span\u003e\n        }\n      }\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"maintf\"\u003emain.tf\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#maintf\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003emain.tf\u003c/code\u003eでmoduleで渡す際、以下のようにmapで定義する。不必要な箇所は省略。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003e    module\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;db\u0026#34;\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003esource\u003c/span\u003e   = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;../../modules/db\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eap_list\u003c/span\u003e = \u003cspan style=\"color:#06b6ef\"\u003elocal\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eap\u003c/span\u003e\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"databasetf\"\u003edatabase.tf\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#databasetf\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003edatabase.tf\u003c/code\u003eはmapで受け取って、aws_security_groupを作る。その後でaws_security_group_ruleを作り、適用していく。ポイントはfor_eachでmap内の要素を適応していくこと。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003e    variable\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ap_list\u0026#34;\u003c/span\u003e {}\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e    # Security Group\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e    resource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_security_group\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;public-db-sg\u0026#34;\u003c/span\u003e {\n      \u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e   = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003evar.\u003cspan style=\"color:#06b6ef\"\u003eenv\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e-public-db-sg\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#06b6ef\"\u003evpc_id\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003evar.\u003cspan style=\"color:#06b6ef\"\u003enetwork\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003evpc\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#06b6ef\"\u003etags\u003c/span\u003e = {\n        \u003cspan style=\"color:#06b6ef\"\u003eName\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;public-db-sg\u0026#34;\u003c/span\u003e\n      }\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e    resource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_security_group_rule\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;inbound_ap\u0026#34;\u003c/span\u003e {\n      \u003cspan style=\"color:#06b6ef\"\u003efor_each\u003c/span\u003e = var.\u003cspan style=\"color:#06b6ef\"\u003eap_list\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eserver\u003c/span\u003e\n      \u003cspan style=\"color:#06b6ef\"\u003etype\u003c/span\u003e        = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ingress\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#06b6ef\"\u003efrom_port\u003c/span\u003e   = \u003cspan style=\"color:#f99b15\"\u003e5432\u003c/span\u003e\n      \u003cspan style=\"color:#06b6ef\"\u003eto_port\u003c/span\u003e     = \u003cspan style=\"color:#f99b15\"\u003e5432\u003c/span\u003e\n      \u003cspan style=\"color:#06b6ef\"\u003eprotocol\u003c/span\u003e    = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;tcp\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#06b6ef\"\u003ecidr_blocks\u003c/span\u003e = [\n        \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003evar.\u003cspan style=\"color:#06b6ef\"\u003ears_list\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eserver\u003c/span\u003e[each.\u003cspan style=\"color:#06b6ef\"\u003ekey\u003c/span\u003e].\u003cspan style=\"color:#06b6ef\"\u003eip_address\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\n      ]\n      \u003cspan style=\"color:#06b6ef\"\u003edescription\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;ap-\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003eeach.\u003cspan style=\"color:#06b6ef\"\u003ekey\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#06b6ef\"\u003esecurity_group_id\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eaws_security_group\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003edb\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003esg\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"参考資料\"\u003e参考資料\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考資料\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下が参考になる。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://qiita.com/Canon11/items/c1ee988516a6492dfb74\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eTerraformで1つのセキュリティグループに複数のルールを設定する - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# terraformのmoduleを使用して複数のセキュリティグループを作ろうとしたらハマったので、記録に残す。 やりたいこと：inboudのIPアドレスを複数定義する# moduleを使用した以下の構成。引数に複数のIPアドレスをモジュールdbに渡す場合。 ├── ./README.md ├── ./env │   ├── ./env/prod │   │   ├── ./env/prod/main.tf │   │   └── ./env/prod/variables.tf │   └── ./env/stag │   ├── ./env/stag/main.tf │   └── ./env/stag/variables.tf └── ./modules ├── ./modules/db │   └── ./modules/db/database.tf └── ./modules/network └── ./modules/network/network.tf variables.tf# variables.tfには以下のようにmapで書く。省略しているが、localで記述している。 ap = { server = { \"01\" = { ip_address = \"aa.aa.aa.aa/32\" } \"02\" = { ip_address = \"bb.bb.bb.bb/32\" } \"03\" = { ip_address = \"cc.cc.cc.cc/32\" } } } main.tf# main.tfでmoduleで渡す際、以下のようにmapで定義する。不必要な箇所は省略。 module \"db\" { source = \"../../modules/db\" ap_list = local.ap } database.tf# database.tfはmapで受け取って、aws_security_groupを作る。その後でaws_security_group_ruleを作り、適用していく。ポイントはfor_eachでmap内の要素を適応していくこと。 variable \"ap_list\" {} # Security Group resource \"aws_security_group\" \"public-db-sg\" { name = \"${var.env}-public-db-sg\" vpc_id = \"${var.network.vpc-id}\" tags = { Name = \"public-db-sg\" } } resource \"aws_security_group_rule\" \"inbound_ap\" { for_each = var.ap_list.server type = \"ingress\" from_port = 5432 to_port = 5432 protocol = \"tcp\" cidr_blocks = [ \"${var.ars_list.server[each.key].ip_address}\" ] description = \"ap-${each.key}\" security_group_id = \"${aws_security_group.public-db-sg.id}\" } 参考資料# 以下が参考になる。 Terraformで1つのセキュリティグループに複数のルールを設定する - Qiita 微信 支付宝","scraped_at":"2025-07-12T21:19:41.414284757+09:00","word_count":146,"content_hash":"89d0ea644e8b2ebd05ba48930a461e95"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/no_more_wordpress/","title":"ウェブサイト構築にWordPress一択というのはやめたい","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"はじめに\"\u003eはじめに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#はじめに\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e「WordPressを使ってウェブサイトを構築したいんだけど、、、」というお問い合わせというか相談をいただくことが多いです。\u003c/p\u003e\n\u003cp\u003eWordPressでマネタイズしたい、WordPressで簡単な商品紹介をしたいという方が多い印象です。\u003c/p\u003e\n\u003cp\u003eそんな問い合わせをうけた場合にどんな回答をするかを書きます。\u003c/p\u003e\n\u003ch2 id=\"先に結論\"\u003e先に結論\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#先に結論\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e3年ほどWordPressを使用しブログを運用していた自分の経験をふまえて、以下を回答します。\u003c/p\u003e\n\u003ch3 id=\"ブログだけなら\"\u003eブログだけなら\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ブログだけなら\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eブログだけなら、ブログサービスを使用する。\u003c/p\u003e\n\u003cp\u003eオススメは「はてなブログ」。\u003c/p\u003e\n\u003ch3 id=\"ブログだけじゃない\"\u003eブログだけじゃない\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ブログだけじゃない\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eHugoなどを使用したSSGを使用する。\u003c/p\u003e\n\u003ch3 id=\"wordpressは最後の手段\"\u003eWordPressは最後の手段\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#wordpressは最後の手段\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWordPressの採用は最後の手段にしたほうがいい。\u003c/p\u003e\n\u003ch2 id=\"wordpressのデメリット\"\u003eWordPressのデメリット\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#wordpressのデメリット\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWordPressをオススメしないのは以下の理由です。\u003c/p\u003e\n\u003ch3 id=\"理由１頻繁なアップデート\"\u003e理由１：頻繁なアップデート\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#理由１頻繁なアップデート\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWordPressはシェアが多いこともあり攻撃対象になりやすく、セキュリティ的な穴を見つかるとそれに応じたアップデートがリリースされます。\u003c/p\u003e\n\u003cp\u003eアップデートがリリースされることそのものは良いことなのですが、そのアップデート作業がとても面倒です。WordPress本体だけでなく、使用しているプラグインやテーマを含めてアップデートに追随する必要があります。タイミングによっては2日に1回程度の頻度でアップデートが必要となり、疲弊します。\u003c/p\u003e\n\u003cp\u003e私がWordPressをやめた大きな理由はこれです。記事を書きたいためにWordPressを導入したはずなのに、アップデートするためにWordPressを導入したように感じてしまったのです。\u003c/p\u003e\n\u003ch3 id=\"理由２バージョンによる不具合管理\"\u003e理由２：バージョンによる不具合管理\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#理由２バージョンによる不具合管理\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e上のアップデートとも関連しますが、アップデートでバージョンがあがることにより動作しないことがあります。\u003c/p\u003e\n\u003cp\u003eたとえば、WordPress本体をアップデートしたら、それまで使用していたプラグインが使用できなくなるということは多いです。\u003c/p\u003e\n\u003cp\u003eそのため、バージョンアップを確認するための環境などを用意しておき、不具合を管理することが求められます。\u003c/p\u003e\n\u003ch3 id=\"理由３表示が遅くなりがち\"\u003e理由３：表示が遅くなりがち\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#理由３表示が遅くなりがち\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWordPressは本体だけでなく、プラグインを使用することが多いです。これらのプラグインなどを影響で表示スピードが遅くなることがあります。\u003c/p\u003e\n\u003cp\u003eまた、WordPressはデータベースを使用しています。そのため、データベースへのアクセス部分がボトルネックになり表示スピードが下がります。\u003c/p\u003e\n\u003cp\u003e表示スピードが下がるということは、googleの評価も下がるということと同義なので、大きなデメリットになります。\u003c/p\u003e\n\u003ch2 id=\"ブログだけならはてなブログ\"\u003eブログだけならはてなブログ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ブログだけならはてなブログ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eブログだけ書きたいということであれば、ブログサービスの利用をオススメします。\u003c/p\u003e\n\u003cp\u003eというのも、上であげたアップデートなどを気にしなくてもいいですし、表示スピードもある程度担保されるためです。\u003c/p\u003e\n\u003cp\u003eブログサービスは数多くありますが、メンテナンス性や記事の移行などを考慮すると「はてなブログ」をオススメします。\u003c/p\u003e\n\u003ch3 id=\"ブログ以外もやりたいならssg\"\u003eブログ以外もやりたいならSSG\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ブログ以外もやりたいならssg\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e会社紹介や商品紹介など、ブログ以外もやりたいならSSGをオススメします。\u003c/p\u003e\n\u003cp\u003eSSGは静的サイトジェネレーターの略で、記事の更新時にHTMLファイルを生成する方式です。静的ファイルを用意しておくので、バージョンアップを気にしなくてもいいですし、表示スピードも速いです。\u003c/p\u003e\n\u003cp\u003eSSGツールとしては静的ファイルの作成が速いgolang製のhugoをオススメします。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"はじめに# 「WordPressを使ってウェブサイトを構築したいんだけど、、、」というお問い合わせというか相談をいただくことが多いです。 WordPressでマネタイズしたい、WordPressで簡単な商品紹介をしたいという方が多い印象です。 そんな問い合わせをうけた場合にどんな回答をするかを書きます。 先に結論# 3年ほどWordPressを使用しブログを運用していた自分の経験をふまえて、以下を回答します。 ブログだけなら# ブログだけなら、ブログサービスを使用する。 オススメは「はてなブログ」。 ブログだけじゃない# Hugoなどを使用したSSGを使用する。 WordPressは最後の手段# WordPressの採用は最後の手段にしたほうがいい。 WordPressのデメリット# WordPressをオススメしないのは以下の理由です。 理由１：頻繁なアップデート# WordPressはシェアが多いこともあり攻撃対象になりやすく、セキュリティ的な穴を見つかるとそれに応じたアップデートがリリースされます。 アップデートがリリースされることそのものは良いことなのですが、そのアップデート作業がとても面倒です。WordPress本体だけでなく、使用しているプラグインやテーマを含めてアップデートに追随する必要があります。タイミングによっては2日に1回程度の頻度でアップデートが必要となり、疲弊します。 私がWordPressをやめた大きな理由はこれです。記事を書きたいためにWordPressを導入したはずなのに、アップデートするためにWordPressを導入したように感じてしまったのです。 理由２：バージョンによる不具合管理# 上のアップデートとも関連しますが、アップデートでバージョンがあがることにより動作しないことがあります。 たとえば、WordPress本体をアップデートしたら、それまで使用していたプラグインが使用できなくなるということは多いです。 そのため、バージョンアップを確認するための環境などを用意しておき、不具合を管理することが求められます。 理由３：表示が遅くなりがち# WordPressは本体だけでなく、プラグインを使用することが多いです。これらのプラグインなどを影響で表示スピードが遅くなることがあります。 また、WordPressはデータベースを使用しています。そのため、データベースへのアクセス部分がボトルネックになり表示スピードが下がります。 表示スピードが下がるということは、googleの評価も下がるということと同義なので、大きなデメリットになります。 ブログだけならはてなブログ# ブログだけ書きたいということであれば、ブログサービスの利用をオススメします。 というのも、上であげたアップデートなどを気にしなくてもいいですし、表示スピードもある程度担保されるためです。 ブログサービスは数多くありますが、メンテナンス性や記事の移行などを考慮すると「はてなブログ」をオススメします。 ブログ以外もやりたいならSSG# 会社紹介や商品紹介など、ブログ以外もやりたいならSSGをオススメします。 SSGは静的サイトジェネレーターの略で、記事の更新時にHTMLファイルを生成する方式です。静的ファイルを用意しておくので、バージョンアップを気にしなくてもいいですし、表示スピードも速いです。 SSGツールとしては静的ファイルの作成が速いgolang製のhugoをオススメします。 微信 支付宝","scraped_at":"2025-07-12T21:19:44.020702323+09:00","word_count":37,"content_hash":"24a84b20d7faa6028ae78159205ebed6"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/openssl-no-passphrase/","title":"サーバ証明書の秘密鍵からパスフレーズを取り除く方法","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eサーバ証明書を作成する際、秘密鍵にパスフレーズを設定しました。\u003c/p\u003e\n\u003cp\u003eこの証明書は単体のサーバに設定しており、apacheを再起動するたびにパスフレーズを聞かれるのが面倒でした。\u003c/p\u003e\n\u003cp\u003eそこで、秘密鍵に設定したパスフレーズを取り除くことにしました。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e実行しているのは、Ubuntu22.04です。\u003c/p\u003e\n\u003cp\u003eまたコマンドでは以下のようにします。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eパスフレーズ付きの秘密鍵: \u003ccode\u003epass.key\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eパスフレーズ無しの秘密鍵: \u003ccode\u003eno_pass.key\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以下のコマンドです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e    sudo openssl rsa -in pass.key -out no_pass.key\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上記のコマンドで、以下のようにパスフレーズを聞かれます。設定しているパスフレーズを入力します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e    Enter pass phrase \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e server.key:\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eなお、コマンドで使用しているオプション\u003ccode\u003e-in\u003c/code\u003eは入力するファイルを指定しており、\u003ccode\u003e-out\u003c/code\u003eは出力するファイルを指定しています。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下はopensslのrsaに関連するヘルプです。オプションは以下を参照しました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eUsage: rsa \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e\n\nGeneral options:\n-help               Display this summary\n-check              Verify key consistency\n-*                  Any supported cipher\n-engine val         Use engine, possibly a hardware device\n\nInput options:\n-in val             Input file\n-inform format      Input format \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eDER/PEM/P12/ENGINE\n-pubin              Expect a public key in input file\n-RSAPublicKey_in    Input is an RSAPublicKey\n-passin val         Input file pass phrase source\n\nOutput options:\n-out outfile        Output file\n-outform format     Output format, one of DER PEM PVK\n-pubout             Output a public key\n-RSAPublicKey_out   Output is an RSAPublicKey\n-passout val        Output file pass phrase source\n-noout              Don\u003cspan style=\"color:#48b685\"\u003e\u0026#39;t print key out\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e-text               Print the key in text\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e-modulus            Print the RSA key modulus\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e-traditional        Use traditional format for private keys\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003ePVK options:\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e-pvk-strong         Enable \u0026#39;\u003c/span\u003eStrong\u003cspan style=\"color:#48b685\"\u003e\u0026#39; PVK encoding level (default)\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e-pvk-weak           Enable \u0026#39;\u003c/span\u003eWeak\u003cspan style=\"color:#48b685\"\u003e\u0026#39; PVK encoding level\n\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e-pvk-none           Don\u0026#39;\u003c/span\u003et enforce PVK encoding\n\nProvider options:\n-provider-path val  Provider load path \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003emust be before \u003cspan style=\"color:#48b685\"\u003e\u0026#39;provider\u0026#39;\u003c/span\u003e argument \u003cspan style=\"color:#815ba4\"\u003eif\u003c/span\u003e required\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n-provider val       Provider to load \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003ecan be specified multiple times\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n-propquery val      Property query used when fetching algorithms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# サーバ証明書を作成する際、秘密鍵にパスフレーズを設定しました。 この証明書は単体のサーバに設定しており、apacheを再起動するたびにパスフレーズを聞かれるのが面倒でした。 そこで、秘密鍵に設定したパスフレーズを取り除くことにしました。 手順# 実行しているのは、Ubuntu22.04です。 またコマンドでは以下のようにします。 パスフレーズ付きの秘密鍵: pass.key パスフレーズ無しの秘密鍵: no_pass.key 以下のコマンドです。 sudo openssl rsa -in pass.key -out no_pass.key 上記のコマンドで、以下のようにパスフレーズを聞かれます。設定しているパスフレーズを入力します。 Enter pass phrase for server.key: なお、コマンドで使用しているオプション-inは入力するファイルを指定しており、-outは出力するファイルを指定しています。 参考# 以下はopensslのrsaに関連するヘルプです。オプションは以下を参照しました。 Usage: rsa [options] General options: -help Display this summary -check Verify key consistency -* Any supported cipher -engine val Use engine, possibly a hardware device Input options: -in val Input file -inform format Input format (DER/PEM/P12/ENGINE -pubin Expect a public key in input file -RSAPublicKey_in Input is an RSAPublicKey -passin val Input file pass phrase source Output options: -out outfile Output file -outform format Output format, one of DER PEM PVK -pubout Output a public key -RSAPublicKey_out Output is an RSAPublicKey -passout val Output file pass phrase source -noout Don't print key out -text Print the key in text -modulus Print the RSA key modulus -traditional Use traditional format for private keys PVK options: -pvk-strong Enable 'Strong' PVK encoding level (default) -pvk-weak Enable 'Weak' PVK encoding level -pvk-none Don't enforce PVK encoding Provider options: -provider-path val Provider load path (must be before 'provider' argument if required) -provider val Provider to load (can be specified multiple times) -propquery val Property query used when fetching algorithms 微信 支付宝","scraped_at":"2025-07-12T21:19:45.838880789+09:00","word_count":194,"content_hash":"38536714363fcb98a10baeafe2ca4ca0"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/lftp-tips/","title":"lftpのTIPS","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eftpというプロトコルを使用する場合、rsync的な使い方のできる\u003ccode\u003elftp\u003c/code\u003eを使用することが多いです。\u003c/p\u003e\n\u003cp\u003eとはいうものの、最近はftpを使用する機会がめっきり減ってきたのでできていたことを忘れてしまって、都度調べてます。なので、自分でまとめて定着化を図ります。\u003c/p\u003e\n\u003ch2 id=\"tips\"\u003eTIPS\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#tips\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"ログイン\"\u003eログイン\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ログイン\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eパスワードをそのまま表示させてしまうのはNGだと思いますが便利です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003elftp -u user_name,password serve.name.com\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"文字コードをsjisに\"\u003e文字コードをSJISに\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#文字コードをsjisに\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eたまにサーバ側の文字コードがSJISになっています。文字化けしてしいまい、ファイル操作ができないので以下でSJISに変更します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eset ftp:charset sjis \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# ftpというプロトコルを使用する場合、rsync的な使い方のできるlftpを使用することが多いです。 とはいうものの、最近はftpを使用する機会がめっきり減ってきたのでできていたことを忘れてしまって、都度調べてます。なので、自分でまとめて定着化を図ります。 TIPS# ログイン# パスワードをそのまま表示させてしまうのはNGだと思いますが便利です。 lftp -u user_name,password serve.name.com 文字コードをSJISに# たまにサーバ側の文字コードがSJISになっています。文字化けしてしいまい、ファイル操作ができないので以下でSJISに変更します。 set ftp:charset sjis 微信 支付宝","scraped_at":"2025-07-12T21:19:46.833434404+09:00","word_count":17,"content_hash":"2eab2ea9c671f7b3b610322cd5f0f40b"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/golang-cgo_enabled/","title":"golangのバイナリ実行でGLIBCのエラーが出た場合の対処","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"事象\"\u003e事象\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#事象\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003egolangでbuildしたバイナリをdockerのコンテナーで動かそうとしたら、以下のメッセージが出力されました。\u003c/p\u003e\n\u003cp\u003eこのメッセージが出力されると、当然のように動きません。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e./epgstation-slack-notification: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32\u0026#39; not found (required by ./epgstation-slack-notification)\n./epgstation-slack-notification: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34\u0026#39; not found (required by ./epgstation-slack-notification)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"対処\"\u003e対処\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対処\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下でbuildすればOKです。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCGO_ENABLED=0 go build\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eクロスコンパイルする際の指定です。デフォルトが1になってるので、0に変更します。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://hatappi.blog/entry/2017/11/23/204211\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eGoでCのライブラリを使ったプログラムをクロスコンパイルする - hatappi.blog\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"事象# golangでbuildしたバイナリをdockerのコンテナーで動かそうとしたら、以下のメッセージが出力されました。 このメッセージが出力されると、当然のように動きません。 ./epgstation-slack-notification: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32' not found (required by ./epgstation-slack-notification) ./epgstation-slack-notification: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./epgstation-slack-notification) 対処# 以下でbuildすればOKです。 CGO_ENABLED=0 go build クロスコンパイルする際の指定です。デフォルトが1になってるので、0に変更します。 参考# GoでCのライブラリを使ったプログラムをクロスコンパイルする - hatappi.blog 微信 支付宝","scraped_at":"2025-07-12T21:19:48.967380282+09:00","word_count":33,"content_hash":"25f0c0c0d0c902837d7ead3ac79509df"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/github-change-https-to-ssh/","title":"GitHubにsshでpushできるようにリモートを変更する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egit clone\u003c/code\u003eする際、sshでcloneすればいいのですが、httpsでクローンしてしまうことがたまにあります。\u003c/p\u003e\n\u003cp\u003eいざpushしようとすると、GitHubから怒られます。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eポイントはhttpsでの接続としているものをsshに変更するということです。\u003c/p\u003e\n\u003ch3 id=\"変更前の確認\"\u003e変更前の確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#変更前の確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下のようにoriginがhttpsになっています。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git remote -v\n  origin  https://github.com/USERNAME/REPOSITORY.git (fetch)\n  origin  https://github.com/USERNAME/REPOSITORY.git (push)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"変更\"\u003e変更\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#変更\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e変更するため、\u003ccode\u003egit remote set-url\u003c/code\u003eをします。なお、以下のUSERNAMEとREPOSITORYは自分のものに書き換えます。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit remote set-url origin git@github.com:USERNAME/REPOSITORY.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"変更後の確認\"\u003e変更後の確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#変更後の確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e変更後の確認。このようになっています。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git remote -v\n  origin\tgit@github.com:USERNAME/REPOSITORY.git (fetch)\n  origin\tgit@github.com:USERNAME/REPOSITORY.git (push)\n\u003c/code\u003e\u003c/pre\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# git cloneする際、sshでcloneすればいいのですが、httpsでクローンしてしまうことがたまにあります。 いざpushしようとすると、GitHubから怒られます。 手順# ポイントはhttpsでの接続としているものをsshに変更するということです。 変更前の確認# 以下のようにoriginがhttpsになっています。 $ git remote -v origin https://github.com/USERNAME/REPOSITORY.git (fetch) origin https://github.com/USERNAME/REPOSITORY.git (push) 変更# 変更するため、git remote set-urlをします。なお、以下のUSERNAMEとREPOSITORYは自分のものに書き換えます。 git remote set-url origin git@github.com:USERNAME/REPOSITORY.git 変更後の確認# 変更後の確認。このようになっています。 $ git remote -v origin git@github.com:USERNAME/REPOSITORY.git (fetch) origin git@github.com:USERNAME/REPOSITORY.git (push) 微信 支付宝","scraped_at":"2025-07-12T21:19:51.411201354+09:00","word_count":41,"content_hash":"63d565205c41ba3484100ef31e05d10c"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/rds-stop-start/","title":"aws-cliからRDSを停止したり、起動したりする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRDSは高額です。\u003c/p\u003e\n\u003cp\u003e使ったぶんだけコストの発生するパブリッククラウドにおいて、高額なサービスを使わないなら停止しておきたいのが人情です。\u003c/p\u003e\n\u003cp\u003eこの記事はaws-cliでRDSを停止したり、起動したりする手順を示します。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eDBインスタンスを\u003ccode\u003etest-db\u003c/code\u003eとしてコマンドを書いています。\u003c/p\u003e\n\u003ch3 id=\"rdsの状態確認\"\u003eRDSの状態確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#rdsの状態確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下のコマンドでRDSの状態を確認します。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eaws rds describe-db-instances --db-instance-identifier test-db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eただ、上のコマンドだとjson形式で多くの項目が表示されてわかりにくいです。そこで、以下を使用します。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eaws rds describe-db-instances --query \u0026#39;DBInstances[*].[DBInstanceIdentifier,DBInstanceStatus]\u0026#39; --output table\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eなお、上のコマンドは以下のAWSのページを参照しています。(参照というか、そのものです。)\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/accessing-monitoring.html\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eインスタンスのステータスと推奨事項の表示 - Amazon Relational Database Service\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e起動状態だと、以下のように\u003ccode\u003eavailable\u003c/code\u003eが表示されます。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e--------------------------\n|   DescribeDBInstances  |\n+----------+-------------+\n|  test-db |  available  |\n+----------+-------------+\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"rdsの停止\"\u003eRDSの停止\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#rdsの停止\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eRDSを停止します。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eaws rds stop-db-instance --db-instance-identifier test-db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRDSの停止には時間がかかります。ほとんどデータが入ってなくても5分ぐらいはかかります。\u003c/p\u003e\n\u003cp\u003e停止中は以下のように\u003ccode\u003estopping\u003c/code\u003eです。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e-------------------------\n|  DescribeDBInstances  |\n+----------+------------+\n|  test-db |  stopping  |\n+----------+------------+\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e停止すると、以下のように\u003ccode\u003estopped\u003c/code\u003eとなります。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e------------------------\n|  DescribeDBInstances |\n+----------+-----------+\n|  test-db |  stopped  |\n+----------+-----------+\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"起動\"\u003e起動\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#起動\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e使いたいときは起動します。起動も停止と同じように時間がかかります。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eaws rds start-db-instance --db-instance-identifier test-db\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e起動中は\u003ccode\u003estarting\u003c/code\u003eです。起動すると、\u003ccode\u003eavailable\u003c/code\u003eになります。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e-------------------------\n|  DescribeDBInstances  |\n+----------+------------+\n|  test-db |  starting  |\n+----------+------------+\n\u003c/code\u003e\u003c/pre\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# RDSは高額です。 使ったぶんだけコストの発生するパブリッククラウドにおいて、高額なサービスを使わないなら停止しておきたいのが人情です。 この記事はaws-cliでRDSを停止したり、起動したりする手順を示します。 手順# DBインスタンスをtest-dbとしてコマンドを書いています。 RDSの状態確認# 以下のコマンドでRDSの状態を確認します。 aws rds describe-db-instances --db-instance-identifier test-db ただ、上のコマンドだとjson形式で多くの項目が表示されてわかりにくいです。そこで、以下を使用します。 aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,DBInstanceStatus]' --output table なお、上のコマンドは以下のAWSのページを参照しています。(参照というか、そのものです。) インスタンスのステータスと推奨事項の表示 - Amazon Relational Database Service 起動状態だと、以下のようにavailableが表示されます。 -------------------------- | DescribeDBInstances | +----------+-------------+ | test-db | available | +----------+-------------+ RDSの停止# RDSを停止します。 aws rds stop-db-instance --db-instance-identifier test-db RDSの停止には時間がかかります。ほとんどデータが入ってなくても5分ぐらいはかかります。 停止中は以下のようにstoppingです。 ------------------------- | DescribeDBInstances | +----------+------------+ | test-db | stopping | +----------+------------+ 停止すると、以下のようにstoppedとなります。 ------------------------ | DescribeDBInstances | +----------+-----------+ | test-db | stopped | +----------+-----------+ 起動# 使いたいときは起動します。起動も停止と同じように時間がかかります。 aws rds start-db-instance --db-instance-identifier test-db 起動中はstartingです。起動すると、availableになります。 ------------------------- | DescribeDBInstances | +----------+------------+ | test-db | starting | +----------+------------+ 微信 支付宝","scraped_at":"2025-07-12T21:19:53.703483888+09:00","word_count":93,"content_hash":"b9c594b5adb56ea2fe1543ad4f3d0e48"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/hugo-version-up/","title":"Hugoをバージョンアップした記録","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e新しいHugoのテーマを試したかったのですが、Hugoのバージョン指定がありました。\u003c/p\u003e\n\u003cp\u003e良いタイミングだと思ったので、Hugoをバージョンアップしました。\u003c/p\u003e\n\u003cp\u003eだいたいこういうツール類はdockerを使用しています。しかし、hugoのようにる頻繁に使用するツールはインストールして使用しています。\u003c/p\u003e\n\u003ch2 id=\"バージョンアップ前\"\u003eバージョンアップ前\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#バージョンアップ前\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のように2022-10-04の\u003ccode\u003ev0.104.3\u003c/code\u003eです。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehugo version\nhugo v0.104.3-58b824581360148f2d91f5cc83f69bd22c1aa331+extended linux/amd64 BuildDate=2022-10-04T14:25:23Z VendorInfo=gohugoio\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eこのタイミングでの最新が\u003ccode\u003e0.111.3\u003c/code\u003eでした。\u003c/p\u003e\n\u003ch2 id=\"ダウンロード間違えたやつ\"\u003eダウンロード（間違えたやつ）\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ダウンロード間違えたやつ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eダウンロードしました。本当はextendedを入れたかったのですが、間違えてノーマル版を落としました。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewget https://github.com/gohugoio/hugo/releases/download/v0.111.3/hugo_0.111.3_linux-amd64.deb\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003edpkgコマンドを使用してインストールします。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo dpkg -i hugo_0.111.3_linux-amd64.deb \n(データベースを読み込んでいます ... 現在 267554 個のファイルとディレクトリがインストールされています。)\nhugo_0.111.3_linux-amd64.deb を展開する準備をしています ...\nhugo (0.111.3) で (0.104.3 に) 上書き展開しています ...\nhugo (0.111.3) を設定しています ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e終了したので、バージョン確認です。v0.111.3になっていますが、extendedの文字がありません。ここで間違えに気が付きました。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehugo version\nhugo v0.111.3-5d4eb5154e1fed125ca8e9b5a0315c4180dab192 linux/amd64 BuildDate=2023-03-12T11:40:50Z VendorInfo=gohugoio\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"ダウンロードextendedのバージョン\"\u003eダウンロード（extendedのバージョン）\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ダウンロードextendedのバージョン\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eもう一度ダウンロードします。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewget https://github.com/gohugoio/hugo/releases/download/v0.111.3/hugo_extended_0.111.3_linux-amd64.deb\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003edpkgコマンドを使用してインストールします。手順は変わらないです。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo dpkg -i hugo_extended_0.111.3_linux-amd64.deb \n(データベースを読み込んでいます ... 現在 267554 個のファイルとディレクトリがインストールされています。)\nhugo_extended_0.111.3_linux-amd64.deb を展開する準備をしています ...\nhugo (0.111.3) で (0.111.3 に) 上書き展開しています ...\nhugo (0.111.3) を設定しています ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eバージョン確認すると、extendedの文字が見えます。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehugo version\nhugo v0.111.3-5d4eb5154e1fed125ca8e9b5a0315c4180dab192+extended linux/amd64 BuildDate=2023-03-12T11:40:50Z VendorInfo=gohugoio\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下の記事を参考にしました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gkzz.dev/posts/hugo-installation-on-ubuntu/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003e最新のHugoをインストールする方法とHugoの設定ファイルをtomlフォーマット以外にする方法 | gkzz.dev\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 新しいHugoのテーマを試したかったのですが、Hugoのバージョン指定がありました。 良いタイミングだと思ったので、Hugoをバージョンアップしました。 だいたいこういうツール類はdockerを使用しています。しかし、hugoのようにる頻繁に使用するツールはインストールして使用しています。 バージョンアップ前# 以下のように2022-10-04のv0.104.3です。 hugo version hugo v0.104.3-58b824581360148f2d91f5cc83f69bd22c1aa331+extended linux/amd64 BuildDate=2022-10-04T14:25:23Z VendorInfo=gohugoio このタイミングでの最新が0.111.3でした。 ダウンロード（間違えたやつ）# ダウンロードしました。本当はextendedを入れたかったのですが、間違えてノーマル版を落としました。 wget https://github.com/gohugoio/hugo/releases/download/v0.111.3/hugo_0.111.3_linux-amd64.deb dpkgコマンドを使用してインストールします。 sudo dpkg -i hugo_0.111.3_linux-amd64.deb (データベースを読み込んでいます ... 現在 267554 個のファイルとディレクトリがインストールされています。) hugo_0.111.3_linux-amd64.deb を展開する準備をしています ... hugo (0.111.3) で (0.104.3 に) 上書き展開しています ... hugo (0.111.3) を設定しています ... 終了したので、バージョン確認です。v0.111.3になっていますが、extendedの文字がありません。ここで間違えに気が付きました。 hugo version hugo v0.111.3-5d4eb5154e1fed125ca8e9b5a0315c4180dab192 linux/amd64 BuildDate=2023-03-12T11:40:50Z VendorInfo=gohugoio ダウンロード（extendedのバージョン）# もう一度ダウンロードします。 wget https://github.com/gohugoio/hugo/releases/download/v0.111.3/hugo_extended_0.111.3_linux-amd64.deb dpkgコマンドを使用してインストールします。手順は変わらないです。 sudo dpkg -i hugo_extended_0.111.3_linux-amd64.deb (データベースを読み込んでいます ... 現在 267554 個のファイルとディレクトリがインストールされています。) hugo_extended_0.111.3_linux-amd64.deb を展開する準備をしています ... hugo (0.111.3) で (0.111.3 に) 上書き展開しています ... hugo (0.111.3) を設定しています ... バージョン確認すると、extendedの文字が見えます。 hugo version hugo v0.111.3-5d4eb5154e1fed125ca8e9b5a0315c4180dab192+extended linux/amd64 BuildDate=2023-03-12T11:40:50Z VendorInfo=gohugoio 参考# 以下の記事を参考にしました。 最新のHugoをインストールする方法とHugoの設定ファイルをtomlフォーマット以外にする方法 | gkzz.dev 微信 支付宝","scraped_at":"2025-07-12T21:19:55.022548059+09:00","word_count":93,"content_hash":"6f479b6a80a92e259e148187a61ad43b"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/terraform-rds-internet-access/","title":"TerraformでRDSをインターネットから接続する構成。私的なノウハウ","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eVPSに配置したアプリケーションから、AWSのRDSに接続したいという要望がありました。\u003c/p\u003e\n\u003cp\u003e技術的には可能だと思うのですが、本当にできるのかなどを検証しました。検証は環境の構築→検証→破壊→構築→検証→破壊を繰り返します。そういうビルド・アンド・スクラップをしやすくするためにterraformを使用しました。terraformを使用する中で得たワタクシ的なノウハウを記録します。\u003c/p\u003e\n\u003cp\u003eなお、インターネット経由の通信に特化した内容だけではなく、RDS全般に言えることも書いています。\u003c/p\u003e\n\u003ch2 id=\"インターネットからrdsにアクセスするためのノウハウ\"\u003eインターネットからRDSにアクセスするためのノウハウ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#インターネットからrdsにアクセスするためのノウハウ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"vpcの定義\"\u003eVPCの定義\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#vpcの定義\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eVPCは以下が必要\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e    \u003cspan style=\"color:#06b6ef\"\u003eenable_dns_support\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eenable_dns_hostnames\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eなお、\u003ccode\u003etrue\u003c/code\u003eにしないで、未設定（デフォルトがfalse）と以下のようなエラーが出ます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eError\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecreating\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eRDS\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eDB\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eInstance\u003c/span\u003e (\u003cspan style=\"color:#06b6ef\"\u003etest\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003edb\u003c/span\u003e)\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eInvalidVPCNetworkStateFault\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eCannot\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecreate\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003epublicly\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eaccessible\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eDBInstance\u003c/span\u003e.  \u003cspan style=\"color:#06b6ef\"\u003eThe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003especified\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eVPC\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003edoes\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003esupport\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eDNS\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eresolution\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eDNS\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ehostnames\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eor\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eboth\u003c/span\u003e. \u003cspan style=\"color:#06b6ef\"\u003eUpdate\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethe\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eVPC\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eand\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ethen\u003c/span\u003e try \u003cspan style=\"color:#06b6ef\"\u003eagain\u003c/span\u003e\n\u003cspan style=\"color:#ef6155\"\u003e│\u003c/span\u003e \t\u003cspan style=\"color:#06b6ef\"\u003estatus\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003ecode\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#f99b15\"\u003e400\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003erequest\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003efc9bcc2\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003ee7f5\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e-4\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003ee64\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e-9\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003ebc6\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e-35\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003ec9dcc9f9e3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"dbの定義\"\u003eDBの定義\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#dbの定義\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eインターネットからのアクセスを許可するために、dbインスタンスには以下を入れます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#06b6ef\"\u003epublicly_accessible\u003c/span\u003e     = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"rds共通のノウハウ\"\u003eRDS共通のノウハウ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#rds共通のノウハウ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003estorageは最低でも20GBないと起動しない\u003c/li\u003e\n\u003cli\u003eAZは2つ設定しないと起動しない（1つはNG）\u003c/li\u003e\n\u003cli\u003eパスワードは8文字以上が必要\u003c/li\u003e\n\u003cli\u003eDBの起動に3分30秒ぐらいかかる\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003edestroy時のポイントは\u003ccode\u003eskip_final_snapshot\u003c/code\u003eをtrueにすることです。これを入れないとsnapshotが存在するため、素直にdestoryしてくれません。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#06b6ef\"\u003eskip_final_snapshot\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下の記事を参考にしました。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRDSはリソース削除時にデフォルトでスナップショットの作成が求められるため、terraform destroyを行うためにはtfファイルにskip_final_snapshotのオプションをtrueに指定する必要があります。デフォルトはfalse。本番環境で行う場合は注意しましょう。(\u003ca href=\"https://qiita.com/Brutus/items/cd5aab062ea6cebe436c\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eAWSのEC2とRDSをTerraformで構築する　Terraform３分クッキング - Qiita\u003c/a\u003e)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"実際の定義\"\u003e実際の定義\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#実際の定義\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e少し変更していますが、以下のような定義になります。参考として。\u003c/p\u003e\n\u003ch3 id=\"vpc\"\u003evpc\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#vpc\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_vpc\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;dev-env\u0026#34;\u003c/span\u003e {\n    \u003cspan style=\"color:#06b6ef\"\u003ecidr_block\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;10.0.0.0/16\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003einstance_tenancy\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eenable_dns_support\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003eenable_dns_hostnames\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#06b6ef\"\u003etags\u003c/span\u003e = {\n      \u003cspan style=\"color:#06b6ef\"\u003eName\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;dev-env\u0026#34;\u003c/span\u003e\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"db\"\u003eDB\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#db\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-terraform\" data-lang=\"terraform\"\u003e\u003cspan style=\"color:#815ba4\"\u003eresource\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_db_instance\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;test-db\u0026#34;\u003c/span\u003e {\n  \u003cspan style=\"color:#06b6ef\"\u003eidentifier\u003c/span\u003e           = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;test-db\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eallocated_storage\u003c/span\u003e    = \u003cspan style=\"color:#f99b15\"\u003e20\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003estorage_type\u003c/span\u003e         = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;gp3\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eengine\u003c/span\u003e               = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;postgres\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eengine_version\u003c/span\u003e       = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;14.6\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003einstance_class\u003c/span\u003e       = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;db.t4g.micro\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003edb_name\u003c/span\u003e              = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;testdb\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eusername\u003c/span\u003e             = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003epassword\u003c/span\u003e             = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;testtest\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003evpc_security_group_ids\u003c/span\u003e  = [\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eaws_security_group\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003epraivate\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003edb\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003esg\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e]\n  \u003cspan style=\"color:#06b6ef\"\u003edb_subnet_group_name\u003c/span\u003e = \u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003eaws_db_subnet_group\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003edb\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003eskip_final_snapshot\u003c/span\u003e = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n  \u003cspan style=\"color:#06b6ef\"\u003epublicly_accessible\u003c/span\u003e     = \u003cspan style=\"color:#815ba4\"\u003etrue\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# VPSに配置したアプリケーションから、AWSのRDSに接続したいという要望がありました。 技術的には可能だと思うのですが、本当にできるのかなどを検証しました。検証は環境の構築→検証→破壊→構築→検証→破壊を繰り返します。そういうビルド・アンド・スクラップをしやすくするためにterraformを使用しました。terraformを使用する中で得たワタクシ的なノウハウを記録します。 なお、インターネット経由の通信に特化した内容だけではなく、RDS全般に言えることも書いています。 インターネットからRDSにアクセスするためのノウハウ# VPCの定義# VPCは以下が必要 enable_dns_support = \"true\" enable_dns_hostnames = \"true\" なお、trueにしないで、未設定（デフォルトがfalse）と以下のようなエラーが出ます。 │ Error: creating RDS DB Instance (test-db): InvalidVPCNetworkStateFault: Cannot create a publicly accessible DBInstance. The specified VPC does not support DNS resolution, DNS hostnames, or both. Update the VPC and then try again │ status code: 400, request id: 0fc9bcc2-e7f5-4e64-9bc6-35c9dcc9f9e3 DBの定義# インターネットからのアクセスを許可するために、dbインスタンスには以下を入れます。 publicly_accessible = true RDS共通のノウハウ# storageは最低でも20GBないと起動しない AZは2つ設定しないと起動しない（1つはNG） パスワードは8文字以上が必要 DBの起動に3分30秒ぐらいかかる destroy時のポイントはskip_final_snapshotをtrueにすることです。これを入れないとsnapshotが存在するため、素直にdestoryしてくれません。 skip_final_snapshot = true 以下の記事を参考にしました。 RDSはリソース削除時にデフォルトでスナップショットの作成が求められるため、terraform destroyを行うためにはtfファイルにskip_final_snapshotのオプションをtrueに指定する必要があります。デフォルトはfalse。本番環境で行う場合は注意しましょう。(AWSのEC2とRDSをTerraformで構築する　Terraform３分クッキング - Qiita) 実際の定義# 少し変更していますが、以下のような定義になります。参考として。 vpc# resource \"aws_vpc\" \"dev-env\" { cidr_block = \"10.0.0.0/16\" instance_tenancy = \"default\" enable_dns_support = \"true\" enable_dns_hostnames = \"true\" tags = { Name = \"dev-env\" } } DB# resource \"aws_db_instance\" \"test-db\" { identifier = \"test-db\" allocated_storage = 20 storage_type = \"gp3\" engine = \"postgres\" engine_version = \"14.6\" instance_class = \"db.t4g.micro\" db_name = \"testdb\" username = \"test\" password = \"testtest\" vpc_security_group_ids = [\"${aws_security_group.praivate-db-sg.id}\"] db_subnet_group_name = \"${aws_db_subnet_group.public-db.name}\" skip_final_snapshot = true publicly_accessible = true } 微信 支付宝","scraped_at":"2025-07-12T21:19:56.197635275+09:00","word_count":148,"content_hash":"3c05f473b20e11247a0c3163f81050b6"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/terraform-warning-argument-is-deprecated/","title":"TerraformでRDSの構築時、Argument is deprecatedでWarning","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"事象\"\u003e事象\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#事象\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eterraformでRDSを構築しているときに、以下のwarningが表示されました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e    ╷\n    │ Warning: Argument is deprecated\n    │ \n    │   with aws_db_instance.test-db,\n    │   on sample.tf line 80, in resource \u003cspan style=\"color:#48b685\"\u003e\u0026#34;aws_db_instance\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;test-db\u0026#34;\u003c/span\u003e:\n    │   80:   \u003cspan style=\"color:#ef6155\"\u003ename\u003c/span\u003e                 \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;datestdb\u0026#34;\u003c/span\u003e\n    │ \n    │ Use db_name instead\n    │ \n    │ \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eand one more similar warning elsewhere\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e「nameは廃止予定だから、データベース名の指定はdb_nameを使用するように！」とのこと。\u003c/p\u003e\n\u003cp\u003eコピペして作っているので、こういうWarningが表示されたんだと思います。\u003c/p\u003e\n\u003cp\u003e解決策は上記のメッセージにあるように、nameではなく、db_nameを使用します。\u003c/p\u003e\n\u003ch2 id=\"参考発生したバージョン\"\u003e参考：発生したバージョン\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考発生したバージョン\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e発生したのは以下のバージョンです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ terraform -v\nTerraform v1.4.4\non linux_amd64\n+ provider registry.terraform.io/hashicorp/aws v4.62.0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"事象# terraformでRDSを構築しているときに、以下のwarningが表示されました。 ╷ │ Warning: Argument is deprecated │ │ with aws_db_instance.test-db, │ on sample.tf line 80, in resource \"aws_db_instance\" \"test-db\": │ 80: name = \"datestdb\" │ │ Use db_name instead │ │ (and one more similar warning elsewhere) 「nameは廃止予定だから、データベース名の指定はdb_nameを使用するように！」とのこと。 コピペして作っているので、こういうWarningが表示されたんだと思います。 解決策は上記のメッセージにあるように、nameではなく、db_nameを使用します。 参考：発生したバージョン# 発生したのは以下のバージョンです。 $ terraform -v Terraform v1.4.4 on linux_amd64 + provider registry.terraform.io/hashicorp/aws v4.62.0 微信 支付宝","scraped_at":"2025-07-12T21:19:58.121877514+09:00","word_count":57,"content_hash":"cbf3313d862bfa567a8b7751a7fe895e"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/aws-cli-install-ubuntu2204/","title":"Ubuntu22.04にaws-cliをインストールする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eUbuntu22.04にterraformを導入して、AWSの環境を自動構築しようと試みました。\u003c/p\u003e\n\u003cp\u003eterraformを使用するのですが、aws-cliを入れておくと色々と便利です。メモとしてインストール手順を記録します。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"インストール\"\u003eインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#インストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eインストールはとても簡単です。\u003c/p\u003e\n\u003cp\u003e以下の公式のページに表示されているコマンドをそのまま投入するだけです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/getting-started-install.html\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eAWS CLI の最新バージョンをインストールまたは更新します。 - AWS Command Line Interface\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e実際に投入したコマンドは以下です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecurl \u003cspan style=\"color:#48b685\"\u003e\u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34;\u003c/span\u003e -o \u003cspan style=\"color:#48b685\"\u003e\u0026#34;awscliv2.zip\u0026#34;\u003c/span\u003e\nunzip awscliv2.zip\nsudo ./aws/install\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"インストールバージョンの確認\"\u003eインストールバージョンの確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#インストールバージョンの確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eバージョンを確認します。\u003ccode\u003eaws-cli/2.11.10\u003c/code\u003eを確認できます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e$ aws --version\naws-cli/2.11.10 Python/3.11.2 Linux/5.15.0-58-generic exe/x86_64.ubuntu.22 prompt/off\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"aws-cliの設定\"\u003eaws-cliの設定\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#aws-cliの設定\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eAWS Access Key ID\u003c/code\u003eと\u003ccode\u003eAWS Secret Access Key\u003c/code\u003eを設定します。合わせて、デフォルトのリージョンなども設定します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ aws configure\nAWS Access Key ID \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003eNone\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e: AAAAAAA\nAWS Secret Access Key \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003eNone\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e: idzN2v+L0XkVF/WdHYqN5ertx+fiJBeHaaAAaaAAaaAAA\nDefault region name \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003eNone\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e: ap-northeast-1\nDefault output format \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003eNone\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e: json\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"aws-cliを使用できるかの確認\"\u003eaws-cliを使用できるかの確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#aws-cliを使用できるかの確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e私はだいたいS3のディレクトリ（というか、オブジェクト）を参照することが多いです。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eaws s3 ls\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e私の場合は以下の出力結果となります。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2019-12-08 12:37:40 radio-transcribe\u003c/code\u003e\u003c/pre\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# Ubuntu22.04にterraformを導入して、AWSの環境を自動構築しようと試みました。 terraformを使用するのですが、aws-cliを入れておくと色々と便利です。メモとしてインストール手順を記録します。 手順# インストール# インストールはとても簡単です。 以下の公式のページに表示されているコマンドをそのまま投入するだけです。 AWS CLI の最新バージョンをインストールまたは更新します。 - AWS Command Line Interface 実際に投入したコマンドは以下です。 curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" unzip awscliv2.zip sudo ./aws/install インストールバージョンの確認# バージョンを確認します。aws-cli/2.11.10を確認できます。 $ aws --version aws-cli/2.11.10 Python/3.11.2 Linux/5.15.0-58-generic exe/x86_64.ubuntu.22 prompt/off aws-cliの設定# AWS Access Key IDとAWS Secret Access Keyを設定します。合わせて、デフォルトのリージョンなども設定します。 $ aws configure AWS Access Key ID [None]: AAAAAAA AWS Secret Access Key [None]: idzN2v+L0XkVF/WdHYqN5ertx+fiJBeHaaAAaaAAaaAAA Default region name [None]: ap-northeast-1 Default output format [None]: json aws-cliを使用できるかの確認# 私はだいたいS3のディレクトリ（というか、オブジェクト）を参照することが多いです。 aws s3 ls 私の場合は以下の出力結果となります。 2019-12-08 12:37:40 radio-transcribe 微信 支付宝","scraped_at":"2025-07-12T21:20:02.230071465+09:00","word_count":78,"content_hash":"03ce661fa087caae92a460c3850ea746"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/terraform-install-buntu2204/","title":"Ubuntu22.04にterraformをインストールする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eUbuntu22.04にterraformを導入して、AWSの環境を自動構築しようと試みました。\u003c/p\u003e\n\u003cp\u003eterraformはCentOS7.4に導入して使用していました。なので、terraformの使用ははじめてではないです。とはいうものの、Ubuntu22.04へのインストールははじめてでした。\u003c/p\u003e\n\u003cp\u003eというわけで、メモ的に記録します。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eインストールはとても簡単です。\u003c/p\u003e\n\u003ch3 id=\"インストール\"\u003eインストール\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#インストール\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下の公式のページに表示されているコマンドをそのまま投入するだけです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://developer.hashicorp.com/terraform/downloads\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eInstall | Terraform | HashiCorp Developer\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e実際に投入したコマンドは以下です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \u003cspan style=\"color:#48b685\"\u003e\u0026#34;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com \u003c/span\u003e\u003cspan style=\"color:#815ba4\"\u003e$(\u003c/span\u003elsb_release -cs\u003cspan style=\"color:#815ba4\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e main\u0026#34;\u003c/span\u003e | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo apt install terraform\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"インストールバージョンの確認\"\u003eインストールバージョンの確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#インストールバージョンの確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eバージョンを確認します。\u003ccode\u003eTerraform v1.4.4\u003c/code\u003eを確認できます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eterraform -v\nTerraform v1.4.4\non linux_amd64\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# Ubuntu22.04にterraformを導入して、AWSの環境を自動構築しようと試みました。 terraformはCentOS7.4に導入して使用していました。なので、terraformの使用ははじめてではないです。とはいうものの、Ubuntu22.04へのインストールははじめてでした。 というわけで、メモ的に記録します。 手順# インストールはとても簡単です。 インストール# 以下の公式のページに表示されているコマンドをそのまま投入するだけです。 Install | Terraform | HashiCorp Developer 実際に投入したコマンドは以下です。 wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list sudo apt update \u0026\u0026 sudo apt install terraform インストールバージョンの確認# バージョンを確認します。Terraform v1.4.4を確認できます。 terraform -v Terraform v1.4.4 on linux_amd64 微信 支付宝","scraped_at":"2025-07-12T21:20:04.523070937+09:00","word_count":54,"content_hash":"bd4628c188e7a55bb6714de5f6697c50"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/use-markdown-link-check-for-movabletyep/","title":"markdownのリンクチェックツールはmovabletypeでも使用できそう","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003cp\u003e以下で使用できるはず。というか、できたっぽい。\u003c/p\u003e\n\u003cp\u003e-vは詳細表示。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker run -v \u003cspan style=\"color:#f99b15\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003ePWD\u003c/span\u003e\u003cspan style=\"color:#f99b15\"\u003e}\u003c/span\u003e:/tmp:ro --rm -i ghcr.io/tcort/markdown-link-check:stable /tmp/202303_export.txt -v\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e細かいオプションは以下のリポジトリにあるREADMEを参照。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/tcort/markdown-link-check\"\u003ehttps://github.com/tcort/markdown-link-check\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"以下で使用できるはず。というか、できたっぽい。 -vは詳細表示。 docker run -v ${PWD}:/tmp:ro --rm -i ghcr.io/tcort/markdown-link-check:stable /tmp/202303_export.txt -v 細かいオプションは以下のリポジトリにあるREADMEを参照。 https://github.com/tcort/markdown-link-check 微信 支付宝","scraped_at":"2025-07-12T21:20:05.149014203+09:00","word_count":15,"content_hash":"9330b4293b414bb3dff21abf44d600b4"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/public-key_ssh_ubuntu/","title":"Ubuntuに公開鍵暗号方式でsshする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eUbuntu22.04に対して公開鍵暗号方式でsshしたいというリクエストありました。\u003c/p\u003e\n\u003cp\u003eその手順を調べたので、以下に記録します。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"公開鍵暗号方式の有効化\"\u003e公開鍵暗号方式の有効化\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#公開鍵暗号方式の有効化\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下を編集する。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo vi /etc/ssh/sshd_config\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e有効にする。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ePubkeyAuthentication yes\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e構文をチェック\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo /usr/sbin/sshd -t\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003esudoをつけないと、以下のようなメッセージが出力される場合がある。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esshd: no hostkeys available -- exiting.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"鍵の生成\"\u003e鍵の生成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#鍵の生成\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh-keygen -t ed25519\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のようなメッセージが出力されて、パスフレーズなどを聞かれるが、パスフレーズは入れない。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eGenerating public/private ed25519 key pair.\nEnter file in which to save the key \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e/home/ubuntu/.ssh/id_ed25519\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \nCreated directory \u003cspan style=\"color:#48b685\"\u003e\u0026#39;/home/ubuntu/.ssh\u0026#39;\u003c/span\u003e.\nEnter passphrase \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eempty \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e no passphrase\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \nEnter same passphrase again: \nYour identification has been saved in /home/ubuntu/.ssh/id_ed25519\nYour public key has been saved in /home/ubuntu/.ssh/id_ed25519.pub\nThe key fingerprint is:\nSHA256:KLWc+MfNKWklZl8LAP29dbFj0XQHVHJg8wyBbHNTZ7o ubuntu@ik1-338-29121\nThe key\u003cspan style=\"color:#ef6155\"\u003e\u0026#39;\u003c/span\u003es randomart image is:\n+--\u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003eED25519 256\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e--+\n|      ..   . oXB@|\n|       ..   \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e.o%\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e|\n|      . .. o o..*|\n|     + + .. . .\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e.|\n|    \u003cspan style=\"color:#ef6155\"\u003eo\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e S o .oE..|\n|     o + B +..   |\n|      . * \u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e .    |\n|       o .       |\n|                 |\n+----\u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003eSHA256\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e-----+\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"authorized_keysの作成\"\u003eauthorized_keysの作成\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#authorized_keysの作成\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecd .ssh\ncp id_ed25519.pub authorized_keys\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e秘密鍵をダウンロード\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003escp ubuntu@ik1-338-29121.vs.sakura.ne.jp:/home/ubuntu/.ssh/id_ed25519 ./\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"sshd_configの編集\"\u003esshd_configの編集\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#sshd_configの編集\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo vi /etc/ssh/sshd_config\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のコメントを外す。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eHostKey /etc/ssh/ssh_host_ed25519_key\n\nPasswordAuthentication no\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"構文チェック\"\u003e構文チェック\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#構文チェック\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo /usr/sbin/sshd -t\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"sshdの再起動\"\u003esshdの再起動\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#sshdの再起動\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo service ssh restart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"ログイン確認\"\u003eログイン確認\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ログイン確認\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh ubuntu@ik1-338-29121.vs.sakura.ne.jp -i ./id_ed25519 \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# Ubuntu22.04に対して公開鍵暗号方式でsshしたいというリクエストありました。 その手順を調べたので、以下に記録します。 手順# 公開鍵暗号方式の有効化# 以下を編集する。 sudo vi /etc/ssh/sshd_config 有効にする。 PubkeyAuthentication yes 構文をチェック sudo /usr/sbin/sshd -t sudoをつけないと、以下のようなメッセージが出力される場合がある。 sshd: no hostkeys available -- exiting. 鍵の生成# ssh-keygen -t ed25519 以下のようなメッセージが出力されて、パスフレーズなどを聞かれるが、パスフレーズは入れない。 Generating public/private ed25519 key pair. Enter file in which to save the key (/home/ubuntu/.ssh/id_ed25519): Created directory '/home/ubuntu/.ssh'. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/ubuntu/.ssh/id_ed25519 Your public key has been saved in /home/ubuntu/.ssh/id_ed25519.pub The key fingerprint is: SHA256:KLWc+MfNKWklZl8LAP29dbFj0XQHVHJg8wyBbHNTZ7o ubuntu@ik1-338-29121 The key's randomart image is: +--[ED25519 256]--+ | .. . oXB@| | .. =.o%=| | . .. o o..*| | + + .. . .=.| | o = S o .oE..| | o + B +.. | | . * = . | | o . | | | +----[SHA256]-----+ authorized_keysの作成# cd .ssh cp id_ed25519.pub authorized_keys 秘密鍵をダウンロード scp ubuntu@ik1-338-29121.vs.sakura.ne.jp:/home/ubuntu/.ssh/id_ed25519 ./ sshd_configの編集# sudo vi /etc/ssh/sshd_config 以下のコメントを外す。 HostKey /etc/ssh/ssh_host_ed25519_key PasswordAuthentication no 構文チェック# sudo /usr/sbin/sshd -t sshdの再起動# sudo service ssh restart ログイン確認# ssh ubuntu@ik1-338-29121.vs.sakura.ne.jp -i ./id_ed25519 微信 支付宝","scraped_at":"2025-07-12T21:20:07.7009005+09:00","word_count":161,"content_hash":"f73359b895005affb9cae9c9906cc56b"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/livedoor-blog-to-wordpress/","title":"LivedoorブログからWordPressへの引っ越しメモ","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eライブドアブログからWordPressへのデータ移行を依頼されました。\u003c/p\u003e\n\u003cp\u003e何年か前に実施したことがありました。そのときはFTPを使用できたので、画像ファイルの移行もやりやすかったのですが、今はFTPを利用できないのでちょっと苦戦しました。\u003c/p\u003e\n\u003cp\u003eそんな苦戦したことをメモします。\u003c/p\u003e\n\u003ch2 id=\"考え方\"\u003e考え方\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#考え方\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch2 id=\"ローカルで検証\"\u003eローカルで検証\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ローカルで検証\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e基本的なことですが、ローカル環境で検証してから本番環境に適用が必須です。\u003c/p\u003e\n\u003ch3 id=\"記事\"\u003e記事\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#記事\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eライブドアブログは無料でもMovableTypeの形式でエクスポートできます。なので、記事はWordPressにインポートすればよいです。\u003c/p\u003e\n\u003cp\u003eただ、1行が長いので、確実にインポートされるようにプラグインのカスタマイズは必要です。\u003c/p\u003e\n\u003ch3 id=\"画像\"\u003e画像\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#画像\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eひと手間かけるのは画像の移行です。\u003c/p\u003e\n\u003cp\u003eエクスポートファイルから画像のURLを抽出して、ローカルにダウンロードが必要です。\u003c/p\u003e\n\u003cp\u003eblogパーツはライブドアの資産なので移行できません。\u003c/p\u003e\n\u003ch2 id=\"画像のダウンロード\"\u003e画像のダウンロード\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#画像のダウンロード\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eエクスポートファイルから検索で以下を抽出します。\u003c/p\u003e\n\u003cp\u003e以下はhttpsとしていますが、長いこと書いているブログはhttpの場合もあるので注意が必要です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ehttps://livedoor.blogimg.jp/ブログID/imgs\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e抽出したURLの一覧をirvineに食わせます。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://forest.watch.impress.co.jp/library/software/irvine/\"\u003ehttps://forest.watch.impress.co.jp/library/software/irvine/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eこのとき、画像ファイルの階層構造はキープしたままにします。そうすることで、画像URLの置換がやりやすくなります。\u003c/p\u003e\n\u003cp\u003eあとは、画像の内部リンクを変更します。\u003c/p\u003e\n\u003cp\u003eインポート後はリンクチェックをかけることが大事です。\u003c/p\u003e\n\u003ch2 id=\"記事の内部リンク変更\"\u003e記事の内部リンク変更\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#記事の内部リンク変更\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e記事は8桁数字.htmlで表現されます。そのため、以下で検索します。\u003c/p\u003e\n\u003cp\u003eちなみに、httpとhttpsの両方で検索することは大事です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e(http|https)://blog.livedoor.jp/avianwing/archives/([0-9]{8}.html)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eで、検証環境だったら以下のように置換します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ehttp://192.168.1.49:8081/archives/$2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eたまに日付に対してリンクしている場合があるので、その場合は手で変更するのが早いです。\u003c/p\u003e\n\u003cp\u003eこのパターンがいいかも。検索ワード。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e(http|https)://blog.livedoor.jp/avianwing/archives/(.+?.html)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e置換後。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ehttp://192.168.1.49:8081/archives/$2\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# ライブドアブログからWordPressへのデータ移行を依頼されました。 何年か前に実施したことがありました。そのときはFTPを使用できたので、画像ファイルの移行もやりやすかったのですが、今はFTPを利用できないのでちょっと苦戦しました。 そんな苦戦したことをメモします。 考え方# ローカルで検証# 基本的なことですが、ローカル環境で検証してから本番環境に適用が必須です。 記事# ライブドアブログは無料でもMovableTypeの形式でエクスポートできます。なので、記事はWordPressにインポートすればよいです。 ただ、1行が長いので、確実にインポートされるようにプラグインのカスタマイズは必要です。 画像# ひと手間かけるのは画像の移行です。 エクスポートファイルから画像のURLを抽出して、ローカルにダウンロードが必要です。 blogパーツはライブドアの資産なので移行できません。 画像のダウンロード# エクスポートファイルから検索で以下を抽出します。 以下はhttpsとしていますが、長いこと書いているブログはhttpの場合もあるので注意が必要です。 https://livedoor.blogimg.jp/ブログID/imgs 抽出したURLの一覧をirvineに食わせます。 https://forest.watch.impress.co.jp/library/software/irvine/ このとき、画像ファイルの階層構造はキープしたままにします。そうすることで、画像URLの置換がやりやすくなります。 あとは、画像の内部リンクを変更します。 インポート後はリンクチェックをかけることが大事です。 記事の内部リンク変更# 記事は8桁数字.htmlで表現されます。そのため、以下で検索します。 ちなみに、httpとhttpsの両方で検索することは大事です。 (http|https)://blog.livedoor.jp/avianwing/archives/([0-9]{8}.html) で、検証環境だったら以下のように置換します。 http://192.168.1.49:8081/archives/$2 たまに日付に対してリンクしている場合があるので、その場合は手で変更するのが早いです。 このパターンがいいかも。検索ワード。 (http|https)://blog.livedoor.jp/avianwing/archives/(.+?.html) 置換後。 http://192.168.1.49:8081/archives/$2 微信 支付宝","scraped_at":"2025-07-12T21:20:09.986779662+09:00","word_count":36,"content_hash":"06ebd64a2a517d3b92113307145610f4"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/kibana-file-import-size/","title":"Kibanaのファイルインポートのサイズ上限を1GBにする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n\n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eKibanaを使って簡単に分析したい場合、少しだけ分析してみたいんだけど設定するのが面倒っていう時があります。そういう場合は、手っ取り早くファイルをインポートすることが多いと思います。インポートすると、そのファイルを解析してそれなりのデータに加工してくれるのでありがたいです。\u003c/p\u003e\n\u003cp\u003eただ、インポートファイルサイズのデフォルトは100MBと小さいです。\u003c/p\u003e\n\u003cp\u003eどうやって変更するのか、いつも検索しているので自分の記録として書いておきます。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eメニューのManagementにあるStack Managementを選択。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eAdvanced SettingにMaximum file upload sizeがあるので、これを変更します。1GBと直接記入するスタイルです。\u003c/p\u003e\n\u003cp\u003eただ、10GBとか入れても設定はされてしまうんですよね。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# Kibanaを使って簡単に分析したい場合、少しだけ分析してみたいんだけど設定するのが面倒っていう時があります。そういう場合は、手っ取り早くファイルをインポートすることが多いと思います。インポートすると、そのファイルを解析してそれなりのデータに加工してくれるのでありがたいです。 ただ、インポートファイルサイズのデフォルトは100MBと小さいです。 どうやって変更するのか、いつも検索しているので自分の記録として書いておきます。 手順# メニューのManagementにあるStack Managementを選択。 Advanced SettingにMaximum file upload sizeがあるので、これを変更します。1GBと直接記入するスタイルです。 ただ、10GBとか入れても設定はされてしまうんですよね。 微信 支付宝","scraped_at":"2025-07-12T21:20:12.278259253+09:00","word_count":15,"content_hash":"48b411ad72e4e9a71e463a3808be9d15"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/github-actions-secrets/","title":"GitHub ActionsのSECRETSを設定する方法 SECRETSの設定手順#","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch1 id=\"secretsの設定手順\"\u003eSECRETSの設定手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#secretsの設定手順\"\u003e#\u003c/a\u003e\u003c/h1\u003e\n\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHub Actionsは秘密鍵やパスフレーズのようにコードに書きたくない値を環境定義として登録し、GitHub Actionsを起動する際にそれを読み出すことができます。\u003c/p\u003e\n\u003cp\u003eリポジトリの所有者でないと操作できないようなので、ここに手順を示します。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eリポジトリのSettings \u0026gt; Actionsを選択。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e緑色の[New repository secret]を押す。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003ePORTの場合を例にすると、以下のように入力する。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e「Name」欄：PORT（大文字で記入）\u003c/li\u003e\n\u003cli\u003e「Secret」欄：ポート番号を記入（ここでは仮の1234を入力）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"03.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e秘密鍵の場合は以下のように「Secret」欄には秘密鍵の内容を丸ごとコピーする。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"04.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"最終的な状態\"\u003e最終的な状態\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#最終的な状態\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e最終的には以下のように4つの項目が設定されていればOKです。\u003c/p\u003e\n\u003cp\u003eまた、この作業はmars_g_aとmars_g_cの両方のリポジトリに実施してください。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"SECRETSの設定手順# 背景# GitHub Actionsは秘密鍵やパスフレーズのようにコードに書きたくない値を環境定義として登録し、GitHub Actionsを起動する際にそれを読み出すことができます。 リポジトリの所有者でないと操作できないようなので、ここに手順を示します。 手順# リポジトリのSettings \u003e Actionsを選択。 緑色の[New repository secret]を押す。 PORTの場合を例にすると、以下のように入力する。 「Name」欄：PORT（大文字で記入） 「Secret」欄：ポート番号を記入（ここでは仮の1234を入力） 秘密鍵の場合は以下のように「Secret」欄には秘密鍵の内容を丸ごとコピーする。 最終的な状態# 最終的には以下のように4つの項目が設定されていればOKです。 また、この作業はmars_g_aとmars_g_cの両方のリポジトリに実施してください。 微信 支付宝","scraped_at":"2025-07-12T21:20:14.322942623+09:00","word_count":22,"content_hash":"18ce87e0061162d31b64b74b41574b8c"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/cant_read_ansible_cfg_because_permission/","title":"ansibleのansible.cfgはディレクトリのパーミッションが原因で読み込みされない","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eansible-playbookを実行したら、以下のメッセージが出力されました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e[WARNING]: Ansible is being run in a world writable directory (/ansible), ignoring it as an ansible.cfg source. For more\ninformation see https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e直訳すると以下のような感じ。\u003c/p\u003e\n\u003cp\u003e「Ansibleは、誰でも書き込み可能なディレクトリ (/ansible) で実行されており、それを ansible.cfg ソースとして無視しています。」\u003c/p\u003e\n\u003ch2 id=\"対処\"\u003e対処\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対処\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eansible.cfgを格納しているディレクトリのパーミッションが\u003ccode\u003e777\u003c/code\u003eでした。\u003c/p\u003e\n\u003cp\u003e試しに\u003ccode\u003e775\u003c/code\u003eに変更してみました。そしたら何事もなかったかのように動くようになりました。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# ansible-playbookを実行したら、以下のメッセージが出力されました。 [WARNING]: Ansible is being run in a world writable directory (/ansible), ignoring it as an ansible.cfg source. For more information see https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir 直訳すると以下のような感じ。 「Ansibleは、誰でも書き込み可能なディレクトリ (/ansible) で実行されており、それを ansible.cfg ソースとして無視しています。」 対処# ansible.cfgを格納しているディレクトリのパーミッションが777でした。 試しに775に変更してみました。そしたら何事もなかったかのように動くようになりました。 微信 支付宝","scraped_at":"2025-07-12T21:20:15.981928256+09:00","word_count":35,"content_hash":"25cb0166c7cbe0275cd94ad983f5f6a9"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/switchbot-prometheus-exporter/","title":"SwitchBotの温度と湿度をGrafanaで表示させてみた","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003cp\u003eSwitchBotで取得した温度と湿度を表示したので、その方法を記録します。\u003c/p\u003e\n\u003cp\u003ePrometheusもGrafanaも「あー、こういうものね。」とそのプロダクトの位置づけみたいなのはなんとなく理解できます。が、実際に使ってみて感覚的にわかることがあるので、実装して使ってみることが大事ですね。\u003c/p\u003e\n\u003ch2 id=\"exporter\"\u003eExporter\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#exporter\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のExporterを使用しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Azuki-bar/switchbot-prometheus-exporter\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eAzuki-bar/switchbot-prometheus-exporter: Exports Tempreture and Humidity collect from SwitchBot API.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eこれをそのまま起動しても動作しません。READMEを参照すると、環境設定が必要とのことだったので、とりあえず使えればいいかと思いコードを直接書き換えました。\u003c/p\u003e\n\u003ch2 id=\"docker-composeで起動\"\u003edocker composeで起動\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#docker-composeで起動\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eさらに、dockerで動かしたかったのでリポジトリにあったDockerfileを使用しました。\u003c/p\u003e\n\u003cp\u003e動いたことを確認したら、ゆくゆくはPrometheusとGrafanaのdocker-composeで動かしたかったのでまずは単独のyamlを書きました。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://blog.web-apps.tech/switchbot-exporter/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eswitchbot-exporterを書いた | something tech.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://amateur-engineer-blog.com/grafana-prometheus-dashboard/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eローカルでPrometheusとGrafanaでダッシュボード作成してみる | amateur engineer’s blog\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://toritakashi.com/archives/2388\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eDocker×Grafana×Prometheusで自宅サーバ監視～NginxでのSSLリバースプロキシを添えて～\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zenn.dev/ks6088ts/articles/20210328-example-monitoring-system\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003ePrometheus と Alertmanager によるモニタリングシステム入門\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://qiita.com/samskeyti/items/fbe8b78e47a5e4d6842a\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eDockerでPrometheus, Grafana, Alertmanagerを動かす - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"SwitchBotで取得した温度と湿度を表示したので、その方法を記録します。 PrometheusもGrafanaも「あー、こういうものね。」とそのプロダクトの位置づけみたいなのはなんとなく理解できます。が、実際に使ってみて感覚的にわかることがあるので、実装して使ってみることが大事ですね。 Exporter# 以下のExporterを使用しました。 Azuki-bar/switchbot-prometheus-exporter: Exports Tempreture and Humidity collect from SwitchBot API. これをそのまま起動しても動作しません。READMEを参照すると、環境設定が必要とのことだったので、とりあえず使えればいいかと思いコードを直接書き換えました。 docker composeで起動# さらに、dockerで動かしたかったのでリポジトリにあったDockerfileを使用しました。 動いたことを確認したら、ゆくゆくはPrometheusとGrafanaのdocker-composeで動かしたかったのでまずは単独のyamlを書きました。 参考# switchbot-exporterを書いた | something tech. ローカルでPrometheusとGrafanaでダッシュボード作成してみる | amateur engineer’s blog Docker×Grafana×Prometheusで自宅サーバ監視～NginxでのSSLリバースプロキシを添えて～ Prometheus と Alertmanager によるモニタリングシステム入門 DockerでPrometheus, Grafana, Alertmanagerを動かす - Qiita 微信 支付宝","scraped_at":"2025-07-12T21:20:23.511921546+09:00","word_count":40,"content_hash":"8913f5060ffb113355ee247c598e461e"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/nslookup/","title":"nslookupやdigでネームサーバーを指定する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eDNSの設定をすると、浸透するまでに時間がかかります。\u003c/p\u003e\n\u003cp\u003eちゃんと設定ができているかできるだけ近いネームサーバーに問い合わせしたいのが人情です。\u003c/p\u003e\n\u003cp\u003eそんな時、2回ぐらい調べたので記録しておきます。\u003c/p\u003e\n\u003ch2 id=\"引数のdnsサーバを記述する\"\u003e引数のDNSサーバを記述する\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#引数のdnsサーバを記述する\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e使い方は以下のように2つ目の引数にネームサーバーを追記するだけです。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ nslookup amazon.co.jp 8.8.8.8\nServer:\t\t8.8.8.8\nAddress:\t8.8.8.8#53\n\nNon-authoritative answer:\nName:\tamazon.co.jp\nAddress: 52.119.168.48\nName:\tamazon.co.jp\nAddress: 52.119.164.121\nName:\tamazon.co.jp\nAddress: 52.119.161.5\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003edigの場合は2つ目の引数にネームサーバーなのだけど、その前に「@」を付与する。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ dig amazon.co.jp @8.8.8.8\n\n; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.18.1-1ubuntu1.2-Ubuntu \u0026lt;\u0026lt;\u0026gt;\u0026gt; amazon.co.jp @8.8.8.8\n;; global options: +cmd\n;; Got answer:\n;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 41036\n;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 512\n;; QUESTION SECTION:\n;amazon.co.jp.\t\t\tIN\tA\n\n;; ANSWER SECTION:\namazon.co.jp.\t\t56\tIN\tA\t52.119.164.121\namazon.co.jp.\t\t56\tIN\tA\t52.119.161.5\namazon.co.jp.\t\t56\tIN\tA\t52.119.168.48\n\n;; Query time: 8 msec\n;; SERVER: 8.8.8.8#53(8.8.8.8) (UDP)\n;; WHEN: Sun Jan 15 21:16:37 JST 2023\n;; MSG SIZE  rcvd: 89\n\u003c/code\u003e\u003c/pre\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# DNSの設定をすると、浸透するまでに時間がかかります。 ちゃんと設定ができているかできるだけ近いネームサーバーに問い合わせしたいのが人情です。 そんな時、2回ぐらい調べたので記録しておきます。 引数のDNSサーバを記述する# 使い方は以下のように2つ目の引数にネームサーバーを追記するだけです。 $ nslookup amazon.co.jp 8.8.8.8 Server: 8.8.8.8 Address: 8.8.8.8#53 Non-authoritative answer: Name: amazon.co.jp Address: 52.119.168.48 Name: amazon.co.jp Address: 52.119.164.121 Name: amazon.co.jp Address: 52.119.161.5 digの場合は2つ目の引数にネームサーバーなのだけど、その前に「@」を付与する。 $ dig amazon.co.jp @8.8.8.8 ; \u003c\u003c\u003e\u003e DiG 9.18.1-1ubuntu1.2-Ubuntu \u003c\u003c\u003e\u003e amazon.co.jp @8.8.8.8 ;; global options: +cmd ;; Got answer: ;; -\u003e\u003eHEADER\u003c\u003c- opcode: QUERY, status: NOERROR, id: 41036 ;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 512 ;; QUESTION SECTION: ;amazon.co.jp. IN A ;; ANSWER SECTION: amazon.co.jp. 56 IN A 52.119.164.121 amazon.co.jp. 56 IN A 52.119.161.5 amazon.co.jp. 56 IN A 52.119.168.48 ;; Query time: 8 msec ;; SERVER: 8.8.8.8#53(8.8.8.8) (UDP) ;; WHEN: Sun Jan 15 21:16:37 JST 2023 ;; MSG SIZE rcvd: 89 微信 支付宝","scraped_at":"2025-07-12T21:20:25.799029416+09:00","word_count":126,"content_hash":"0f5c457bda1eb34d2f97f4f2177f2bd9"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/switchbot-ondo-shitudo/","title":"SwitchBotの音湿度計をAPIで使用する","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSwitchBot機器のAPIを使うためには「認証用トークン」と「DeviceID」を取得する必要があります。\u003c/p\u003e\n\u003cp\u003eスマートフォンのSwitchBotアプリからまずは認証用トークンとクライアントシークレットを取得します\u003c/p\u003e\n\u003cp\u003eアプリを開き「プロフィール＞設定\u0026gt;開発者向けオプション」で取得できます。\u003c/p\u003e\n\u003cp\u003eとはいうものの、そのままだと表示されないので、「アプリバージョン」を10回タップして「開発者向けオプション」を表示します。（ファミコン時代の隠しコマンドっぽい。）\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"SwitchBot.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"デバイス一\"\u003eデバイス一\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#デバイス一\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ecurl --request GET \u0026#39;https://api.switch-bot.com/v1.0/devices\u0026#39; \\\n  --header \u0026#39;Authorization: 認証用トークン\u0026#39;\\\n  --header \u0026#39;Content-Type: application/json; charset=utf8\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のように出力されます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e  {\u0026#34;statusCode\u0026#34;:100,\u0026#34;body\u0026#34;:{\u0026#34;deviceList\u0026#34;:[{\u0026#34;deviceId\u0026#34;:\u0026#34;xxxxxxx\u0026#34;,\u0026#34;deviceName\u0026#34;:\u0026#34;温湿度計プラス AB\u0026#34;,\u0026#34;deviceType\u0026#34;:\u0026#34;MeterPlus\u0026#34;,\u0026#34;enableCloudService\u0026#34;:true,\u0026#34;hubDeviceId\u0026#34;:\u0026#34;xxxxxxx\u0026#34;},{\u0026#34;deviceId\u0026#34;:\u0026#34;xxxxxxx\u0026#34;,\u0026#34;deviceName\u0026#34;:\u0026#34;ハブミニ 22\u0026#34;,\u0026#34;deviceType\u0026#34;:\u0026#34;Hub Mini\u0026#34;,\u0026#34;hubDeviceId\u0026#34;:\u0026#34;000000000000\u0026#34;}],\u0026#34;infraredRemoteList\u0026#34;:[{\u0026#34;deviceId\u0026#34;:\u0026#34;xxxxxxx\u0026#34;,\u0026#34;deviceName\u0026#34;:\u0026#34;tv\u0026#34;,\u0026#34;remoteType\u0026#34;:\u0026#34;TV\u0026#34;,\u0026#34;hubDeviceId\u0026#34;:\u0026#34;xxxxxxx\u0026#34;},{\u0026#34;deviceId\u0026#34;:\u0026#34;xxxxxxx\u0026#34;,\u0026#34;deviceName\u0026#34;:\u0026#34;ライト\u0026#34;,\u0026#34;remoteType\u0026#34;:\u0026#34;DIY Light\u0026#34;,\u0026#34;hubDeviceId\u0026#34;:\u0026#34;FD087CB12D22\u0026#34;}]},\u0026#34;message\u0026#34;:\u0026#34;success\u0026#34;}yamadatt@ubuntu2204:~/git/hugo-luna$ \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下で対象のデバイスから情報を出力。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  curl -X GET -H \u0026#34;Authorization: 認証用トークン\u0026#34; https://api.switch-bot.com/v1.0/devices/対象のdeviceId/status | jq .\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e以下のように出力されます。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  \u0026#34;statusCode\u0026#34;: 100,\n  \u0026#34;body\u0026#34;: {\n    \u0026#34;deviceId\u0026#34;: \u0026#34;D66D086FC8AB\u0026#34;,\n    \u0026#34;deviceType\u0026#34;: \u0026#34;MeterPlus\u0026#34;,\n    \u0026#34;hubDeviceId\u0026#34;: \u0026#34;FD087CB12D22\u0026#34;,\n    \u0026#34;humidity\u0026#34;: 59,\n    \u0026#34;temperature\u0026#34;: 15.5\n  },\n  \u0026#34;message\u0026#34;: \u0026#34;success\u0026#34;\n}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"制約\"\u003e制約\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#制約\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e1日あたり1万回の制約があります。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/OpenWonderLabs/SwitchBotAPI\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eOpenWonderLabs/SwitchBotAPI: SwitchBot Open API Documents\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e以下の記述があるので、毎分取得ぐらいなら影響はなさそう。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRequest limit\nThe amount of API calls per day is limited to 10000 times. Going over that limit will return “Unauthorized.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eこれを使った。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Azuki-bar/switchbot-prometheus-exporter\"\u003ehttps://github.com/Azuki-bar/switchbot-prometheus-exporter\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# SwitchBot機器のAPIを使うためには「認証用トークン」と「DeviceID」を取得する必要があります。 スマートフォンのSwitchBotアプリからまずは認証用トークンとクライアントシークレットを取得します アプリを開き「プロフィール＞設定\u003e開発者向けオプション」で取得できます。 とはいうものの、そのままだと表示されないので、「アプリバージョン」を10回タップして「開発者向けオプション」を表示します。（ファミコン時代の隠しコマンドっぽい。） 手順# デバイス一# curl --request GET 'https://api.switch-bot.com/v1.0/devices' \\ --header 'Authorization: 認証用トークン'\\ --header 'Content-Type: application/json; charset=utf8' 以下のように出力されます。 {\"statusCode\":100,\"body\":{\"deviceList\":[{\"deviceId\":\"xxxxxxx\",\"deviceName\":\"温湿度計プラス AB\",\"deviceType\":\"MeterPlus\",\"enableCloudService\":true,\"hubDeviceId\":\"xxxxxxx\"},{\"deviceId\":\"xxxxxxx\",\"deviceName\":\"ハブミニ 22\",\"deviceType\":\"Hub Mini\",\"hubDeviceId\":\"000000000000\"}],\"infraredRemoteList\":[{\"deviceId\":\"xxxxxxx\",\"deviceName\":\"tv\",\"remoteType\":\"TV\",\"hubDeviceId\":\"xxxxxxx\"},{\"deviceId\":\"xxxxxxx\",\"deviceName\":\"ライト\",\"remoteType\":\"DIY Light\",\"hubDeviceId\":\"FD087CB12D22\"}]},\"message\":\"success\"}yamadatt@ubuntu2204:~/git/hugo-luna$ 以下で対象のデバイスから情報を出力。 curl -X GET -H \"Authorization: 認証用トークン\" https://api.switch-bot.com/v1.0/devices/対象のdeviceId/status | jq . 以下のように出力されます。 { \"statusCode\": 100, \"body\": { \"deviceId\": \"D66D086FC8AB\", \"deviceType\": \"MeterPlus\", \"hubDeviceId\": \"FD087CB12D22\", \"humidity\": 59, \"temperature\": 15.5 }, \"message\": \"success\" } } 制約# 1日あたり1万回の制約があります。 OpenWonderLabs/SwitchBotAPI: SwitchBot Open API Documents 以下の記述があるので、毎分取得ぐらいなら影響はなさそう。 Request limit The amount of API calls per day is limited to 10000 times. Going over that limit will return “Unauthorized.” 参考# これを使った。 https://github.com/Azuki-bar/switchbot-prometheus-exporter 微信 支付宝","scraped_at":"2025-07-12T21:20:26.001459717+09:00","word_count":91,"content_hash":"056401c8e746b1a8a5c00586a54df2f2"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2023/openai-whisper/","title":"OpenAIのWhisperでGPUを使用した文字起こしを試行錯誤した記録","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eOpenAIがwhisperという音声認識＆文字起こししてくれるアプリケーションを公開しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/openai/whisper\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eopenai/whisper: Robust Speech Recognition via Large-Scale Weak Supervision\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e無料だし、なかなかいい感じという噂を聞いて試してみました。\u003c/p\u003e\n\u003ch2 id=\"環境はdockerで作る\"\u003e環境はDockerで作る\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#環境はdockerで作る\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eDockerで環境を構築しました。\u003c/p\u003e\n\u003cp\u003eCPUでも動くようですが、文字起こしのスピードが遅いとの記事を読みました。なので、GPUを使用する構成にしています。使用しているのは、GTX 1650のグラフィックメモリが4GBのものです。\u003c/p\u003e\n\u003cp\u003eベースイメージのPyTorch（パイトーチって読むの？）は以下のNVIDIAページを参考にしました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/running.html\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003ePyTorch Release Notes :: NVIDIA Deep Learning Frameworks Documentation\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e最終的なDockerファイルは以下です。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eFROM nvcr.io/nvidia/pytorch:22.12-py3\n\nWORKDIR /workspace\n\nENV TZ=Asia/Tokyo\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026amp;\u0026amp; echo $TZ \u0026gt; /etc/timezone\n\nRUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\\n    build-essential \\\n    gcc \\\n    git \\\n    ffmpeg \\\n    \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*\n\nRUN pip install --upgrade pip\n\nRUN pip install git+https://github.com/openai/whisper.git \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"dockerイメージのbuildでつまづいたところ\"\u003eDockerイメージのbuildでつまづいたところ\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#dockerイメージのbuildでつまづいたところ\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eDockerイメージをbuildすると、以下のメッセージでbuildが停止するという事象がありました。ユーザ側の入力を求められるようなのですが、入力しても先に進まないのです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eConfiguring tzdata\n------------------\n\nPlease select the geographic area in which you live. Subsequent configuration\nquestions will narrow this down by presenting a list of cities, representing\nthe time zones in which they are located.\n\n  1. Africa      4. Australia  7. Atlantic  10. Pacific  13. Etc\n  2. America     5. Arctic     8. Europe    11. SystemV\n  3. Antarctica  6. Asia       9. Indian    12. US\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下の記事を参考にして、対応しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://grigorkh.medium.com/fix-tzdata-hangs-docker-image-build-cdb52cc3360d\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eFix: tzdata hangs during Docker image build | by Grigor Khachatryan | Medium\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e具体的には、Dockerファイルに以下のtimezone設定を追加しました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eENV TZ=Asia/Tokyo\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026amp;\u0026amp; echo $TZ \u0026gt; /etc/timezone\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"dockerのbuildrunwhisperを使う\"\u003eDockerのbuild、run、whisperを使う\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#dockerのbuildrunwhisperを使う\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e実際に使用したコマンドです。\u003c/p\u003e\n\u003cp\u003e使いやすいようにwhisper_gpuというタグをつけてbuild。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003edocker build . -t whisper_gpu\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003erunします。落とし上げが面倒なので\u003ccode\u003e--rm\u003c/code\u003eオプションは必須です。また、execでアタッチしたいので、コンテナは\u003ccode\u003e--name whisper_gpu\u003c/code\u003eで名前指定しています。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003edocker run --rm --gpus all -it -d -v $(pwd):/workspace/ --name whisper_gpu whisper_gpu\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003edocker execでコンテナに入ります。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003edocker exec -it whisper_gpu bash\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e以下のコマンドで音声ファイルを文字起こし。\u003ccode\u003e--model\u003c/code\u003eで学習量を指定しますが、何も書かないとデフォルトの\u003ccode\u003esmall\u003c/code\u003eが指定されます。\u003c/p\u003e\n\u003cp\u003eちなみに、ffmpegを入れているので音声ファイルは\u003ccode\u003e*.m4a\u003c/code\u003eもちゃんと読み取ってくれます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ewhisper test.m4a --language ja\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eなお、以下のように\u003ccode\u003e--model large\u003c/code\u003eを指定すると2.87Gの学習をメモリに展開するようで、\u003ccode\u003etorch.cuda.OutOfMemoryError: CUDA out of memory.\u003c/code\u003eというメッセージが出力されて終了します。ビデオカードのメモリが不足しているんだと予想して諦めてます。ちなみに、\u003ccode\u003emedium\u003c/code\u003eでも同じメッセージで動きませんでした。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003ewhisper test.m4a --language ja --model large\n 18%|██████▉                               | 536M/2.87G [00:47\u0026lt;03:26, 12.2MiB/s]\n\n Traceback (most recent call last):\n  File \u0026#34;/opt/conda/bin/whisper\u0026#34;, line 8, in \u0026lt;module\u0026gt;\n    sys.exit(cli())\n  File \u0026#34;/opt/conda/lib/python3.10/site-packages/whisper/transcribe.py\u0026#34;, line 304, in cli\n    model = load_model(model_name, device=device, download_root=model_dir)\n  File \u0026#34;/opt/conda/lib/python3.10/site-packages/whisper/__init__.py\u0026#34;, line 116, in load_model\n    return model.to(device)\n  File \u0026#34;/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\u0026#34;, line 989, in to\n    return self._apply(convert)\n  File \u0026#34;/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\u0026#34;, line 641, in _apply\n    module._apply(fn)\n  File \u0026#34;/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\u0026#34;, line 641, in _apply\n    module._apply(fn)\n  File \u0026#34;/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\u0026#34;, line 641, in _apply\n    module._apply(fn)\n  [Previous line repeated 2 more times]\n  File \u0026#34;/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\u0026#34;, line 664, in _apply\n    param_applied = fn(param)\n  File \u0026#34;/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\u0026#34;, line 987, in convert\n    return t.to(device, dtype if t.is_floating_point() or t.is_complex() else None, non_blocking)\ntorch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 26.00 MiB (GPU 0; 3.82 GiB total capacity; 2.94 GiB already allocated; 19.19 MiB free; 3.20 GiB reserved in total by PyTorch) If reserved memory is \u0026gt;\u0026gt; allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"gpuの文字起こし時間\"\u003eGPUの文字起こし時間\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#gpuの文字起こし時間\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGPUを使用すると、30分の音声ファイルを文字起こしするのに約10分ぐらいです。\u003c/p\u003e\n\u003cp\u003e速い！この速度なら、十分かなと思います。\u003c/p\u003e\n\u003ch2 id=\"gpuが動いているのを感じる\"\u003eGPUが動いているのを感じる\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#gpuが動いているのを感じる\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e文字起こししている最中はGPUが元気に動きます。ゲームをやらずに、動画のエンコードぐらいしか使っていない自分にはこんなにGPUが動いているのを初めて見ました。\u003c/p\u003e\n\u003cp\u003envidia-smiすると、温度も上昇しているし、ファンが「ウィーン」と音を立てて回りだすのがわかります。\u003c/p\u003e\n\u003cp\u003ePythonが2.5GBぐらいのGPUのメモリを使用しているのがわかります。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 520.61.05    Driver Version: 520.61.05    CUDA Version: 11.8     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  On   | 00000000:01:00.0 Off |                  N/A |\n| 54%   65C    P2    64W /  75W |   2540MiB /  4096MiB |     96%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n                                                                              \n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|    0   N/A  N/A      2902      G   /usr/lib/xorg/Xorg                 15MiB |\n|    0   N/A  N/A    117856      C   /usr/bin/python                  2520MiB |\n+-----------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e比較のため、通常の穏やかな\u003ccode\u003envidia-smi\u003c/code\u003e。FANは54%。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 520.61.05    Driver Version: 520.61.05    CUDA Version: 11.8     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  On   | 00000000:01:00.0 Off |                  N/A |\n| 30%   34C    P8     4W /  75W |     17MiB /  4096MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n                                                                              \n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|    0   N/A  N/A      2902      G   /usr/lib/xorg/Xorg                 15MiB |\n+-----------------------------------------------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"参考にした記事\"\u003e参考にした記事\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考にした記事\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://qiita.com/szktmyk38f/items/374f24d06fe277a1922a\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eOpenAI Whisper のコマンドオプション - Qiita\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zenn.dev/kwashizzz/articles/ml-openai-whisper-ft\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eOpenAIの音声認識モデル Whisperの解説 / Fine Tuning 方法\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zenn.dev/piment/articles/ca917d0e9c8a49\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eWhisperのREADME\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# OpenAIがwhisperという音声認識＆文字起こししてくれるアプリケーションを公開しました。 openai/whisper: Robust Speech Recognition via Large-Scale Weak Supervision 無料だし、なかなかいい感じという噂を聞いて試してみました。 環境はDockerで作る# Dockerで環境を構築しました。 CPUでも動くようですが、文字起こしのスピードが遅いとの記事を読みました。なので、GPUを使用する構成にしています。使用しているのは、GTX 1650のグラフィックメモリが4GBのものです。 ベースイメージのPyTorch（パイトーチって読むの？）は以下のNVIDIAページを参考にしました。 PyTorch Release Notes :: NVIDIA Deep Learning Frameworks Documentation 最終的なDockerファイルは以下です。 FROM nvcr.io/nvidia/pytorch:22.12-py3 WORKDIR /workspace ENV TZ=Asia/Tokyo RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone RUN apt-get update \u0026\u0026 apt-get install -y \\ build-essential \\ gcc \\ git \\ ffmpeg \\ \u0026\u0026 rm -rf /var/lib/apt/lists/* RUN pip install --upgrade pip RUN pip install git+https://github.com/openai/whisper.git Dockerイメージのbuildでつまづいたところ# Dockerイメージをbuildすると、以下のメッセージでbuildが停止するという事象がありました。ユーザ側の入力を求められるようなのですが、入力しても先に進まないのです。 Configuring tzdata ------------------ Please select the geographic area in which you live. Subsequent configuration questions will narrow this down by presenting a list of cities, representing the time zones in which they are located. 1. Africa 4. Australia 7. Atlantic 10. Pacific 13. Etc 2. America 5. Arctic 8. Europe 11. SystemV 3. Antarctica 6. Asia 9. Indian 12. US 以下の記事を参考にして、対応しました。 Fix: tzdata hangs during Docker image build | by Grigor Khachatryan | Medium 具体的には、Dockerファイルに以下のtimezone設定を追加しました。 ENV TZ=Asia/Tokyo RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026\u0026 echo $TZ \u003e /etc/timezone Dockerのbuild、run、whisperを使う# 実際に使用したコマンドです。 使いやすいようにwhisper_gpuというタグをつけてbuild。 docker build . -t whisper_gpu runします。落とし上げが面倒なので--rmオプションは必須です。また、execでアタッチしたいので、コンテナは--name whisper_gpuで名前指定しています。 docker run --rm --gpus all -it -d -v $(pwd):/workspace/ --name whisper_gpu whisper_gpu docker execでコンテナに入ります。 docker exec -it whisper_gpu bash 以下のコマンドで音声ファイルを文字起こし。--modelで学習量を指定しますが、何も書かないとデフォルトのsmallが指定されます。 ちなみに、ffmpegを入れているので音声ファイルは*.m4aもちゃんと読み取ってくれます。 whisper test.m4a --language ja なお、以下のように--model largeを指定すると2.87Gの学習をメモリに展開するようで、torch.cuda.OutOfMemoryError: CUDA out of memory.というメッセージが出力されて終了します。ビデオカードのメモリが不足しているんだと予想して諦めてます。ちなみに、mediumでも同じメッセージで動きませんでした。 whisper test.m4a --language ja --model large 18%|██████▉ | 536M/2.87G [00:47\u003c03:26, 12.2MiB/s] Traceback (most recent call last): File \"/opt/conda/bin/whisper\", line 8, in \u003cmodule\u003e sys.exit(cli()) File \"/opt/conda/lib/python3.10/site-packages/whisper/transcribe.py\", line 304, in cli model = load_model(model_name, device=device, download_root=model_dir) File \"/opt/conda/lib/python3.10/site-packages/whisper/__init__.py\", line 116, in load_model return model.to(device) File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 989, in to return self._apply(convert) File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 641, in _apply module._apply(fn) File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 641, in _apply module._apply(fn) File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 641, in _apply module._apply(fn) [Previous line repeated 2 more times] File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 664, in _apply param_applied = fn(param) File \"/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 987, in convert return t.to(device, dtype if t.is_floating_point() or t.is_complex() else None, non_blocking) torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 26.00 MiB (GPU 0; 3.82 GiB total capacity; 2.94 GiB already allocated; 19.19 MiB free; 3.20 GiB reserved in total by PyTorch) If reserved memory is \u003e\u003e allocated memory try setting max_split_size_mb to avoid fragmentation. See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF GPUの文字起こし時間# GPUを使用すると、30分の音声ファイルを文字起こしするのに約10分ぐらいです。 速い！この速度なら、十分かなと思います。 GPUが動いているのを感じる# 文字起こししている最中はGPUが元気に動きます。ゲームをやらずに、動画のエンコードぐらいしか使っていない自分にはこんなにGPUが動いているのを初めて見ました。 nvidia-smiすると、温度も上昇しているし、ファンが「ウィーン」と音を立てて回りだすのがわかります。 Pythonが2.5GBぐらいのGPUのメモリを使用しているのがわかります。 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 520.61.05 Driver Version: 520.61.05 CUDA Version: 11.8 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA GeForce ... On | 00000000:01:00.0 Off | N/A | | 54% 65C P2 64W / 75W | 2540MiB / 4096MiB | 96% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | 0 N/A N/A 2902 G /usr/lib/xorg/Xorg 15MiB | | 0 N/A N/A 117856 C /usr/bin/python 2520MiB | +-----------------------------------------------------------------------------+ 比較のため、通常の穏やかなnvidia-smi。FANは54%。 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 520.61.05 Driver Version: 520.61.05 CUDA Version: 11.8 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA GeForce ... On | 00000000:01:00.0 Off | N/A | | 30% 34C P8 4W / 75W | 17MiB / 4096MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | 0 N/A N/A 2902 G /usr/lib/xorg/Xorg 15MiB | +-----------------------------------------------------------------------------+ 参考にした記事# OpenAI Whisper のコマンドオプション - Qiita OpenAIの音声認識モデル Whisperの解説 / Fine Tuning 方法 WhisperのREADME 微信 支付宝","scraped_at":"2025-07-12T21:20:28.367647315+09:00","word_count":595,"content_hash":"371dcc58401f01d59817e5f6f38574cd"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2022/golang-regex/","title":"golang:正規表現","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://blog.chick-p.work/til/golang-regular-expression\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eGo 言語で正規表現を扱うときの関数 | ひよこまめ\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.kwbtblog.com/entry/2020/05/11/193639\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eGo言語の正規表現・文字列操作方法メモ - 新しいことにはウェルカム\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"参考# Go 言語で正規表現を扱うときの関数 | ひよこまめ Go言語の正規表現・文字列操作方法メモ - 新しいことにはウェルカム 微信 支付宝","scraped_at":"2025-07-12T21:20:32.906470022+09:00","word_count":10,"content_hash":"d7aff7efa926c41f49639f66e78abd13"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2022/hugo-time-format/","title":"golang:UNIXtimeとHugoで使用できる形式に変換","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003egolangは日時の形式が馴染めないので、毎回調べる行為から着手することになります。\u003c/p\u003e\n\u003cp\u003eよく使用する表示形式などを関数にしました。パースした日時を引数にすれば、求める形式で返ってきます。\u003c/p\u003e\n\u003cp\u003eわざわざ関数にしなくても良いとは思うのですが、「引数に日時」としておけば自分の中で汎用的に使用できると思うのです。\u003c/p\u003e\n\u003ch2 id=\"unixタイム\"\u003eUNIXタイム\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#unixタイム\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e呼び出し元で使いまわせるように、\u003ccode\u003eint64\u003c/code\u003eで返却するようにしてます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003etime2unix\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003et\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eTime\u003c/span\u003e) \u003cspan style=\"color:#fec418\"\u003eint64\u003c/span\u003e {\n\t\u003cspan style=\"color:#776e71\"\u003e//UNIX時間を返す。使いやすいようにint64で\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eUnix\u003c/span\u003e()\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"rfc3339形式\"\u003eRFC3339形式\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#rfc3339形式\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eあらかじめ定義されている以下の形式で返却します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eRFC3339     = \u0026#34;2006-01-02T15:04:05Z07:00\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこんな関数。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#815ba4\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003etime2RFC3339\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003et\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eTime\u003c/span\u003e) \u003cspan style=\"color:#fec418\"\u003estring\u003c/span\u003e {\n\t\u003cspan style=\"color:#776e71\"\u003e//2022-11-08T14:00:00+09:00の形式で返す\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eFormat\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eRFC3339\u003c/span\u003e)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://zenn.dev/hsaki/articles/go-time-cheatsheet\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eGoで時刻を扱うチートシート\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# golangは日時の形式が馴染めないので、毎回調べる行為から着手することになります。 よく使用する表示形式などを関数にしました。パースした日時を引数にすれば、求める形式で返ってきます。 わざわざ関数にしなくても良いとは思うのですが、「引数に日時」としておけば自分の中で汎用的に使用できると思うのです。 UNIXタイム# 呼び出し元で使いまわせるように、int64で返却するようにしてます。 func time2unix(t time.Time) int64 { //UNIX時間を返す。使いやすいようにint64で return t.Unix() } RFC3339形式# あらかじめ定義されている以下の形式で返却します。 RFC3339 = \"2006-01-02T15:04:05Z07:00\" こんな関数。 func time2RFC3339(t time.Time) string { //2022-11-08T14:00:00+09:00の形式で返す return t.Format(time.RFC3339) } 参考# Goで時刻を扱うチートシート 微信 支付宝","scraped_at":"2025-07-12T21:20:32.97796379+09:00","word_count":34,"content_hash":"ccafdb9608f6055c60e93f9e233d452f"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2022/golang-html-template-to-text-template/","title":"golang:htmlがエスケープされたので、textテンプレートに変更","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"事象\"\u003e事象\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#事象\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003ehtml/templateを使用して「+」を表示させようとしたら、エスケープされました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eimport (\n    \u0026#34;html/template\u0026#34;\n)\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"期待値\"\u003e期待値\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#期待値\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003edata: 2022-12-05T07:36:32+09:00\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"出力値\"\u003e出力値\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#出力値\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003edata: 2022-12-05T07:36:32\u0026amp;#43;09:00\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"対応\"\u003e対応\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e独自に関数を作るという方法もあるようですが、使用するテンプレートを変更しました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eimport (\n    \u0026#34;text/template\u0026#34;\n)\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"参考\"\u003e参考\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#参考\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://qiita.com/peketamin/items/1b9b5c74fdb38d52ad77\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003egolang で html/template でのテンプレートの継承と、HTML エスケープしないで変数を出力する方法 (Django, Jinja みたいに) - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"事象# html/templateを使用して「+」を表示させようとしたら、エスケープされました。 import ( \"html/template\" ) 期待値# data: 2022-12-05T07:36:32+09:00 出力値# data: 2022-12-05T07:36:32\u0026#43;09:00 対応# 独自に関数を作るという方法もあるようですが、使用するテンプレートを変更しました。 import ( \"text/template\" ) 参考# golang で html/template でのテンプレートの継承と、HTML エスケープしないで変数を出力する方法 (Django, Jinja みたいに) - Qiita 微信 支付宝","scraped_at":"2025-07-12T21:20:34.321968228+09:00","word_count":31,"content_hash":"a2170d382e63f202e63d4583cb90dec3"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2022/golang-date-parse/","title":"golang:パースした日付をJSTで取り扱う方法","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003cp\u003egolangで日付をJSTで取り扱うにはひと工夫必要です。\u003c/p\u003e\n\u003cp\u003eたとえば、日付をパースして使う場合です。\u003c/p\u003e\n\u003cp\u003e以下のような日付があったとします。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#06b6ef\"\u003eres\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;2022年12月10日 19時09分56秒\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eパースするために、レイアウトを用意します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\t\u003cspan style=\"color:#06b6ef\"\u003elayout\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#48b685\"\u003e\u0026#34;2006年01月02日 15時04分05秒\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれで\u003ccode\u003etime.Parse\u003c/code\u003eすると、JSTで解釈されないんです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#06b6ef\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eParse\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003elayout\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003evalue\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eということで、\u003ccode\u003etime.ParseInLocation\u003c/code\u003eを使用します。これを使用するために\u003ccode\u003etime.LoadLocation\u003c/code\u003eを使用してタイムゾーンを指定してあげる必要があります。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\t\u003cspan style=\"color:#06b6ef\"\u003etokyo\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eLoadLocation\u003c/span\u003e(\u003cspan style=\"color:#48b685\"\u003e\u0026#34;Asia/Tokyo\u0026#34;\u003c/span\u003e)\n\n\t\u003cspan style=\"color:#06b6ef\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#06b6ef\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eParseInLocation\u003c/span\u003e(\u003cspan style=\"color:#06b6ef\"\u003elayout\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003eres\u003c/span\u003e, \u003cspan style=\"color:#06b6ef\"\u003etokyo\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"golangで日付をJSTで取り扱うにはひと工夫必要です。 たとえば、日付をパースして使う場合です。 以下のような日付があったとします。 res := \"2022年12月10日 19時09分56秒\" パースするために、レイアウトを用意します。 layout := \"2006年01月02日 15時04分05秒\" これでtime.Parseすると、JSTで解釈されないんです。 t, _ := time.Parse(layout, value) ということで、time.ParseInLocationを使用します。これを使用するためにtime.LoadLocationを使用してタイムゾーンを指定してあげる必要があります。 tokyo, _ := time.LoadLocation(\"Asia/Tokyo\") t, _ := time.ParseInLocation(layout, res, tokyo) 微信 支付宝","scraped_at":"2025-07-12T21:20:35.201698828+09:00","word_count":31,"content_hash":"f3c2b8dcbbb586f06de4a858bc0c8acb"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2022/change-html-to-markdown/","title":"golang:HTMLをmarkdownに変換","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003cp\u003ehtmlファイルをmarkdownに変換したくて、いいのがないかと探していました。\u003c/p\u003e\n\u003cp\u003e使いやすそうだったので、このライブラリを使用しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/JohannesKaufmann/html-to-markdown\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eJohannesKaufmann/html-to-markdown: ⚙️ Convert HTML to Markdown. Even works with entire websites and can be extended through rules.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eそのまま使用すると水平線が「* * *」と自分には馴染みの薄い文字列となります。そこで、馴染みある「—」にするため、以下のオプションを使用しました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\t\u003cspan style=\"color:#06b6ef\"\u003eopt\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#06b6ef\"\u003emd\u003c/span\u003e.\u003cspan style=\"color:#06b6ef\"\u003eOptions\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#06b6ef\"\u003eHorizontalRule\u003c/span\u003e: \u003cspan style=\"color:#48b685\"\u003e\u0026#34;---\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#776e71\"\u003e// default: **\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#776e71\"\u003e// ...\n\u003c/span\u003e\u003cspan style=\"color:#776e71\"\u003e\u003c/span\u003e\t}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"htmlファイルをmarkdownに変換したくて、いいのがないかと探していました。 使いやすそうだったので、このライブラリを使用しました。 JohannesKaufmann/html-to-markdown: ⚙️ Convert HTML to Markdown. Even works with entire websites and can be extended through rules. そのまま使用すると水平線が「* * *」と自分には馴染みの薄い文字列となります。そこで、馴染みある「—」にするため、以下のオプションを使用しました。 opt := \u0026md.Options{ HorizontalRule: \"---\", // default: ** // ... } 微信 支付宝","scraped_at":"2025-07-12T21:20:37.491820415+09:00","word_count":35,"content_hash":"d602509654daab8d82c4fc812f4dba86"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2022/github-actions-self-host-runner/","title":"GitHub Actionsをセルフホストランナーで動かす","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下でActを利用してローカルで動かそうとしました。しかし、自分で解決できなさそうなエラーが出力されたので、いったん諦めました。\u003c/p\u003e\n\u003cp\u003e調べると、セルフホストランナーの存在を知りました。自分の環境でGitHub Actionsが動くというではないですか。これは素晴らしいと思い、次はこれに挑戦してみることにしました。\u003c/p\u003e\n\u003cp\u003e以下のGitHubのドキュメントに書いてありますね。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.github.com/ja/actions/hosting-your-own-runners/autoscaling-with-self-hosted-runners\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003e自分のランナーをホストする - GitHub Docs\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"セルフホストランナーを動かす環境\"\u003eセルフホストランナーを動かす環境\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#セルフホストランナーを動かす環境\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e使用しているM1のMacBookAirで動かすことを考えましたが、作業が重くなるのは避けたいこともあり、Ubuntu22.04のサーバーを使用することにしました。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"githubでの設定\"\u003eGitHubでの設定\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#githubでの設定\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下の画面の矢印で示した「New self-hosted runner」をクリックします。これだけです。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"01.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"ローカルサーバーでの設定\"\u003eローカルサーバーでの設定\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ローカルサーバーでの設定\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eあとは、画面に表示されるコマンドをその通りに入力すればOKです。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"02.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eこの手順に従ってコマンドを入力するだけです。以下のコマンドのトークンは適当なものに書き換えてます。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e./config.sh --url https://github.com/yamadatt/hugo-luna-photo --token AAAAAAAAAAAAAAAAA\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eこのコマンドで以下のように出力されます。入力を求められますので、デフォルトの意味で全てにお解答にエンターキーを押しました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#48b685\"\u003e```\u003c/span\u003e--------------------------------------------------------------------------------\n|        ____ _ _   _   _       _          _        _   _                      |\n|       / ___\u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e_\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e |_| | | |_   _| |__      / \u003cspan style=\"color:#f99b15\"\u003e\\ \u003c/span\u003e  ___| |_\u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e_\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e ___  _ __  ___      |\n|      | |  _| | __| |_| | | | | \u003cspan style=\"color:#48b685\"\u003e\u0026#39;_ \\    / _ \\ / __| __| |/ _ \\| \u0026#39;\u003c/span\u003e_ \u003cspan style=\"color:#f99b15\"\u003e\\/\u003c/span\u003e __|     |\n|      | |_| | | |_|  _  | |_| | |_\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e |  / ___ \u003cspan style=\"color:#f99b15\"\u003e\\ \u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e__| |_| | \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003e_\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e | | | \u003cspan style=\"color:#f99b15\"\u003e\\_\u003c/span\u003e_ \u003cspan style=\"color:#f99b15\"\u003e\\ \u003c/span\u003e    |\n|       \u003cspan style=\"color:#f99b15\"\u003e\\_\u003c/span\u003e___|_|\u003cspan style=\"color:#f99b15\"\u003e\\_\u003c/span\u003e_|_| |_|\u003cspan style=\"color:#f99b15\"\u003e\\_\u003c/span\u003e_,_|_.__/  /_/   \u003cspan style=\"color:#f99b15\"\u003e\\_\\_\u003c/span\u003e__|\u003cspan style=\"color:#f99b15\"\u003e\\_\u003c/span\u003e_|_|\u003cspan style=\"color:#f99b15\"\u003e\\_\u003c/span\u003e__/|_| |_|___/     |\n|                                                                              |\n|                       Self-hosted runner registration                        |\n|                                                                              |\n--------------------------------------------------------------------------------\n\n\u003cspan style=\"color:#776e71\"\u003e# Authentication\u003c/span\u003e\n\n\n√ Connected to GitHub\n\n\u003cspan style=\"color:#776e71\"\u003e# Runner Registration\u003c/span\u003e\n\nEnter the name of the runner group to add this runner to: \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003epress Enter \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e Default\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e \n\nEnter the name of runner: \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003epress Enter \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e ubuntu2204\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e \n\nThis runner will have the following labels: \u003cspan style=\"color:#48b685\"\u003e\u0026#39;self-hosted\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#39;Linux\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#48b685\"\u003e\u0026#39;X64\u0026#39;\u003c/span\u003e \nEnter any additional labels \u003cspan style=\"color:#5bc4bf\"\u003e(\u003c/span\u003eex. label-1,label-2\u003cspan style=\"color:#5bc4bf\"\u003e)\u003c/span\u003e: \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003epress Enter to skip\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e \n\n√ Runner successfully added\n√ Runner connection is good\n\n\u003cspan style=\"color:#776e71\"\u003e# Runner settings\u003c/span\u003e\n\nEnter name of work folder: \u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003epress Enter \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e _work\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e \n\n√ Settings Saved.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eセルフホストランナーを起動します。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e./run.sh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eなお、sudoを使用しての起動はできません。以下のように\u0026#34;Must not\u0026#34;と怒られます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo ./run.sh\nMust not run interactively with sudo\nExiting runner...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"ubuntu-latestからself-hostedに変更\"\u003eubuntu-latestからself-hostedに変更\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ubuntu-latestからself-hostedに変更\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003erunn-onをself-hostedに変更します。これでセルフホストランナーで動くようになります。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#5bc4bf\"\u003ejobs\u003c/span\u003e:\n    \u003cspan style=\"color:#5bc4bf\"\u003edeploy\u003c/span\u003e:\n        \u003cspan style=\"color:#5bc4bf\"\u003eenv\u003c/span\u003e:\n            \u003cspan style=\"color:#5bc4bf\"\u003eHUGO_VERSION\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003e${{ github.sha }}\u003c/span\u003e\n            \u003cspan style=\"color:#5bc4bf\"\u003eTZ\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eAsia/Tokyo\u003c/span\u003e\n        \u003cspan style=\"color:#776e71\"\u003e# runs-on: ubuntu-latest\u003c/span\u003e\n        \u003cspan style=\"color:#5bc4bf\"\u003eruns-on\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003eself-hosted\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"対応したエラー\"\u003e対応したエラー\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対応したエラー\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eこれだけで動くと思っていた自分が浅はかでした。というのも、GitHub Actionsでそれなりに動いていたので、セルフホストランナーに変わったとしても動くだろうと思っていたためです。\u003c/p\u003e\n\u003cp\u003eそんなことはなく、出てきたエラーを解析しながら少しずつ解決して動かしました。\u003c/p\u003e\n\u003ch3 id=\"ディレクトリのパーミッションが不足している\"\u003eディレクトリのパーミッションが不足している\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#ディレクトリのパーミッションが不足している\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e以下のエラーメセージが出力されます。\u003c/p\u003e\n\u003cp\u003eHugoのビルド時、ローカルの/tmp/hugo_cache/配下にディレクトリを作成して、それを削除するという動きがあります。ここでパーミッションがないとエラーになるのです。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e    Run echo \u003cspan style=\"color:#48b685\"\u003e\u0026#34;HUGO_VERSION -\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#ef6155\"\u003e$HUGO_VERSION\u003c/span\u003e\u003cspan style=\"color:#48b685\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#5bc4bf\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e hugo --gc --minify --cleanDestinationDir\n    HUGO_VERSION -\u0026gt; 449e1b767cdb82d9307fe5eb4a6464d6b369a1cb\n    Start building sites … \n    hugo v0.104.3-58b824581360148f2d91f5cc83f69bd22c1aa331+extended linux/amd64 \u003cspan style=\"color:#ef6155\"\u003eBuildDate\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003e2022-10-04T14:25:23Z \u003cspan style=\"color:#ef6155\"\u003eVendorInfo\u003c/span\u003e\u003cspan style=\"color:#5bc4bf\"\u003e=\u003c/span\u003egohugoio\n    WARN 2022/11/05 14:56:39 Content directory \u003cspan style=\"color:#48b685\"\u003e\u0026#34;/home/yamadatt/git/hugo-luna-photo/actions-runner/_work/hugo-luna-photo/hugo-luna-photo/content/ja/posts\u0026#34;\u003c/span\u003e have both index.* and _index.* files, pick one.\n    Error: failed to prune cache \u003cspan style=\"color:#48b685\"\u003e\u0026#34;getcsv\u0026#34;\u003c/span\u003e: remove /tmp/hugo_cache/hugo-luna-photo/filecache/getcsv: permission denied\n    Total in \u003cspan style=\"color:#f99b15\"\u003e50222\u003c/span\u003e ms\n    Error: Process completed with exit code 255.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eパーミッションを与えればいいのですが、パーミッション変更はsudoが必要です。\u003c/p\u003e\n\u003cp\u003e最初に試したのが、sudoで./run.shすることです。が、上述したようにsudoは使えませんでした。\u003c/p\u003e\n\u003cp\u003eということで、\u003c/p\u003e\n\u003cp\u003eHugoのBuild直前にこのコマンドを追加しました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e    - \u003cspan style=\"color:#5bc4bf\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003echange permission\u003c/span\u003e\n        \u003cspan style=\"color:#5bc4bf\"\u003erun\u003c/span\u003e: \u003cspan style=\"color:#f99b15\"\u003esudo chown -R $USER:$USER /tmp/hugo_cache/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eこれでパーミッションのエラーは回避されるのですが、./run.shしている画面でsudoのパスワードを聞かれます。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ ./run.sh\n\n√ Connected to GitHub\n\nCurrent runner version: \u003cspan style=\"color:#48b685\"\u003e\u0026#39;2.298.2\u0026#39;\u003c/span\u003e\n2022-11-05 21:20:02Z: Listening \u003cspan style=\"color:#815ba4\"\u003efor\u003c/span\u003e Jobs\n2022-11-05 21:20:06Z: Running job: deploy\n\u003cspan style=\"color:#5bc4bf\"\u003e[\u003c/span\u003esudo\u003cspan style=\"color:#5bc4bf\"\u003e]\u003c/span\u003e yamadatt のパスワード: \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e追記。\u003c/p\u003e\n\u003cp\u003e/tmp/hugo_cache/はOSをリブートすると消えてしまうので、ディレクトリがないというエラーが出力された。そのため/tmp/にパーミッションを与えた。\u003c/p\u003e\n\u003ch3 id=\"netlifyへのデプロイができない\"\u003eNetlifyへのデプロイができない\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#netlifyへのデプロイができない\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNetlifyへのデプロイは以下を使用しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/marketplace/actions/netlify-actions\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eNetlify Actions · Actions · GitHub Marketplace\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e上記ページのサンプルをそのまま使用しました。\u003c/p\u003e\n\u003cp\u003eそのまま使用すると期待通りに動かないので、以下を変更しています。\u003c/p\u003e\n\u003ch4 id=\"変更点1\"\u003e変更点1\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#変更点1\"\u003e#\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003epublish-dir:\u003c/code\u003eをhugoコマンドで静的ファイルが作成される\u003ccode\u003e\u0026#39;./public\u0026#39;\u003c/code\u003eに変更しました。\u003c/p\u003e\n\u003ch4 id=\"変更点2\"\u003e変更点2\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#変更点2\"\u003e#\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eproduction-branch:\u003c/code\u003e を\u003ccode\u003emaster\u003c/code\u003eから\u003ccode\u003emain\u003c/code\u003eに変更しました。\u003c/p\u003e\n\u003cp\u003eこれはmasterだとproduction用のURLに静的ファイルが公開されなかったためです。\u003c/p\u003e\n\u003ch3 id=\"応答がなくなる\"\u003e応答がなくなる\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#応答がなくなる\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e./run.shが固まって、応答がなくなりました。その際は以下のメッセージが出力されていました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eRunner connect error: The HTTP request timed out after 00:01:00.. Retrying \u003cspan style=\"color:#815ba4\"\u003euntil\u003c/span\u003e reconnected.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCtrl+Cで終了させようとしましたが、これができません。そこで、killしました。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ekill -9\u003c/code\u003eすると以下のメッセージが出力されて、強制的に終了させることができました。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eRunner listener exit with \u003cspan style=\"color:#f99b15\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#815ba4\"\u003ereturn\u003c/span\u003e code, stop the service, no retry needed.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e##　試してみたい\u003c/p\u003e\n\u003cp\u003e以下の記事にDokder上でセルフホストランナーを動かすことができるようなことが書いてました。これも試してみたいです。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zenn.dev/snowcait/articles/2b4a903b9fd584\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eGitHub Actions のデバッグをローカルで行う\u003c/a\u003e\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# 以下でActを利用してローカルで動かそうとしました。しかし、自分で解決できなさそうなエラーが出力されたので、いったん諦めました。 調べると、セルフホストランナーの存在を知りました。自分の環境でGitHub Actionsが動くというではないですか。これは素晴らしいと思い、次はこれに挑戦してみることにしました。 以下のGitHubのドキュメントに書いてありますね。 自分のランナーをホストする - GitHub Docs セルフホストランナーを動かす環境# 使用しているM1のMacBookAirで動かすことを考えましたが、作業が重くなるのは避けたいこともあり、Ubuntu22.04のサーバーを使用することにしました。 手順# GitHubでの設定# 以下の画面の矢印で示した「New self-hosted runner」をクリックします。これだけです。 ローカルサーバーでの設定# あとは、画面に表示されるコマンドをその通りに入力すればOKです。 この手順に従ってコマンドを入力するだけです。以下のコマンドのトークンは適当なものに書き換えてます。 ./config.sh --url https://github.com/yamadatt/hugo-luna-photo --token AAAAAAAAAAAAAAAAA このコマンドで以下のように出力されます。入力を求められますので、デフォルトの意味で全てにお解答にエンターキーを押しました。 ```-------------------------------------------------------------------------------- | ____ _ _ _ _ _ _ _ _ | | / ___(_) |_| | | |_ _| |__ / \\ ___| |_(_) ___ _ __ ___ | | | | _| | __| |_| | | | | '_ \\ / _ \\ / __| __| |/ _ \\| '_ \\/ __| | | | |_| | | |_| _ | |_| | |_) | / ___ \\ (__| |_| | (_) | | | \\__ \\ | | \\____|_|\\__|_| |_|\\__,_|_.__/ /_/ \\_\\___|\\__|_|\\___/|_| |_|___/ | | | | Self-hosted runner registration | | | -------------------------------------------------------------------------------- # Authentication √ Connected to GitHub # Runner Registration Enter the name of the runner group to add this runner to: [press Enter for Default] Enter the name of runner: [press Enter for ubuntu2204] This runner will have the following labels: 'self-hosted', 'Linux', 'X64' Enter any additional labels (ex. label-1,label-2): [press Enter to skip] √ Runner successfully added √ Runner connection is good # Runner settings Enter name of work folder: [press Enter for _work] √ Settings Saved. セルフホストランナーを起動します。 ./run.sh なお、sudoを使用しての起動はできません。以下のように\"Must not\"と怒られます。 sudo ./run.sh Must not run interactively with sudo Exiting runner... ubuntu-latestからself-hostedに変更# runn-onをself-hostedに変更します。これでセルフホストランナーで動くようになります。 jobs: deploy: env: HUGO_VERSION: ${{ github.sha }} TZ: Asia/Tokyo # runs-on: ubuntu-latest runs-on: self-hosted 対応したエラー# これだけで動くと思っていた自分が浅はかでした。というのも、GitHub Actionsでそれなりに動いていたので、セルフホストランナーに変わったとしても動くだろうと思っていたためです。 そんなことはなく、出てきたエラーを解析しながら少しずつ解決して動かしました。 ディレクトリのパーミッションが不足している# 以下のエラーメセージが出力されます。 Hugoのビルド時、ローカルの/tmp/hugo_cache/配下にディレクトリを作成して、それを削除するという動きがあります。ここでパーミッションがないとエラーになるのです。 Run echo \"HUGO_VERSION -\u003e $HUGO_VERSION\" \u0026\u0026 hugo --gc --minify --cleanDestinationDir HUGO_VERSION -\u003e 449e1b767cdb82d9307fe5eb4a6464d6b369a1cb Start building sites … hugo v0.104.3-58b824581360148f2d91f5cc83f69bd22c1aa331+extended linux/amd64 BuildDate=2022-10-04T14:25:23Z VendorInfo=gohugoio WARN 2022/11/05 14:56:39 Content directory \"/home/yamadatt/git/hugo-luna-photo/actions-runner/_work/hugo-luna-photo/hugo-luna-photo/content/ja/posts\" have both index.* and _index.* files, pick one. Error: failed to prune cache \"getcsv\": remove /tmp/hugo_cache/hugo-luna-photo/filecache/getcsv: permission denied Total in 50222 ms Error: Process completed with exit code 255. パーミッションを与えればいいのですが、パーミッション変更はsudoが必要です。 最初に試したのが、sudoで./run.shすることです。が、上述したようにsudoは使えませんでした。 ということで、 HugoのBuild直前にこのコマンドを追加しました。 - name: change permission run: sudo chown -R $USER:$USER /tmp/hugo_cache/ これでパーミッションのエラーは回避されるのですが、./run.shしている画面でsudoのパスワードを聞かれます。 $ ./run.sh √ Connected to GitHub Current runner version: '2.298.2' 2022-11-05 21:20:02Z: Listening for Jobs 2022-11-05 21:20:06Z: Running job: deploy [sudo] yamadatt のパスワード: 追記。 /tmp/hugo_cache/はOSをリブートすると消えてしまうので、ディレクトリがないというエラーが出力された。そのため/tmp/にパーミッションを与えた。 Netlifyへのデプロイができない# Netlifyへのデプロイは以下を使用しました。 Netlify Actions · Actions · GitHub Marketplace 上記ページのサンプルをそのまま使用しました。 そのまま使用すると期待通りに動かないので、以下を変更しています。 変更点1# publish-dir:をhugoコマンドで静的ファイルが作成される'./public'に変更しました。 変更点2# production-branch: をmasterからmainに変更しました。 これはmasterだとproduction用のURLに静的ファイルが公開されなかったためです。 応答がなくなる# ./run.shが固まって、応答がなくなりました。その際は以下のメッセージが出力されていました。 Runner connect error: The HTTP request timed out after 00:01:00.. Retrying until reconnected. Ctrl+Cで終了させようとしましたが、これができません。そこで、killしました。 kill -9すると以下のメッセージが出力されて、強制的に終了させることができました。 Runner listener exit with 0 return code, stop the service, no retry needed. ##　試してみたい 以下の記事にDokder上でセルフホストランナーを動かすことができるようなことが書いてました。これも試してみたいです。 GitHub Actions のデバッグをローカルで行う 微信 支付宝","scraped_at":"2025-07-12T21:20:41.263157018+09:00","word_count":391,"content_hash":"e41638d1323f3c501ec4ebc9d8769544"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2022/github-commit-history-initialized/","title":"GitHub ActionsをActで動かそうとしたけど、、、諦めた","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHub Actionsはデバッグがしにくいです。一発でActionsが動くことはなく、動かして、エラーがでるから直して、pushするというのを繰り返します。これがメンドです。\u003c/p\u003e\n\u003cp\u003eactというのがデバッグには良いとのことですが、ローカルのサーバーがUbuntuということもあって、なんならローカルで動かしてしまえばいいんじゃないかと思って試してみました。\u003c/p\u003e\n\u003ch2 id=\"手順\"\u003e手順\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#手順\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のリポジトリを参照して、インストールしました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/nektos/act\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003enektos/act: Run your GitHub Actions locally 🚀\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eインストール\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e以下のメッセージが出力されて、インストールが完了します。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                Dload  Upload   Total   Spent    Left  Speed\n100  9886  100  9886    0     0  47304      0 --:--:-- --:--:-- --:--:-- 47301\nnektos/act info checking GitHub for latest tag\nnektos/act info found version: 0.2.33 for v0.2.33/Linux/x86_64\nnektos/act info installed ./bin/act\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eインストールした時のディレクトリにbinができているので、そこから利用します。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebin/act -W .github/workflows/main.yml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eエラーメッセージが出力されました。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[CI/deploy] ⭐ Run Main Install Theme\n[CI/deploy]   🐳  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n| /var/run/act/workflow/3: line 2: yarn: command not found\n[CI/deploy]   ❌  Failure - Main Install Theme\n[CI/deploy] exitcode \u0026#39;127\u0026#39;: command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[CI/deploy] 🏁  Job failed\nError: Job \u0026#39;deploy\u0026#39; failed\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eyarnがインストールされてないだろうということで、yamlに以下を追記。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        - name: Install Yarn\n          run: npm install -g yarn\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e上記のエラーは出なくなったものの、以下のエラーが出ます。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[CI/deploy]   ✅  Success - Main Install Yarn\n[CI/deploy] ⭐ Run Main Install Theme\n[CI/deploy]   🐳  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\nyarn install v1.22.19\nwarning package.json: License should be a valid SPDX license expression\ninfo No lockfile found.\nwarning hugo-theme-luna@0.0.1: License should be a valid SPDX license expression\n[1/4] Resolving packages...\nwarning cssnano \u0026gt; cssnano-preset-default \u0026gt; postcss-svgo \u0026gt; svgo \u0026gt; stable@0.1.8: Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility\nerror Command failed.\n| Exit code: 128\n| Command: git\n| Arguments: ls-remote --tags --heads https://github.com/Ice-Hazymoon/jump.js\n| Directory: /home/yamadatt/git/hugo-luna-photo/themes/hugo-theme-luna\n| Output:\n| fatal: not a git repository: /home/yamadatt/git/hugo-luna-photo/themes/hugo-theme-luna/../../.git/modules/themes/hugo-theme-luna\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n[CI/deploy]   ❌  Failure - Main Install Theme\n[CI/deploy] exitcode \u0026#39;128\u0026#39;: failure\n[CI/deploy] 🏁  Job failed\nError: Job \u0026#39;deploy\u0026#39; failed\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003egitリポジトリではないと、怒られています。\u003c/p\u003e\n\u003cp\u003eGitHub Actionsだとこんなメッセージは出ないのに。。。あくまでも簡易なものしか対応してないのかなぁ。。。。\u003c/p\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# GitHub Actionsはデバッグがしにくいです。一発でActionsが動くことはなく、動かして、エラーがでるから直して、pushするというのを繰り返します。これがメンドです。 actというのがデバッグには良いとのことですが、ローカルのサーバーがUbuntuということもあって、なんならローカルで動かしてしまえばいいんじゃないかと思って試してみました。 手順# 以下のリポジトリを参照して、インストールしました。 nektos/act: Run your GitHub Actions locally 🚀 インストール curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash 以下のメッセージが出力されて、インストールが完了します。 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 9886 100 9886 0 0 47304 0 --:--:-- --:--:-- --:--:-- 47301 nektos/act info checking GitHub for latest tag nektos/act info found version: 0.2.33 for v0.2.33/Linux/x86_64 nektos/act info installed ./bin/act インストールした時のディレクトリにbinができているので、そこから利用します。 bin/act -W .github/workflows/main.yml エラーメッセージが出力されました。 [CI/deploy] ⭐ Run Main Install Theme [CI/deploy] 🐳 docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir= | /var/run/act/workflow/3: line 2: yarn: command not found [CI/deploy] ❌ Failure - Main Install Theme [CI/deploy] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information [CI/deploy] 🏁 Job failed Error: Job 'deploy' failed yarnがインストールされてないだろうということで、yamlに以下を追記。 - name: Install Yarn run: npm install -g yarn 上記のエラーは出なくなったものの、以下のエラーが出ます。 [CI/deploy] ✅ Success - Main Install Yarn [CI/deploy] ⭐ Run Main Install Theme [CI/deploy] 🐳 docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir= yarn install v1.22.19 warning package.json: License should be a valid SPDX license expression info No lockfile found. warning hugo-theme-luna@0.0.1: License should be a valid SPDX license expression [1/4] Resolving packages... warning cssnano \u003e cssnano-preset-default \u003e postcss-svgo \u003e svgo \u003e stable@0.1.8: Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility error Command failed. | Exit code: 128 | Command: git | Arguments: ls-remote --tags --heads https://github.com/Ice-Hazymoon/jump.js | Directory: /home/yamadatt/git/hugo-luna-photo/themes/hugo-theme-luna | Output: | fatal: not a git repository: /home/yamadatt/git/hugo-luna-photo/themes/hugo-theme-luna/../../.git/modules/themes/hugo-theme-luna info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command. [CI/deploy] ❌ Failure - Main Install Theme [CI/deploy] exitcode '128': failure [CI/deploy] 🏁 Job failed Error: Job 'deploy' failed gitリポジトリではないと、怒られています。 GitHub Actionsだとこんなメッセージは出ないのに。。。あくまでも簡易なものしか対応してないのかなぁ。。。。 微信 支付宝","scraped_at":"2025-07-12T21:20:41.931370018+09:00","word_count":286,"content_hash":"fb5bc20009a65656f432ed559982d2e8"}
{"url":"https://yamada-tech-memo.netlify.app/posts/2022/githubactions-to-netlfiy-deploy/","title":"GitHub ActionsからNetlifyにデプロイする","content":"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003carticle class=\"post-single\"\u003e\n    \u003cdiv id=\"single-content\"\u003e\n         \n        \u003cdiv class=\"post-content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#背景\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNetlifyは便利です。GitHubでのPUSHを契機にしてNetlifyでbuild、deployが実行されます。\u003c/p\u003e\n\u003cp\u003eしかし、調子に乗ってしまうと（調子に乗らなくても）このbuildのクレジットがなくなってしまいます。以下はあと4日の状態で、300クレジットのうち246が使用されています。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"BuildsNetlify2022-11-04-14-27-17.jpg\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.70-10.net/2020/05/31/github-actions-deploy-netlify/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eNetlifyに7ドル支払った話（GitHub ActionsでNetlifyにデプロイする）\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eこれでも自分の中では気を遣っています。できればもっとPUSHしたいのですがbuildされてしまうのでローカルでのcommitにとどめているんです。作業の中で、リモートのPUSHまでしないと、精神的に不安だったりしますので。\u003c/p\u003e\n\u003ch2 id=\"対策githubでbuildとdeployする\"\u003e対策：GitHubでbuildとdeployする\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#対策githubでbuildとdeployする\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNetlifyの無料ユーザーは300分のクレジットで、一方GitHub無料ユーザーは2000分のクレジットがあります。そのため、GitHubででbuildしてみようと考えました。\u003c/p\u003e\n\u003cp\u003e同じようなことを考えている人がいまして、以下の記事が参考になりました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://junwatanabe72.com/posts/20220227-netlify-github-action/\" target=\"_blank\" rel=\"noopener\" style=\"color:#42b983\" ;=\"\"\u003eNetlifyのbuild時間をなくすためにSSG対応のGithub Actionsを設定しました。\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"実際に採用した方法\"\u003e実際に採用した方法\u003ca hidden=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#実際に採用した方法\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e以下のツールを使用しました。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/nwtgck/actions-netlify\"\u003ehttps://github.com/nwtgck/actions-netlify\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eで、書いたのがGitHubActionsのyamlがこれです。\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        # Deploy to Netlify with a personalized message\n        - name: 🚀Deploy to Netlify\n          uses: nwtgck/actions-netlify@v1.2\n          with:\n            publish-dir: \u0026#39;./public\u0026#39;\n            production-branch: main\n            deploy-message: \u0026#34;Deploy from GitHub Actions\u0026#34;\n            enable-pull-request-comment: false\n            enable-commit-comment: true\n            overwrites-pull-request-comment: true\n          env:\n            NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}\n            NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}\n            timeout-minutes: 1\u003c/code\u003e\u003c/pre\u003e\n\n\n        \u003c/div\u003e\n        \u003cdiv class=\"post-reward\"\u003e\n            \u003cdiv style=\"padding: 0 0 0 0; margin: 0 0 0 0; width: 100%; font-size:16px; text-align: center;\"\u003e\n                \u003cdiv id=\"QR\" style=\"opacity: 0;\"\u003e\n                    \u003cdiv id=\"wechat\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"wechat_qr\" src=\"https://yamada-tech-memo.netlify.app/img/wechat_pay.png\" alt=\"wechat_pay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e微信\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv id=\"alipay\" style=\"display: inline-block\"\u003e\n                        \u003ca class=\"fancybox\" rel=\"group\"\u003e\n                            \u003cimg id=\"alipay_qr\" src=\"https://yamada-tech-memo.netlify.app/img/alipay.png\" alt=\"alipay\"/\u003e\u003c/a\u003e\n                        \u003cp\u003e支付宝\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\n\u003c/article\u003e\n\u003c/body\u003e\u003c/html\u003e","plain_text":"背景# Netlifyは便利です。GitHubでのPUSHを契機にしてNetlifyでbuild、deployが実行されます。 しかし、調子に乗ってしまうと（調子に乗らなくても）このbuildのクレジットがなくなってしまいます。以下はあと4日の状態で、300クレジットのうち246が使用されています。 Netlifyに7ドル支払った話（GitHub ActionsでNetlifyにデプロイする） これでも自分の中では気を遣っています。できればもっとPUSHしたいのですがbuildされてしまうのでローカルでのcommitにとどめているんです。作業の中で、リモートのPUSHまでしないと、精神的に不安だったりしますので。 対策：GitHubでbuildとdeployする# Netlifyの無料ユーザーは300分のクレジットで、一方GitHub無料ユーザーは2000分のクレジットがあります。そのため、GitHubででbuildしてみようと考えました。 同じようなことを考えている人がいまして、以下の記事が参考になりました。 Netlifyのbuild時間をなくすためにSSG対応のGithub Actionsを設定しました。 実際に採用した方法# 以下のツールを使用しました。 https://github.com/nwtgck/actions-netlify で、書いたのがGitHubActionsのyamlがこれです。 # Deploy to Netlify with a personalized message - name: 🚀Deploy to Netlify uses: nwtgck/actions-netlify@v1.2 with: publish-dir: './public' production-branch: main deploy-message: \"Deploy from GitHub Actions\" enable-pull-request-comment: false enable-commit-comment: true overwrites-pull-request-comment: true env: NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }} NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }} timeout-minutes: 1 微信 支付宝","scraped_at":"2025-07-12T21:20:44.427202943+09:00","word_count":59,"content_hash":"94738a7b3b50cbea5b92ae4c1daf246e"}
